// Code generated by MockGen. DO NOT EDIT.
// Source: x/merkledb/db.go
//
// Generated by this command:
//
//	mockgen -source=x/merkledb/db.go -destination=x/merkledb/merkledbmock/db.go -package=merkledbmock -exclude_interfaces=ChangeProofer,RangeProofer,Clearer,Prefetcher -mock_names=MerkleDB=MerkleDB
//

// Package merkledbmock is a generated GoMock package.
package merkledbmock

import (
	context "context"
	reflect "reflect"

	database "github.com/ava-labs/avalanchego/database"
	ids "github.com/ava-labs/avalanchego/ids"
	maybe "github.com/ava-labs/avalanchego/utils/maybe"
	merkledb "github.com/ava-labs/avalanchego/x/merkledb"
	gomock "go.uber.org/mock/gomock"
)

// MerkleDB is a mock of MerkleDB interface.
type MerkleDB struct {
	ctrl     *gomock.Controller
	recorder *MerkleDBMockRecorder
}

// MerkleDBMockRecorder is the mock recorder for MerkleDB.
type MerkleDBMockRecorder struct {
	mock *MerkleDB
}

// NewMerkleDB creates a new mock instance.
func NewMerkleDB(ctrl *gomock.Controller) *MerkleDB {
	mock := &MerkleDB{ctrl: ctrl}
	mock.recorder = &MerkleDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MerkleDB) EXPECT() *MerkleDBMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MerkleDB) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MerkleDBMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MerkleDB)(nil).Clear))
}

// Close mocks base method.
func (m *MerkleDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MerkleDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MerkleDB)(nil).Close))
}

// CommitChangeProof mocks base method.
func (m *MerkleDB) CommitChangeProof(ctx context.Context, proof *merkledb.ChangeProof) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitChangeProof", ctx, proof)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitChangeProof indicates an expected call of CommitChangeProof.
func (mr *MerkleDBMockRecorder) CommitChangeProof(ctx, proof any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitChangeProof", reflect.TypeOf((*MerkleDB)(nil).CommitChangeProof), ctx, proof)
}

// CommitRangeProof mocks base method.
func (m *MerkleDB) CommitRangeProof(ctx context.Context, start, end maybe.Maybe[[]byte], proof *merkledb.RangeProof) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitRangeProof", ctx, start, end, proof)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitRangeProof indicates an expected call of CommitRangeProof.
func (mr *MerkleDBMockRecorder) CommitRangeProof(ctx, start, end, proof any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitRangeProof", reflect.TypeOf((*MerkleDB)(nil).CommitRangeProof), ctx, start, end, proof)
}

// Compact mocks base method.
func (m *MerkleDB) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MerkleDBMockRecorder) Compact(start, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MerkleDB)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MerkleDB) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MerkleDBMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MerkleDB)(nil).Delete), key)
}

// Get mocks base method.
func (m *MerkleDB) Get(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MerkleDBMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MerkleDB)(nil).Get), key)
}

// GetChangeProof mocks base method.
func (m *MerkleDB) GetChangeProof(ctx context.Context, startRootID, endRootID ids.ID, start, end maybe.Maybe[[]byte], maxLength int) (*merkledb.ChangeProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeProof", ctx, startRootID, endRootID, start, end, maxLength)
	ret0, _ := ret[0].(*merkledb.ChangeProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeProof indicates an expected call of GetChangeProof.
func (mr *MerkleDBMockRecorder) GetChangeProof(ctx, startRootID, endRootID, start, end, maxLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeProof", reflect.TypeOf((*MerkleDB)(nil).GetChangeProof), ctx, startRootID, endRootID, start, end, maxLength)
}

// GetMerkleRoot mocks base method.
func (m *MerkleDB) GetMerkleRoot(ctx context.Context) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerkleRoot", ctx)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerkleRoot indicates an expected call of GetMerkleRoot.
func (mr *MerkleDBMockRecorder) GetMerkleRoot(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerkleRoot", reflect.TypeOf((*MerkleDB)(nil).GetMerkleRoot), ctx)
}

// GetProof mocks base method.
func (m *MerkleDB) GetProof(ctx context.Context, keyBytes []byte) (*merkledb.Proof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProof", ctx, keyBytes)
	ret0, _ := ret[0].(*merkledb.Proof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProof indicates an expected call of GetProof.
func (mr *MerkleDBMockRecorder) GetProof(ctx, keyBytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProof", reflect.TypeOf((*MerkleDB)(nil).GetProof), ctx, keyBytes)
}

// GetRangeProof mocks base method.
func (m *MerkleDB) GetRangeProof(ctx context.Context, start, end maybe.Maybe[[]byte], maxLength int) (*merkledb.RangeProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeProof", ctx, start, end, maxLength)
	ret0, _ := ret[0].(*merkledb.RangeProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeProof indicates an expected call of GetRangeProof.
func (mr *MerkleDBMockRecorder) GetRangeProof(ctx, start, end, maxLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeProof", reflect.TypeOf((*MerkleDB)(nil).GetRangeProof), ctx, start, end, maxLength)
}

// GetRangeProofAtRoot mocks base method.
func (m *MerkleDB) GetRangeProofAtRoot(ctx context.Context, rootID ids.ID, start, end maybe.Maybe[[]byte], maxLength int) (*merkledb.RangeProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeProofAtRoot", ctx, rootID, start, end, maxLength)
	ret0, _ := ret[0].(*merkledb.RangeProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeProofAtRoot indicates an expected call of GetRangeProofAtRoot.
func (mr *MerkleDBMockRecorder) GetRangeProofAtRoot(ctx, rootID, start, end, maxLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeProofAtRoot", reflect.TypeOf((*MerkleDB)(nil).GetRangeProofAtRoot), ctx, rootID, start, end, maxLength)
}

// GetValue mocks base method.
func (m *MerkleDB) GetValue(ctx context.Context, key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MerkleDBMockRecorder) GetValue(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MerkleDB)(nil).GetValue), ctx, key)
}

// GetValues mocks base method.
func (m *MerkleDB) GetValues(ctx context.Context, keys [][]byte) ([][]byte, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", ctx, keys)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MerkleDBMockRecorder) GetValues(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MerkleDB)(nil).GetValues), ctx, keys)
}

// Has mocks base method.
func (m *MerkleDB) Has(key []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MerkleDBMockRecorder) Has(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MerkleDB)(nil).Has), key)
}

// HealthCheck mocks base method.
func (m *MerkleDB) HealthCheck(arg0 context.Context) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MerkleDBMockRecorder) HealthCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MerkleDB)(nil).HealthCheck), arg0)
}

// NewBatch mocks base method.
func (m *MerkleDB) NewBatch() database.Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(database.Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MerkleDBMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MerkleDB)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MerkleDB) NewIterator() database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator")
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MerkleDBMockRecorder) NewIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MerkleDB)(nil).NewIterator))
}

// NewIteratorWithPrefix mocks base method.
func (m *MerkleDB) NewIteratorWithPrefix(prefix []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithPrefix", prefix)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithPrefix indicates an expected call of NewIteratorWithPrefix.
func (mr *MerkleDBMockRecorder) NewIteratorWithPrefix(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithPrefix", reflect.TypeOf((*MerkleDB)(nil).NewIteratorWithPrefix), prefix)
}

// NewIteratorWithStart mocks base method.
func (m *MerkleDB) NewIteratorWithStart(start []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithStart", start)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithStart indicates an expected call of NewIteratorWithStart.
func (mr *MerkleDBMockRecorder) NewIteratorWithStart(start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithStart", reflect.TypeOf((*MerkleDB)(nil).NewIteratorWithStart), start)
}

// NewIteratorWithStartAndPrefix mocks base method.
func (m *MerkleDB) NewIteratorWithStartAndPrefix(start, prefix []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithStartAndPrefix", start, prefix)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithStartAndPrefix indicates an expected call of NewIteratorWithStartAndPrefix.
func (mr *MerkleDBMockRecorder) NewIteratorWithStartAndPrefix(start, prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithStartAndPrefix", reflect.TypeOf((*MerkleDB)(nil).NewIteratorWithStartAndPrefix), start, prefix)
}

// NewView mocks base method.
func (m *MerkleDB) NewView(ctx context.Context, changes merkledb.ViewChanges) (merkledb.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewView", ctx, changes)
	ret0, _ := ret[0].(merkledb.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewView indicates an expected call of NewView.
func (mr *MerkleDBMockRecorder) NewView(ctx, changes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewView", reflect.TypeOf((*MerkleDB)(nil).NewView), ctx, changes)
}

// PrefetchPath mocks base method.
func (m *MerkleDB) PrefetchPath(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrefetchPath", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrefetchPath indicates an expected call of PrefetchPath.
func (mr *MerkleDBMockRecorder) PrefetchPath(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrefetchPath", reflect.TypeOf((*MerkleDB)(nil).PrefetchPath), key)
}

// PrefetchPaths mocks base method.
func (m *MerkleDB) PrefetchPaths(keys [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrefetchPaths", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrefetchPaths indicates an expected call of PrefetchPaths.
func (mr *MerkleDBMockRecorder) PrefetchPaths(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrefetchPaths", reflect.TypeOf((*MerkleDB)(nil).PrefetchPaths), keys)
}

// Put mocks base method.
func (m *MerkleDB) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MerkleDBMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MerkleDB)(nil).Put), key, value)
}

// VerifyChangeProof mocks base method.
func (m *MerkleDB) VerifyChangeProof(ctx context.Context, proof *merkledb.ChangeProof, start, end maybe.Maybe[[]byte], expectedEndRootID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyChangeProof", ctx, proof, start, end, expectedEndRootID)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyChangeProof indicates an expected call of VerifyChangeProof.
func (mr *MerkleDBMockRecorder) VerifyChangeProof(ctx, proof, start, end, expectedEndRootID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyChangeProof", reflect.TypeOf((*MerkleDB)(nil).VerifyChangeProof), ctx, proof, start, end, expectedEndRootID)
}

// getEditableNode mocks base method.
func (m *MerkleDB) getEditableNode(key merkledb.Key, hasValue bool) (*node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getEditableNode", key, hasValue)
	ret0, _ := ret[0].(*node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getEditableNode indicates an expected call of getEditableNode.
func (mr *MerkleDBMockRecorder) getEditableNode(key, hasValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getEditableNode", reflect.TypeOf((*MerkleDB)(nil).getEditableNode), key, hasValue)
}

// getNode mocks base method.
func (m *MerkleDB) getNode(key merkledb.Key, hasValue bool) (*node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getNode", key, hasValue)
	ret0, _ := ret[0].(*node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getNode indicates an expected call of getNode.
func (mr *MerkleDBMockRecorder) getNode(key, hasValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getNode", reflect.TypeOf((*MerkleDB)(nil).getNode), key, hasValue)
}

// getRoot mocks base method.
func (m *MerkleDB) getRoot() maybe.Maybe[*node] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRoot")
	ret0, _ := ret[0].(maybe.Maybe[*node])
	return ret0
}

// getRoot indicates an expected call of getRoot.
func (mr *MerkleDBMockRecorder) getRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRoot", reflect.TypeOf((*MerkleDB)(nil).getRoot))
}

// getTokenSize mocks base method.
func (m *MerkleDB) getTokenSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTokenSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// getTokenSize indicates an expected call of getTokenSize.
func (mr *MerkleDBMockRecorder) getTokenSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTokenSize", reflect.TypeOf((*MerkleDB)(nil).getTokenSize))
}

// getValue mocks base method.
func (m *MerkleDB) getValue(key merkledb.Key) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getValue", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getValue indicates an expected call of getValue.
func (mr *MerkleDBMockRecorder) getValue(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getValue", reflect.TypeOf((*MerkleDB)(nil).getValue), key)
}
