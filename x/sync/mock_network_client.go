// Code generated by MockGen. DO NOT EDIT.
// Source: x/sync/network_client.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	version "github.com/ava-labs/avalanchego/version"
	gomock "github.com/golang/mock/gomock"
)

// MocknetworkClient is a mock of networkClient interface.
type MocknetworkClient struct {
	ctrl     *gomock.Controller
	recorder *MocknetworkClientMockRecorder
}

// MocknetworkClientMockRecorder is the mock recorder for MocknetworkClient.
type MocknetworkClientMockRecorder struct {
	mock *MocknetworkClient
}

// NewMocknetworkClient creates a new mock instance.
func NewMocknetworkClient(ctrl *gomock.Controller) *MocknetworkClient {
	mock := &MocknetworkClient{ctrl: ctrl}
	mock.recorder = &MocknetworkClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknetworkClient) EXPECT() *MocknetworkClientMockRecorder {
	return m.recorder
}

// appRequestFailed mocks base method.
func (m *MocknetworkClient) appRequestFailed(arg0 context.Context, arg1 ids.NodeID, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "appRequestFailed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// appRequestFailed indicates an expected call of appRequestFailed.
func (mr *MocknetworkClientMockRecorder) appRequestFailed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "appRequestFailed", reflect.TypeOf((*MocknetworkClient)(nil).appRequestFailed), arg0, arg1, arg2)
}

// appResponse mocks base method.
func (m *MocknetworkClient) appResponse(arg0 context.Context, arg1 ids.NodeID, arg2 uint32, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "appResponse", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// appResponse indicates an expected call of appResponse.
func (mr *MocknetworkClientMockRecorder) appResponse(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "appResponse", reflect.TypeOf((*MocknetworkClient)(nil).appResponse), arg0, arg1, arg2, arg3)
}

// connected mocks base method.
func (m *MocknetworkClient) connected(arg0 context.Context, arg1 ids.NodeID, arg2 *version.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "connected", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// connected indicates an expected call of connected.
func (mr *MocknetworkClientMockRecorder) connected(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "connected", reflect.TypeOf((*MocknetworkClient)(nil).connected), arg0, arg1, arg2)
}

// disconnected mocks base method.
func (m *MocknetworkClient) disconnected(arg0 context.Context, arg1 ids.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disconnected", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// disconnected indicates an expected call of disconnected.
func (mr *MocknetworkClientMockRecorder) disconnected(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disconnected", reflect.TypeOf((*MocknetworkClient)(nil).disconnected), arg0, arg1)
}

// request mocks base method.
func (m *MocknetworkClient) request(ctx context.Context, nodeID ids.NodeID, request []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "request", ctx, nodeID, request)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// request indicates an expected call of request.
func (mr *MocknetworkClientMockRecorder) request(ctx, nodeID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "request", reflect.TypeOf((*MocknetworkClient)(nil).request), ctx, nodeID, request)
}

// requestAny mocks base method.
func (m *MocknetworkClient) requestAny(ctx context.Context, minVersion *version.Application, request []byte) (ids.NodeID, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "requestAny", ctx, minVersion, request)
	ret0, _ := ret[0].(ids.NodeID)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// requestAny indicates an expected call of requestAny.
func (mr *MocknetworkClientMockRecorder) requestAny(ctx, minVersion, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "requestAny", reflect.TypeOf((*MocknetworkClient)(nil).requestAny), ctx, minVersion, request)
}

// trackBandwidth mocks base method.
func (m *MocknetworkClient) trackBandwidth(nodeID ids.NodeID, bandwidth float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "trackBandwidth", nodeID, bandwidth)
}

// trackBandwidth indicates an expected call of trackBandwidth.
func (mr *MocknetworkClientMockRecorder) trackBandwidth(nodeID, bandwidth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "trackBandwidth", reflect.TypeOf((*MocknetworkClient)(nil).trackBandwidth), nodeID, bandwidth)
}
