// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/x/sync (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package=syncmock -destination=x/sync/syncmock/client.go -mock_names=Client=Client github.com/ava-labs/avalanchego/x/sync Client
//

// Package syncmock is a generated GoMock package.
package syncmock

import (
	context "context"
	reflect "reflect"

	sync "github.com/ava-labs/avalanchego/proto/pb/sync"
	merkledb "github.com/ava-labs/avalanchego/x/merkledb"
	sync0 "github.com/ava-labs/avalanchego/x/sync"
	gomock "go.uber.org/mock/gomock"
)

// Client is a mock of Client interface.
type Client struct {
	ctrl     *gomock.Controller
	recorder *ClientMockRecorder
}

// ClientMockRecorder is the mock recorder for Client.
type ClientMockRecorder struct {
	mock *Client
}

// NewClient creates a new mock instance.
func NewClient(ctrl *gomock.Controller) *Client {
	mock := &Client{ctrl: ctrl}
	mock.recorder = &ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Client) EXPECT() *ClientMockRecorder {
	return m.recorder
}

// GetChangeProof mocks base method.
func (m *Client) GetChangeProof(arg0 context.Context, arg1 *sync.SyncGetChangeProofRequest, arg2 sync0.DB) (*merkledb.ChangeOrRangeProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeProof", arg0, arg1, arg2)
	ret0, _ := ret[0].(*merkledb.ChangeOrRangeProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeProof indicates an expected call of GetChangeProof.
func (mr *ClientMockRecorder) GetChangeProof(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeProof", reflect.TypeOf((*Client)(nil).GetChangeProof), arg0, arg1, arg2)
}

// GetRangeProof mocks base method.
func (m *Client) GetRangeProof(arg0 context.Context, arg1 *sync.SyncGetRangeProofRequest) (*merkledb.RangeProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeProof", arg0, arg1)
	ret0, _ := ret[0].(*merkledb.RangeProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeProof indicates an expected call of GetRangeProof.
func (mr *ClientMockRecorder) GetRangeProof(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeProof", reflect.TypeOf((*Client)(nil).GetRangeProof), arg0, arg1)
}
