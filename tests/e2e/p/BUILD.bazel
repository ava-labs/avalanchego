load("@rules_go//go:def.bzl", "go_library")

go_library(
    name = "p",
    srcs = [
        "interchain_workflow.go",
        "l1.go",
        "owner_retrieval.go",
        "staking_rewards.go",
        "validator_sets.go",
        "workflow.go",
    ],
    importpath = "github.com/ava-labs/avalanchego/tests/e2e/p",
    visibility = ["//visibility:public"],
    deps = [
        "//api/admin",
        "//api/info",
        "//config",
        "//genesis",
        "//ids",
        "//message",
        "//network/p2p",
        "//network/peer",
        "//proto/pb/p2p",
        "//proto/pb/platformvm",
        "//proto/pb/sdk",
        "//snow/networking/router",
        "//snow/validators",
        "//tests",
        "//tests/fixture/e2e",
        "//tests/fixture/tmpnet",
        "//utils",
        "//utils/buffer",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/crypto/bls/signer/localsigner",
        "//utils/crypto/secp256k1",
        "//utils/logging",
        "//utils/set",
        "//utils/units",
        "//vms/components/avax",
        "//vms/example/xsvm/genesis",
        "//vms/platformvm",
        "//vms/platformvm/api",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/txs",
        "//vms/platformvm/validators",
        "//vms/platformvm/warp",
        "//vms/platformvm/warp/message",
        "//vms/platformvm/warp/payload",
        "//vms/secp256k1fx",
        "//wallet/subnet/primary/common",
        "@com_github_mitchellh_mapstructure//:mapstructure",
        "@com_github_onsi_ginkgo_v2//:ginkgo",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_spf13_cast//:cast",
        "@com_github_stretchr_testify//require",
        "@org_golang_google_protobuf//proto",
        "@org_uber_go_zap//:zap",
    ],
)
