// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/codec (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package=codecmock -destination=codec/codecmock/manager.go -mock_names=Manager=Manager github.com/ava-labs/avalanchego/codec Manager
//

// Package codecmock is a generated GoMock package.
package codecmock

import (
	reflect "reflect"

	codec "github.com/ava-labs/avalanchego/codec"
	gomock "go.uber.org/mock/gomock"
)

// Manager is a mock of Manager interface.
type Manager struct {
	ctrl     *gomock.Controller
	recorder *ManagerMockRecorder
}

// ManagerMockRecorder is the mock recorder for Manager.
type ManagerMockRecorder struct {
	mock *Manager
}

// NewManager creates a new mock instance.
func NewManager(ctrl *gomock.Controller) *Manager {
	mock := &Manager{ctrl: ctrl}
	mock.recorder = &ManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Manager) EXPECT() *ManagerMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *Manager) Marshal(arg0 uint16, arg1 any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *ManagerMockRecorder) Marshal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*Manager)(nil).Marshal), arg0, arg1)
}

// RegisterCodec mocks base method.
func (m *Manager) RegisterCodec(arg0 uint16, arg1 codec.Codec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCodec", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterCodec indicates an expected call of RegisterCodec.
func (mr *ManagerMockRecorder) RegisterCodec(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCodec", reflect.TypeOf((*Manager)(nil).RegisterCodec), arg0, arg1)
}

// Size mocks base method.
func (m *Manager) Size(arg0 uint16, arg1 any) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *ManagerMockRecorder) Size(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*Manager)(nil).Size), arg0, arg1)
}

// Unmarshal mocks base method.
func (m *Manager) Unmarshal(arg0 []byte, arg1 any) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *ManagerMockRecorder) Unmarshal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*Manager)(nil).Unmarshal), arg0, arg1)
}
