name: Metric Correlation Analysis
description: Correlate metrics across multiple jobs/runs for performance comparison

inputs:
  queries:
    description: 'Array of query objects with query, metric_name, and optional y_axis_label'
    required: true
  dashboard_title:
    description: 'Title for the correlation dashboard'
    default: 'Metric Correlation Analysis'
  x_axis_label:
    description: 'X-axis label'
    default: 'Time'
  prometheus_url:
    description: 'Prometheus server URL'
    default: 'https://prometheus-poc.avax-dev.network'
  prometheus_username:
    required: true
  prometheus_password:
    required: true
  step_size:
    description: 'Prometheus query step size'
    default: '15s'
  timezone:
    description: 'Display timezone'
    default: 'US/Eastern'
  github_token:
    description: 'GitHub token'
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Build correlation configuration
      id: build-config
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const fs = require('fs');
          const path = require('path');

          const CURRENT_RUN_ID = context.runId.toString();
          const ACTION_PATH = process.env.GITHUB_ACTION_PATH;

          console.log('=== DEBUG INFO ===');
          console.log('Current run ID:', CURRENT_RUN_ID);

          // Get jobs from GitHub API
          console.log('Fetching jobs from GitHub API...');
          const { data: workflowJobs } = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: CURRENT_RUN_ID
          });

          // Find jobs by their display names (not job keys)
          const foundJobs = workflowJobs.jobs.filter(job =>
            job.name.includes('firewood load test') || job.name.includes('Run load test on self-hosted runners')
          );

          console.log('All jobs in workflow:');
          workflowJobs.jobs.forEach(job => {
            console.log(`- ${job.name} (${job.conclusion})`);
          });

          console.log('Found target jobs:');
          foundJobs.forEach(job => {
            console.log(`- ${job.name} (${job.conclusion}) - ${job.started_at} to ${job.completed_at}`);
          });

          if (foundJobs.length === 0) {
            throw new Error(`No target jobs found. Available jobs: ${workflowJobs.jobs.map(j => j.name).join(', ')}`);
          }

          // Parse queries input
          let queries;
          try {
            const queriesInput = `${{ inputs.queries }}`;
            queries = JSON.parse(queriesInput);
            console.log(`✓ Parsed ${queries.length} queries successfully`);
          } catch (error) {
            console.log(`Failed to parse queries, error: ${error.message}`);
            throw new Error(`Invalid queries format: ${error.message}`);
          }

          const correlationRuns = [];

          // Process each found job
          for (const job of foundJobs) {
            if (job.conclusion === 'success' && job.started_at && job.completed_at) {
              // Create a cleaner name for the correlation
              let cleanName = job.name;
              if (job.name.includes('firewood')) {
                cleanName = 'Firewood Load Test';
              } else if (job.name.includes('Run load test on self-hosted runners')) {
                cleanName = 'Standard Load Test';
              }

              correlationRuns.push({
                job_name: job.name,
                name: cleanName,
                labels: {
                  gh_run_id: CURRENT_RUN_ID,
                  gh_job_id: job.name,
                  gh_run_attempt: "1",
                  gh_repo: context.repo.owner + "/" + context.repo.repo,
                  is_ephemeral_node: "false"
                },
                start_time: new Date(job.started_at).getTime(),
                end_time: new Date(job.completed_at).getTime()
              });

              console.log(`✓ Added job: ${cleanName} (${job.started_at} to ${job.completed_at})`);
            } else {
              console.log(`⚠ Skipped job: ${job.name} (conclusion: ${job.conclusion})`);
            }
          }

          if (correlationRuns.length === 0) {
            throw new Error(`No successful jobs found for correlation`);
          }

          // Create output file path
          const outputFile = `correlation_analysis_${CURRENT_RUN_ID}.html`;
          const outputPath = path.join(ACTION_PATH, outputFile);

          // Build configuration for multi_plot.py
          const config = {
            queries: queries,
            dashboard_title: '${{ inputs.dashboard_title }}',
            x_axis_label: '${{ inputs.x_axis_label }}',
            correlation_runs: correlationRuns,
            output_file: outputPath
          };

          const configPath = path.join(ACTION_PATH, 'correlation_config.json');
          fs.writeFileSync(configPath, JSON.stringify(config, null, 2));

          console.log(`✓ Correlation config written to: ${configPath}`);
          console.log(`✓ Total jobs for correlation: ${correlationRuns.length}`);

          core.setOutput('config_path', configPath);
          core.setOutput('output_file', outputPath);
          core.setOutput('jobs_correlated', correlationRuns.map(r => r.name).join(','));
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    - name: Install Python dependencies
      shell: bash
      run: pip install -r $GITHUB_ACTION_PATH/requirements.txt
    - name: Run correlation analysis
      shell: bash
      env:
        PROMETHEUS_ID: ${{ inputs.prometheus_username }}
        PROMETHEUS_PASSWORD: ${{ inputs.prometheus_password }}
      run: |
        python $GITHUB_ACTION_PATH/multi_plot.py \
          --config ${{ steps.build-config.outputs.config_path }} \
          --prometheus-url "${{ inputs.prometheus_url }}" \
          --step-size "${{ inputs.step_size }}" \
          --timezone "${{ inputs.timezone }}" \
          --verbose
    - name: Upload correlation artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: metric-correlation-${{ github.run_id }}
        path: |
          ${{ steps.build-config.outputs.output_file }}
          ${{ steps.build-config.outputs.config_path }}
        retention-days: 14
    - name: Log correlation summary
      shell: bash
      run: |
        echo "::notice::Correlation analysis completed for jobs: ${{ steps.build-config.outputs.jobs_correlated }}"
        echo "::notice::Visualization available in artifact: metric-correlation-${{ github.run_id }}"
