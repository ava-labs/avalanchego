name: 'C-Chain Re-Execution Benchmark'
description: 'Run C-Chain re-execution benchmark'

inputs:
  task:
    description: 'Task name to execute from Taskfile.yml'
    required: true
  runner_name:
    description: 'The name of the runner to use and include in the Golang Benchmark name.'
    required: true
  aws-role:
    description: 'AWS role to assume for S3 access.'
    required: true
  aws-region:
    description: 'AWS region to use for S3 access.'
    default: 'us-east-2'
  aws-role-duration-seconds:
    description: 'The duration of the AWS role to assume for S3 access.'
    required: true
    default: '43200' # 12 hours
  prometheus-url:
    description: 'The URL of the prometheus instance.'
    required: true
    default: ''
  prometheus-push-url:
    description: 'The push URL of the prometheus instance.'
    required: true
    default: ''
  prometheus-username:
    description: 'The username for the Prometheus instance.'
    required: true
    default: ''
  prometheus-password:
    description: 'The password for the Prometheus instance.'
    required: true
    default: ''
  workspace:
    description: 'Working directory to use for the benchmark.'
    required: true
    default: ${{ github.workspace }}
  github-token:
    description: 'GitHub token provided to GitHub Action Benchmark.'
    required: true
  push-github-action-benchmark:
    description: 'Whether to push the benchmark result to GitHub.'
    required: true
  push-post-state:
    description: 'S3 destination to copy the current-state directory after completing re-execution. If empty, this will be skipped.'
    default: ''
  # The following inputs need never be provided by the caller. They
  # default to context values that the action's steps are unable to
  # access directly.
  repository-owner:
    default: ${{ github.repository_owner }}
  repository-name:
    default: ${{ github.event.repository.name }}
  workflow:
    default: ${{ github.workflow }}
  run-id:
    default: ${{ github.run_id }}
  run-number:
    default: ${{ github.run_number }}
  run-attempt:
    default: ${{ github.run_attempt }}
  job:
    default: ${{ github.job }}
  grafana-dashboard-id:
    default: 'Gl1I20mnk/c-chain'

runs:
  using: composite
  steps:
    - uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f #v31
      with:
        github_access_token: ${{ inputs.github-token }}
    - run: echo "dependencies installed"
      shell: nix develop --command bash {0}
    # Cache Go modules (architecture-independent)
    - uses: actions/cache@v4
      id: go-mod-cache
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-go-mod-
    # Cache Go build cache (architecture-specific)
    - uses: actions/cache@v4
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-${{ runner.arch }}-go-build-${{ hashFiles('go.sum') }}
        restore-keys: ${{ runner.os }}-${{ runner.arch }}-go-build-
    # Download modules only on cache miss
    - run: go mod download
      if: steps.go-mod-cache.outputs.cache-hit != 'true'
      shell: nix develop --command bash -x {0}
    - name: Notify of metrics availability
      if: inputs.prometheus-username != ''
      shell: bash
      run: |
        metrics_url=$($GITHUB_ACTION_PATH/output-metrics-url.sh)
        echo "Grafana: ${metrics_url}"
        echo "ðŸ”— [View Grafana Dashboard](${metrics_url})" >> "$GITHUB_STEP_SUMMARY"
      env:
        GRAFANA_URL: https://grafana-poc.avax-dev.network/d/${{ inputs.grafana_dashboard_id }}?orgId=1&refresh=10s&var-filter=is_ephemeral_node%7C%3D%7Cfalse&var-filter=gh_repo%7C%3D%7C${{ inputs.repository_owner }}%2F${{ inputs.repository_name }}&var-filter=gh_run_id%7C%3D%7C${{ inputs.run_id }}&var-filter=gh_run_attempt%7C%3D%7C${{ inputs.run_attempt }}
        GH_JOB_ID: ${{ inputs.job }}
    - name: Warn that collection of metrics and logs will not be performed
      if: inputs.prometheus-username == ''
      shell: bash
      run: echo "::warning::Monitoring credentials not found. Skipping collector start. Is the PR from a fork branch?"
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws-role }}
        aws-region: ${{ inputs.aws-region }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
    - name: Set task env
      shell: bash
      run: |
        TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
        EXEC_DIR="/tmp/reexecution-data-${TIMESTAMP}"
        BENCHMARK_FILE="${GITHUB_WORKSPACE}/benchmark-output.txt"
        echo "EXECUTION_DATA_DIR=${EXEC_DIR}" >> "$GITHUB_ENV"
        echo "BENCHMARK_OUTPUT_FILE=${BENCHMARK_FILE}" >> "$GITHUB_ENV"
    - name: Run C-Chain Re-execution Benchmark
      shell: nix develop --impure --command bash -x {0}
      run: ./scripts/run_task.sh ${{ inputs.task }} \
        BENCHMARK_OUTPUT_FILE="${{ env.BENCHMARK_OUTPUT_FILE }}" \
        EXECUTION_DATA_DIR="${{ env.EXECUTION_DATA_DIR }}"
      env:
        RUNNER_NAME: ${{ inputs.runner_name }}
        TMPNET_START_METRICS_COLLECTOR: ${{ inputs.prometheus-username != '' }}
        TMPNET_CHECK_METRICS_COLLECTED: ${{ inputs.prometheus-username != '' }}
        METRICS_SERVER_ENABLED: ${{ inputs.prometheus-username != '' }}
        METRICS_COLLECTOR_ENABLED: ${{ inputs.prometheus-username != '' }}
        PROMETHEUS_URL: ${{ inputs.prometheus-url }}
        PROMETHEUS_PUSH_URL: ${{ inputs.prometheus-push-url }}
        PROMETHEUS_USERNAME: ${{ inputs.prometheus-username }}
        PROMETHEUS_PASSWORD: ${{ inputs.prometheus-password }}
        GH_REPO: ${{ inputs.repository_owner }}/${{ inputs.repository_name }}
        GH_WORKFLOW: ${{ inputs.workflow }}
        GH_RUN_ID: ${{ inputs.run_id }}
        GH_RUN_NUMBER: ${{ inputs.run_number }}
        GH_RUN_ATTEMPT: ${{ inputs.run_attempt }}
        GH_JOB_ID: ${{ inputs.job }}
    - name: Compare Benchmark Results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'go'
        output-file-path: benchmark-output.txt
        summary-always: true
        github-token: ${{ inputs.github-token }}
        auto-push: ${{ inputs.push-github-action-benchmark }}
    - name: Push Post-State to S3
      if: inputs.push-post-state != ''
      shell: nix develop --impure --command bash -x {0}
      run: |
        ./scripts/run_task.sh export-dir-to-s3 \
          SRC=${{ env.EXECUTION_DATA_DIR }}/current-state/ \
          DST=${{ inputs.push-post-state }}
