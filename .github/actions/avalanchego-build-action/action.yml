name: 'AvalancheGo Build Action'
description: 'Build AvalancheGo with custom dependencies. Dual mode: BUILD (with target) creates binary, SETUP (no target) prepares environment.'

inputs:
  target:
    description: 'Binary to build (avalanchego, reexecution). If provided: BUILD mode. If empty: SETUP mode.'
    required: false
    default: ''
  args:
    description: 'Arguments for target executable (BUILD mode only)'
    required: false
    default: ''
  checkout-path:
    description: 'Directory path where AvalancheGo will be checked out'
    required: false
    default: 'avalanchego'
  avalanchego:
    description: 'AvalancheGo version (commit SHA, branch name, or tag)'
    required: false
    default: ${{ github.sha }}
  firewood:
    description: 'Firewood version (commit SHA, branch, tag, or ffi/vX.Y.Z for pre-built)'
    required: false
    default: ''
  coreth:
    description: 'Coreth version (commit SHA, branch name, or tag)'
    required: false
    default: ''
  libevm:
    description: 'LibEVM version (commit SHA, branch name, or tag)'
    required: false
    default: ''

outputs:
  binary-path:
    description: 'Absolute path to built binary (BUILD mode only)'
    value: ${{ steps.build.outputs.binary-path }}

runs:
  using: 'composite'
  steps:
    - name: Checkout AvalancheGo
      uses: actions/checkout@v4
      with:
        repository: 'ava-labs/avalanchego'
        ref: ${{ inputs.avalanchego }}
        path: ${{ inputs.checkout-path }}
    - name: Setup Go for project
      uses: ./.github/actions/setup-go-for-project  # Note: If Nix-specific functionality is needed, consumer should install Nix as a prerequisite to this action
    - name: Setup Firewood FFI
      if: inputs.firewood != ''
      id: firewood
      uses: ava-labs/firewood/.github/actions/build-action@composable-ci-action
      with:
        version: ${{ inputs.firewood }}
    - name: Checkout Coreth
      if: inputs.coreth != '' && inputs.coreth != 'master'
      uses: actions/checkout@v4
      with:
        repository: 'ava-labs/coreth'
        ref: ${{ inputs.coreth }}
        path: 'coreth'
    - name: Checkout LibEVM
      if: inputs.libevm != '' && inputs.libevm != 'main'
      uses: actions/checkout@v4
      with:
        repository: 'ava-labs/libevm'
        ref: ${{ inputs.libevm }}
        path: 'libevm'
    - name: Replace dependencies with local checkouts
      if: ${{ inputs.firewood != '' || inputs.coreth != '' || inputs.libevm != '' }}
      shell: bash
      working-directory: ./${{ inputs.checkout-path }}
      run: |
        # Replace Firewood FFI if provided
        if [ "${{ inputs.firewood }}" != "" ]; then
          echo "Replacing Firewood FFI with: ${{ steps.firewood.outputs.ffi-path }}"
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=${{ steps.firewood.outputs.ffi-path }}
        fi

        # Replace Coreth if provided and not default
        if [ "${{ inputs.coreth }}" != "" ] && [ "${{ inputs.coreth }}" != "master" ]; then
          echo "Replacing Coreth with local checkout: ../coreth"
          go mod edit -replace github.com/ava-labs/coreth=../coreth
        fi

        # Replace LibEVM if provided and not default
        if [ "${{ inputs.libevm }}" != "" ] && [ "${{ inputs.libevm }}" != "main" ]; then
          echo "Replacing LibEVM with local checkout: ../libevm"
          go mod edit -replace github.com/ava-labs/libevm=../libevm
        fi

        go mod tidy
        go mod download
    - name: Build and run target (BUILD mode)
      if: inputs.target != ''
      id: build
      shell: bash
      working-directory: ./${{ inputs.checkout-path }}
      run: |
        if [ -n "${{ inputs.args }}" ]; then
          OUTPUT=$(./scripts/build_target.sh "${{ inputs.target }}" ${{ inputs.args }})
        else
          OUTPUT=$(./scripts/build_target.sh "${{ inputs.target }}")
        fi

        # Extract binary path from script output
        BINARY_PATH=$(echo "$OUTPUT" | grep "BINARY_PATH=" | cut -d'=' -f2)

        # Convert to absolute path to avoid relative pathing issues
        ABSOLUTE_BINARY_PATH=$(realpath "$BINARY_PATH")

        # Set output for consumer use
        echo "binary-path=$ABSOLUTE_BINARY_PATH" >> $GITHUB_OUTPUT
    - name: Upload binary artifact (BUILD mode)
      if: inputs.target != ''
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.target }}-avalanchego_${{ inputs.avalanchego }}-coreth_${{ inputs.coreth }}-libevm_${{ inputs.libevm }}${{ inputs.firewood != '' && format('-firewood_{0}', inputs.firewood) || '' }}
        path: ${{ steps.build.outputs.binary-path }}
