name: C-Chain Re-Execution Benchmark w/ Container

on:
  pull_request:
  workflow_dispatch:
    inputs:
      runner:
        description: 'Runner to execute the benchmark. Input to the runs-on field of the job.'
        required: false
        default: ubuntu-latest
      task:
        description: 'Taskfile task to execute (e.g., c-chain-reexecution-hashdb-101-250k)'
        required: true
      push-post-state:
        description: 'S3 location to push post-execution state directory. Skips this step if left unpopulated.'
        default: ''
      timeout-minutes:
        description: 'Timeout in minutes for the job.'
        required: false
        default: 30

  # Disabled because scheduled trigger is empty. To enable, uncomment and add at least one vector to the schedule
  # entry in the corresponding JSON file.
  schedule:
    - cron: '0 9 * * *' # Runs every day at 09:00 UTC (04:00 EST)

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.define-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Define Matrix
        id: define-matrix
        shell: bash -x {0}
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            {
              echo "matrix<<EOF"
              printf '{ "include": [{ "task": "%s", "runner": "%s", "timeout-minutes": %s }] }\n' \
                "${{ github.event.inputs.task }}" \
                "${{ github.event.inputs.runner }}" \
                "${{ github.event.inputs.timeout-minutes }}"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          else
            json_string=$(jq -r ".\"${{ github.event_name }}\"" .github/workflows/c-chain-reexecution-benchmark-container.json)
            {
              echo "matrix<<EOF"
              echo "$json_string"
              echo EOF
            } >> "$GITHUB_OUTPUT"
          fi

  c-chain-reexecution:
    needs: define-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}
    timeout-minutes: ${{ matrix.timeout-minutes }}
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'ava-labs/avalanchego' }}
    permissions:
      id-token: write
      contents: write
    runs-on: ${{ matrix.runner }}
    container:
      image: ghcr.io/actions/actions-runner:2.325.0
    steps:
      - uses: actions/checkout@v4
      - name: Install ARC Dependencies
        shell: bash
        run: |
          # xz-utils might be present on some containers. Install if not present.
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - name: Run C-Chain Re-Execution Benchmark
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          task: ${{ matrix.task }}
          runner_name: ${{ matrix.runner }}
          aws-role: ${{ github.event.inputs.push-post-state != '' && secrets.AWS_S3_RW_ROLE || secrets.AWS_S3_READ_ONLY_ROLE }}
          aws-region: 'us-east-2'
          prometheus-url: ${{ secrets.PROMETHEUS_URL || '' }}
          prometheus-push-url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
          prometheus-username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
          prometheus-password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-github-action-benchmark: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.repository == 'ava-labs/avalanchego' && github.ref_name == 'master') }}
          push-post-state: ${{ github.event.inputs.push-post-state || '' }}
