name: Tests
'on':
  push:
    tags:
      - '*'
    branches:
      - master
      - dev
  pull_request: null
  merge_group:
    types:
      - checks_requested
permissions:
  contents: read
concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true
env:
  RUST_VERSION: '1.88'
  FIREWOOD_BASELINE_VERSION: ffi/v0.0.8
  AVALANCHEGO_BASELINE_VERSION: 92d0e99bce8fc3f7af1fa7d300e4fe1e7d210e6b
  FIREWOOD_CANDIDATE_VERSION: e135deeebfd46da0cf976ccfcb4fc3a303c5b71b
  AVALANCHEGO_CANDIDATE_VERSION: master
  START_BLOCK: '101'
  END_BLOCK: '200'
jobs:
  Baseline-benchmark:
    runs-on: avalanche-avalanchego-runner
    container:
      image: 'ghcr.io/actions/actions-runner:2.325.0'
    permissions:
      id-token: write
      contents: write
    name: 'Baseline: ${{ env.FIREWOOD_BASELINE_VERSION }}'
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - uses: actions/checkout@v4
        with:
          ref: '${{ env.AVALANCHEGO_BASELINE_VERSION }}'
      - uses: ./.github/actions/setup-go-for-project
      - uses: ./.github/actions/install-nix
      - name: Setup Rust for source build
        if: >-
          ${{ !startsWith(env.FIREWOOD_BASELINE_VERSION, 'v') &&
          !startsWith(env.FIREWOOD_BASELINE_VERSION, 'ffi/') }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '${{ env.RUST_VERSION }}'
      - name: Setup Rust cache for source build
        if: >-
          ${{ !startsWith(env.FIREWOOD_BASELINE_VERSION, 'v') &&
          !startsWith(env.FIREWOOD_BASELINE_VERSION, 'ffi/') }}
        uses: Swatinem/rust-cache@v2
      - name: Setup Firewood Baseline
        shell: bash
        run: |
          FIREWOOD_VERSION="${{ env.FIREWOOD_BASELINE_VERSION }}"

          if [[ "$FIREWOOD_VERSION" =~ ^(v|ffi/) ]]; then
            echo "Detected tag: $FIREWOOD_VERSION - using pre-built binaries"
            # For tags, fetch pre-built binaries from firewood-go-ethhash repo
            TEMP_DIR=$(mktemp -d)
            trap "rm -rf $TEMP_DIR" EXIT

            cd "$TEMP_DIR"
            git clone https://github.com/ava-labs/firewood-go-ethhash.git
            cd firewood-go-ethhash
            git checkout "$FIREWOOD_VERSION"

            cd "$GITHUB_WORKSPACE"
            rm -rf ./ffi
            cp -r "$TEMP_DIR/firewood-go-ethhash/ffi" ./ffi
          else
            echo "Detected commit: $FIREWOOD_VERSION - building from source"
            ./scripts/build_firewood.sh "$FIREWOOD_VERSION" ./ffi
          fi

          # Configure go.mod to use local FFI
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./ffi
          go mod download
      - name: Run Baseline Benchmark
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          config: firewood
          start-block: '${{ env.START_BLOCK }}'
          end-block: '${{ env.END_BLOCK }}'
          prometheus-username: '${{ secrets.PROMETHEUS_ID || '''' }}'
          prometheus-password: '${{ secrets.PROMETHEUS_PASSWORD || '''' }}'
          push-github-action-benchmark: false
          aws-role: '${{ secrets.AWS_S3_READ_ONLY_ROLE }}'
          aws-region: us-east-2
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          push-post-state: ''
          runner_name: 'baseline-${{ env.FIREWOOD_BASELINE_VERSION }}'
      - name: Upload baseline results
        uses: actions/upload-artifact@v4
        with:
          name: baseline-benchmark-results
          path: |
            output.txt
            benchmark-results/
          retention-days: 1
  Candidate-benchmark:
    runs-on: avalanche-avalanchego-runner
    container:
      image: 'ghcr.io/actions/actions-runner:2.325.0'
    permissions:
      id-token: write
      contents: write
    name: 'Candidate: ${{ env.FIREWOOD_CANDIDATE_VERSION }}'
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - uses: actions/checkout@v4
        with:
          ref: '${{ env.AVALANCHEGO_CANDIDATE_VERSION }}'
      - uses: ./.github/actions/setup-go-for-project
      - uses: ./.github/actions/install-nix
      - name: Setup Rust for source build
        if: >-
          ${{ !startsWith(env.FIREWOOD_CANDIDATE_VERSION, 'v') &&
          !startsWith(env.FIREWOOD_CANDIDATE_VERSION, 'ffi/') }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: '${{ env.RUST_VERSION }}'
      - name: Setup Rust cache for source build
        if: >-
          ${{ !startsWith(env.FIREWOOD_CANDIDATE_VERSION, 'v') &&
          !startsWith(env.FIREWOOD_CANDIDATE_VERSION, 'ffi/') }}
        uses: Swatinem/rust-cache@v2
      - name: Setup Firewood Candidate
        shell: bash
        run: |
          FIREWOOD_VERSION="${{ env.FIREWOOD_CANDIDATE_VERSION }}"

          if [[ "$FIREWOOD_VERSION" =~ ^(v|ffi/) ]]; then
            echo "Detected tag: $FIREWOOD_VERSION - using pre-built binaries"
            # For tags, fetch pre-built binaries from firewood-go-ethhash repo
            TEMP_DIR=$(mktemp -d)
            trap "rm -rf $TEMP_DIR" EXIT

            cd "$TEMP_DIR"
            git clone https://github.com/ava-labs/firewood-go-ethhash.git
            cd firewood-go-ethhash
            git checkout "$FIREWOOD_VERSION"

            cd "$GITHUB_WORKSPACE"
            rm -rf ./ffi
            cp -r "$TEMP_DIR/firewood-go-ethhash/ffi" ./ffi
          else
            echo "Detected commit: $FIREWOOD_VERSION - building from source"
            ./scripts/build_firewood.sh "$FIREWOOD_VERSION" ./ffi
          fi

          # Configure go.mod to use local FFI
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./ffi
          go mod download
      - name: Run Candidate Benchmark
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          config: firewood
          start-block: '${{ env.START_BLOCK }}'
          end-block: '${{ env.END_BLOCK }}'
          prometheus-username: '${{ secrets.PROMETHEUS_ID || '''' }}'
          prometheus-password: '${{ secrets.PROMETHEUS_PASSWORD || '''' }}'
          push-github-action-benchmark: false
          aws-role: '${{ secrets.AWS_S3_READ_ONLY_ROLE }}'
          aws-region: us-east-2
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          push-post-state: ''
          runner_name: 'candidate-${{ env.FIREWOOD_CANDIDATE_VERSION }}'
      - name: Upload candidate results
        uses: actions/upload-artifact@v4
        with:
          name: candidate-benchmark-results
          path: |
            output.txt
            benchmark-results/
          retention-days: 1
  compare-results:
    needs: [Baseline-benchmark, Candidate-benchmark]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download baseline results
        uses: actions/download-artifact@v4
        with:
          name: baseline-benchmark-results
          path: ./baseline-results
        continue-on-error: true
      - name: Download candidate results
        uses: actions/download-artifact@v4
        with:
          name: candidate-benchmark-results
          path: ./candidate-results
        continue-on-error: true
      - name: Compare Results
        shell: bash
        run: >
          echo "# Firewood Performance Comparison (Test)" >>
          $GITHUB_STEP_SUMMARY

          echo "**Baseline:** ${{ env.FIREWOOD_BASELINE_VERSION }}" >>
          $GITHUB_STEP_SUMMARY

          echo "**Candidate:** ${{ env.FIREWOOD_CANDIDATE_VERSION }}" >>
          $GITHUB_STEP_SUMMARY

          echo "**Blocks:** ${{ env.START_BLOCK }} - ${{ env.END_BLOCK }}" >>
          $GITHUB_STEP_SUMMARY


          if [ -f "./baseline-results/output.txt" ] && [ -f
          "./candidate-results/output.txt" ]; then
            BASELINE_MGAS=$(grep -o '[0-9]\+\.[0-9]\+ mgas/s' ./baseline-results/output.txt | head -1 | cut -d' ' -f1 || echo "N/A")
            CANDIDATE_MGAS=$(grep -o '[0-9]\+\.[0-9]\+ mgas/s' ./candidate-results/output.txt | head -1 | cut -d' ' -f1 || echo "N/A")

            echo "- Baseline: ${BASELINE_MGAS} mgas/s" >> $GITHUB_STEP_SUMMARY
            echo "- Candidate: ${CANDIDATE_MGAS} mgas/s" >> $GITHUB_STEP_SUMMARY

            if [ "$BASELINE_MGAS" != "N/A" ] && [ "$CANDIDATE_MGAS" != "N/A" ]; then
              CHANGE=$(echo "scale=2; ($CANDIDATE_MGAS - $BASELINE_MGAS) / $BASELINE_MGAS * 100" | bc -l)
              echo "- Change: ${CHANGE}%" >> $GITHUB_STEP_SUMMARY
            fi
          else
            [ -f "./baseline-results/output.txt" ] && echo "- Baseline: Completed" >> $GITHUB_STEP_SUMMARY || echo "- Baseline: Failed" >> $GITHUB_STEP_SUMMARY
            [ -f "./candidate-results/output.txt" ] && echo "- Candidate: Completed" >> $GITHUB_STEP_SUMMARY || echo "- Candidate: Failed" >> $GITHUB_STEP_SUMMARY
          fi
