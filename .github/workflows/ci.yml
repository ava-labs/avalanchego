name: Tests

on:
  push:
    tags:
      - "*"
    branches:
      - master
      - dev
  pull_request:
  merge_group:
    types: [checks_requested]

permissions:
  contents: read

# Cancel ongoing workflow runs if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  #  Unit:
  #    runs-on: ${{ matrix.os }}
  #    strategy:
  #      fail-fast: false
  #      matrix:
  #        os: [macos-14, ubuntu-22.04, ubuntu-24.04, custom-arm64-jammy, custom-arm64-noble]
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: test-unit
  #        shell: bash
  #        run: ./scripts/run_task.sh test-unit
  #        env:
  #          TIMEOUT: ${{ env.TIMEOUT }}
  #  Fuzz:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: test-fuzz
  #        shell: bash
  #        run: ./scripts/run_task.sh test-fuzz
  #  e2e:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Run e2e tests
  #        uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-e2e-ci
  #          artifact_prefix: e2e
  #          filter_by_owner: avalanchego-e2e
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  e2e_post_granite:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Run e2e tests
  #        uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-e2e-ci -- --activate-granite
  #          artifact_prefix: e2e-post-granite
  #          filter_by_owner: avalanchego-e2e
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  e2e_kube:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-e2e-kube-ci
  #          runtime: kube
  #          artifact_prefix: e2e-kube
  #          filter_by_owner: avalanchego-e2e
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  e2e_existing_network:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Run e2e tests with existing network
  #        uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-e2e-existing-ci
  #          artifact_prefix: e2e-existing-network
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  Upgrade:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Run e2e tests
  #        uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-upgrade
  #          artifact_prefix: upgrade
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  Lint:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/install-nix
  #      - name: Runs all lint checks
  #        shell: nix develop --command bash -x {0}
  #        run: ./scripts/run_task.sh lint-all-ci
  #  links-lint:
  #    name: Markdown Links Lint
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: umbrelladocs/action-linkspector@de84085e0f51452a470558693d7d308fbb2fa261 #v1.2.5
  #        with:
  #          fail_level: any
  #  check_generated_protobuf:
  #    name: Up-to-date protobuf
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      # Use the dev shell instead of bufbuild/buf-action to ensure the dev shell provides the expected versions
  #      - uses: ./.github/actions/install-nix
  #      - shell: nix develop --command bash -x {0}
  #        run: ./scripts/run_task.sh check-generate-protobuf
  #  check_mockgen:
  #    name: Up-to-date mocks
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - shell: bash
  #        run: ./scripts/run_task.sh check-generate-mocks
  #  check_canotogen:
  #    name: Up-to-date canoto
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - shell: bash
  #        run: ./scripts/run_task.sh check-generate-canoto
  #  check_contract_bindings:
  #    name: Up-to-date contract bindings
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/install-nix
  #      - shell: nix develop --command bash -x {0}
  #        run: task check-generate-load-contract-bindings
  #  go_mod_tidy:
  #    name: Up-to-date go.mod and go.sum
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - shell: bash
  #        run: ./scripts/run_task.sh check-go-mod-tidy
  #  test_build_image:
  #    name: Image build
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - name: Install qemu (required for cross-platform builds)
  #        run: |
  #          sudo apt update
  #          sudo apt -y install qemu-system qemu-user-static
  #      - name: Check image build
  #        shell: bash
  #        run: ./scripts/run_task.sh test-build-image
  #  test_build_antithesis_avalanchego_images:
  #    name: Build Antithesis avalanchego images
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Check image build for avalanchego test setup
  #        shell: bash
  #        run: ./scripts/run_task.sh test-build-antithesis-images-avalanchego
  #  test_build_antithesis_xsvm_images:
  #    name: Build Antithesis xsvm images
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - name: Check image build for xsvm test setup
  #        shell: bash
  #        run: ./scripts/run_task.sh test-build-antithesis-images-xsvm
  #  e2e_bootstrap_monitor:
  #    name: Run bootstrap monitor e2e tests
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/install-nix
  #      - name: Run e2e tests
  #        shell: bash
  #        run: nix develop --command ./scripts/run_task.sh test-bootstrap-monitor-e2e
  #  load:
  #    name: Run process-based load test
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-load -- --load-timeout=30s
  #          artifact_prefix: load
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  load_kube_kind:
  #    name: Run load test on kind cluster
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/run-monitored-tmpnet-cmd
  #        with:
  #          run: ./scripts/run_task.sh test-load-kube-kind -- --load-timeout=30s
  #          runtime: kube
  #          artifact_prefix: load-kube
  #          prometheus_username: ${{ secrets.PROMETHEUS_ID || '' }}
  #          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
  #          loki_username: ${{ secrets.LOKI_ID || '' }}
  #          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
  #  robustness:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: ./.github/actions/setup-go-for-project
  #      - uses: ./.github/actions/install-nix
  #        # TODO(marun) Extend testing of robustness beyond deploying a suitable test environment
  #      - name: Deploy kind with chaos mesh
  #        shell: bash
  #        run: nix develop --command ./scripts/run_task.sh test-robustness
  # Add this job to your existing Tests workflow
  # Add this job to your existing Tests workflow
  # Firewood v0.0.8 job - uses older AvalancheGo commit
  c-chain-reexecution-firewood-v0-0-8:
    runs-on: avalanche-avalanchego-runner
    container:
      image: ghcr.io/actions/actions-runner:2.325.0
    permissions:
      id-token: write
      contents: write
    name: "C-Chain Re-execution (Firewood v0.0.8)"
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - uses: actions/checkout@v4
        with:
          # Pin to a specific commit that's compatible with Firewood v0.0.8 FFI
          ref: '92d0e99bce8fc3f7af1fa7d300e4fe1e7d210e6b'
      - uses: ./.github/actions/setup-go-for-project
      - uses: ./.github/actions/install-nix
      - name: Cache Firewood v0.0.8 Build
        uses: actions/cache@v4
        id: cache-firewood-v008
        with:
          path: |
            ${{ github.workspace }}/firewood
          key: firewood-v0.0.8-${{ runner.os }}-${{ runner.arch }}
          restore-keys: |
            firewood-v0.0.8-${{ runner.os }}-
            firewood-v0.0.8-
      - name: Install build dependencies
        if: steps.cache-firewood-v008.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc
      - name: Setup Rust 1.88
        if: steps.cache-firewood-v008.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.88"
      - name: Clone and Build Firewood v0.0.8
        if: steps.cache-firewood-v008.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Building Firewood v0.0.8"
          git clone https://github.com/ava-labs/firewood.git
          cd firewood
          git checkout v0.0.8
          cargo build --profile maxperf --features ethhash,logger

          mkdir -p target/maxperf
          if [ -f "target/maxperf/libfirewood_ffi.a" ]; then
            echo "Found libfirewood_ffi.a in target/maxperf/"
          else
            find target -name "libfirewood_ffi.a" -exec cp {} target/maxperf/ \;
            if [ -f "target/maxperf/libfirewood_ffi.a" ]; then
              echo "Copied libfirewood_ffi.a to target/maxperf/"
            else
              echo "libfirewood_ffi.a not found"
              exit 1
            fi
          fi
          ls -la target/maxperf/
      - name: Configure AvalancheGo to use Firewood v0.0.8
        shell: nix develop --command bash -x {0}
        run: |
          echo "Configuring AvalancheGo to use local Firewood v0.0.8..."
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./firewood/ffi
          go mod download

          if [ -f "firewood/target/maxperf/libfirewood_ffi.a" ]; then
            echo "Firewood v0.0.8 library found"
            ls -la firewood/target/maxperf/libfirewood_ffi.a
          else
            echo "Firewood library not found"
            exit 1
          fi
      - name: Run C-Chain Re-Execution Benchmark (Firewood v0.0.8)
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          config: firewood
          start-block: 101
          end-block: 200
          prometheus-username: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus-password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          push-github-action-benchmark: false
          aws-role: ${{ secrets.AWS_S3_READ_ONLY_ROLE }}
          aws-region: us-east-2
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-post-state: ''
          runner_name: 'avalanche-avalanchego-runner-firewood-v0.0.8'
      - name: Upload benchmark results (v0.0.8)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-firewood-v0.0.8
          path: |
            output.txt
            benchmark-results/
          retention-days: 30

  # Firewood v0.0.12 job - uses current AvalancheGo commit
  c-chain-reexecution-firewood-v0-0-12:
    runs-on: avalanche-avalanchego-runner
    container:
      image: ghcr.io/actions/actions-runner:2.325.0
    permissions:
      id-token: write
      contents: write
    name: "C-Chain Re-execution (Firewood v0.0.12)"
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go-for-project
      - uses: ./.github/actions/install-nix
      - name: Cache Firewood v0.0.12 Build
        uses: actions/cache@v4
        id: cache-firewood-v012
        with:
          path: |
            ${{ github.workspace }}/firewood
          key: firewood-v0.0.12-${{ runner.os }}-${{ runner.arch }}
          restore-keys: |
            firewood-v0.0.12-${{ runner.os }}-
            firewood-v0.0.12-
      - name: Install build dependencies
        if: steps.cache-firewood-v012.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc
      - name: Setup Rust 1.88
        if: steps.cache-firewood-v012.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.88"
      - name: Clone and Build Firewood v0.0.12
        if: steps.cache-firewood-v012.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "Building Firewood v0.0.12"
          git clone https://github.com/ava-labs/firewood.git
          cd firewood
          git checkout v0.0.12
          cargo build --profile maxperf --features ethhash,logger

          mkdir -p target/maxperf
          if [ -f "target/maxperf/libfirewood_ffi.a" ]; then
            echo "Found libfirewood_ffi.a in target/maxperf/"
          else
            find target -name "libfirewood_ffi.a" -exec cp {} target/maxperf/ \;
            if [ -f "target/maxperf/libfirewood_ffi.a" ]; then
              echo "Copied libfirewood_ffi.a to target/maxperf/"
            else
              echo "libfirewood_ffi.a not found"
              exit 1
            fi
          fi
          ls -la target/maxperf/
      - name: Configure AvalancheGo to use Firewood v0.0.12
        shell: nix develop --command bash -x {0}
        run: |
          echo "Configuring AvalancheGo to use local Firewood v0.0.12..."
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./firewood/ffi
          go mod download

          if [ -f "firewood/target/maxperf/libfirewood_ffi.a" ]; then
            echo "Firewood v0.0.12 library found"
            ls -la firewood/target/maxperf/libfirewood_ffi.a
          else
            echo "Firewood library not found"
            exit 1
          fi
      - name: Run C-Chain Re-Execution Benchmark (Firewood v0.0.12)
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          config: firewood
          start-block: 101
          end-block: 200
          prometheus-username: ${{ secrets.PROMETHEUS_ID || '' }}
          prometheus-password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
          push-github-action-benchmark: false
          aws-role: ${{ secrets.AWS_S3_READ_ONLY_ROLE }}
          aws-region: us-east-2
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-post-state: ''
          runner_name: 'avalanche-avalanchego-runner-firewood-v0.0.12'
      - name: Upload benchmark results (v0.0.12)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-firewood-v0.0.12
          path: |
            output.txt
            benchmark-results/
          retention-days: 30
