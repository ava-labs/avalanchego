name: Tests

on:
  push:
    tags:
      - "*"
    branches:
      - master
      - dev
  pull_request:
  merge_group:
    types: [checks_requested]

permissions:
  contents: read

# Cancel ongoing workflow runs if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
#  Unit:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [macos-14, ubuntu-22.04, ubuntu-24.04, custom-arm64-jammy, custom-arm64-noble]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: test-unit
#        shell: bash
#        run: ./scripts/run_task.sh test-unit
#        env:
#          TIMEOUT: ${{ env.TIMEOUT }}
#  Fuzz:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: test-fuzz
#        shell: bash
#        run: ./scripts/run_task.sh test-fuzz
#  e2e:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Run e2e tests
#        uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-e2e-ci
#          artifact_prefix: e2e
#          filter_by_owner: avalanchego-e2e
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  e2e_post_granite:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Run e2e tests
#        uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-e2e-ci -- --activate-granite
#          artifact_prefix: e2e-post-granite
#          filter_by_owner: avalanchego-e2e
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  e2e_kube:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-e2e-kube-ci
#          runtime: kube
#          artifact_prefix: e2e-kube
#          filter_by_owner: avalanchego-e2e
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  e2e_existing_network:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Run e2e tests with existing network
#        uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-e2e-existing-ci
#          artifact_prefix: e2e-existing-network
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  Upgrade:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Run e2e tests
#        uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-upgrade
#          artifact_prefix: upgrade
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  Lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/install-nix
#      - name: Runs all lint checks
#        shell: nix develop --command bash -x {0}
#        run: ./scripts/run_task.sh lint-all-ci
#  links-lint:
#    name: Markdown Links Lint
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: umbrelladocs/action-linkspector@de84085e0f51452a470558693d7d308fbb2fa261 #v1.2.5
#        with:
#          fail_level: any
#  check_generated_protobuf:
#    name: Up-to-date protobuf
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      # Use the dev shell instead of bufbuild/buf-action to ensure the dev shell provides the expected versions
#      - uses: ./.github/actions/install-nix
#      - shell: nix develop --command bash -x {0}
#        run: ./scripts/run_task.sh check-generate-protobuf
#  check_mockgen:
#    name: Up-to-date mocks
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - shell: bash
#        run: ./scripts/run_task.sh check-generate-mocks
#  check_canotogen:
#    name: Up-to-date canoto
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - shell: bash
#        run: ./scripts/run_task.sh check-generate-canoto
#  check_contract_bindings:
#    name: Up-to-date contract bindings
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/install-nix
#      - shell: nix develop --command bash -x {0}
#        run: task check-generate-load-contract-bindings
#  go_mod_tidy:
#    name: Up-to-date go.mod and go.sum
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - shell: bash
#        run: ./scripts/run_task.sh check-go-mod-tidy
#  test_build_image:
#    name: Image build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install qemu (required for cross-platform builds)
#        run: |
#          sudo apt update
#          sudo apt -y install qemu-system qemu-user-static
#      - name: Check image build
#        shell: bash
#        run: ./scripts/run_task.sh test-build-image
#  test_build_antithesis_avalanchego_images:
#    name: Build Antithesis avalanchego images
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Check image build for avalanchego test setup
#        shell: bash
#        run: ./scripts/run_task.sh test-build-antithesis-images-avalanchego
#  test_build_antithesis_xsvm_images:
#    name: Build Antithesis xsvm images
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - name: Check image build for xsvm test setup
#        shell: bash
#        run: ./scripts/run_task.sh test-build-antithesis-images-xsvm
#  e2e_bootstrap_monitor:
#    name: Run bootstrap monitor e2e tests
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/install-nix
#      - name: Run e2e tests
#        shell: bash
#        run: nix develop --command ./scripts/run_task.sh test-bootstrap-monitor-e2e
#  load:
#    name: Run process-based load test
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-load -- --load-timeout=30s
#          artifact_prefix: load
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  load_kube_kind:
#    name: Run load test on kind cluster
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/run-monitored-tmpnet-cmd
#        with:
#          run: ./scripts/run_task.sh test-load-kube-kind -- --load-timeout=30s
#          runtime: kube
#          artifact_prefix: load-kube
#          prometheus_url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus_push_url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus_username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus_password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#          loki_url: ${{ secrets.LOKI_URL || '' }}
#          loki_push_url: ${{ secrets.LOKI_PUSH_URL || '' }}
#          loki_username: ${{ secrets.LOKI_USERNAME || '' }}
#          loki_password: ${{ secrets.LOKI_PASSWORD || '' }}
#  robustness:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: ./.github/actions/setup-go-for-project
#      - uses: ./.github/actions/install-nix
#        # TODO(marun) Extend testing of robustness beyond deploying a suitable test environment
#      - name: Deploy kind with chaos mesh
#        shell: bash
#        run: nix develop --command ./scripts/run_task.sh test-robustness
#  baseline-v0-0-8-benchmark:
#    runs-on: avalanche-avalanchego-runner-2ti
#    container:
#      image: ghcr.io/actions/actions-runner:2.325.0
#    permissions:
#      id-token: write
#      contents: write
#    name: "Baseline: v0.0.8"
#    steps:
#      - name: Install dependencies
#        shell: bash
#        run: |
#          if ! command -v xz &> /dev/null; then
#            sudo apt-get update
#            sudo apt-get install -y xz-utils
#          fi
#      - name: Checkout AvalancheGo
#        uses: actions/checkout@v4
#        with:
#          ref: 'b6409a4f336b32e0323a654aefdec941fc3fb3e5'
#      - name: Install nix
#        uses: ./.github/actions/install-nix
#      - name: Setup Go
#        uses: ./.github/actions/setup-go-for-project
#      - name: Setup Firewood
#        uses: ./.github/actions/setup-firewood
#        with:
#          firewood-version: '6cbcd3d4ba67a88c9991bec7ca5d4973be340295'
#          rust-version: '1.88'
#      - name: Configure AvalancheGo to work with Firewood
#        run: |
#          # Configure go.mod to use local FFI
#          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./ffi
#          go mod download
#
#          # Stash changes for benchmark without this compare-results fails
#          git add go.mod go.sum || true
#          git stash push -m "temp stash for baseline benchmark" || echo "Nothing to stash"
#      - name: Run Baseline Benchmark
#        uses: ./.github/actions/c-chain-reexecution-benchmark
#        with:
#          config: firewood
#          start-block: '101'
#          end-block: '250000'
#          push-github-action-benchmark: false
#          aws-role: ${{ secrets.AWS_S3_READ_ONLY_ROLE }}
#          aws-region: us-east-2
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          push-post-state: ''
#          runner_name: 'avalanche-avalanchego-runner'
#          prometheus-url: ${{ secrets.PROMETHEUS_URL || '' }}
#          prometheus-push-url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
#          prometheus-username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
#          prometheus-password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
#      - name: Restore go.mod changes
#        shell: nix develop --command bash -x {0}
#        run: |
#          git stash pop || echo "Nothing to restore"
#      - name: Upload baseline results
#        uses: actions/upload-artifact@v4
#        with:
#          name: baseline-benchmark-results
#          path: |
#            output.txt
#            benchmark-results/
#          retention-days: 7
  candidate-v0-0-12-benchmark:
    runs-on: avalanche-avalanchego-runner-2ti
    container:
      image: ghcr.io/actions/actions-runner:2.325.0
    permissions:
      id-token: write
      contents: write
    name: "Candidate: v0.0.12"
    env:
      # Isolate Go caches per job
      GOCACHE: /tmp/go-build-candidate-${{ github.run_id }}
      GOMODCACHE: /tmp/go-mod-candidate-${{ github.run_id }}
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          if ! command -v xz &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y xz-utils
          fi
      - name: Checkout AvalancheGo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.avalanchego-candidate-version }}
      - name: Clear existing Go caches
        shell: nix develop --command bash -x {0}
        run: |
          # Clear any existing Go caches to prevent conflicts
          rm -rf ~/.cache/go-build || true
          rm -rf ~/go/pkg/mod || true
          rm -rf /github/home/go/pkg/mod || true
          rm -rf /github/home/.cache/go-build || true
          rm -rf /go/pkg/mod || true

          # Create isolated cache directories
          mkdir -p $GOCACHE
          mkdir -p $GOMODCACHE
      - name: Install nix
        uses: ./.github/actions/install-nix
      - name: Setup Go
        uses: ./.github/actions/setup-go-for-project
      - name: Setup Firewood
        uses: ./.github/actions/setup-firewood
        with:
          firewood-version: 'ffi/v0.0.12'
          rust-version: '1.88'
      - name: Configure AvalancheGo to work with Firewood
        shell: nix develop --command bash -x {0}
        run: |
          # Configure go.mod to use local FFI
          go mod edit -replace github.com/ava-labs/firewood-go-ethhash/ffi=./ffi
          go mod download

          # Stash changes for benchmark
          git add go.mod go.sum || true
          git stash push -m "temp stash for candidate benchmark" || echo "Nothing to stash"
      - name: Run Candidate Benchmark
        uses: ./.github/actions/c-chain-reexecution-benchmark
        with:
          config: firewood
          start-block: '101'
          end-block: '250000'
          push-github-action-benchmark: false
          aws-role: ${{ secrets.AWS_S3_READ_ONLY_ROLE }}
          aws-region: us-east-2
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-post-state: ''
          runner_name: 'avalanche-avalanchego-runner-2ti-v0.0.12'
          prometheus-url: ${{ secrets.PROMETHEUS_URL || '' }}
          prometheus-push-url: ${{ secrets.PROMETHEUS_PUSH_URL || '' }}
          prometheus-username: ${{ secrets.PROMETHEUS_USERNAME || '' }}
          prometheus-password: ${{ secrets.PROMETHEUS_PASSWORD || '' }}
      - name: Restore go.mod changes
        shell: nix develop --command bash -x {0}
        run: |
          git stash pop || echo "Nothing to restore"
      - name: Upload candidate results
        uses: actions/upload-artifact@v4
        with:
          name: candidate-benchmark-results
          path: |
            output.txt
            benchmark-results/
          retention-days: 7
#  compare-results:
#    needs: [ baseline-v0-0-8-benchmark, candidate-v0-0-12-benchmark ]
#    runs-on: ubuntu-latest
#    if: always()
#    steps:
#      - name: Download baseline results
#        uses: actions/download-artifact@v4
#        with:
#          name: baseline-benchmark-results
#          path: ./baseline-results
#        continue-on-error: true
#      - name: Download candidate results
#        uses: actions/download-artifact@v4
#        with:
#          name: candidate-benchmark-results
#          path: ./candidate-results
#        continue-on-error: true
#      - name: Compare Results
#        shell: bash
#        run: |
#          # Function to extract mgas/s value from benchmark output
#          extract_mgas() {
#            local file="$1"
#            if [ -f "$file" ]; then
#              # Extract decimal number followed by " mgas/s"
#              grep -oE '[0-9]+(\.[0-9]+)? mgas/s' "$file" | head -1 | grep -oE '[0-9]+(\.[0-9]+)?' || echo ""
#            else
#              echo ""
#            fi
#          }
#
#          # Function to check if a number is valid
#          is_valid_number() {
#            [[ $1 =~ ^[0-9]+(\.[0-9]+)?$ ]] && [ -n "$1" ]
#          }
#
#          # Extract performance metrics
#          BASELINE_MGAS=$(extract_mgas "./baseline-results/output.txt")
#          CANDIDATE_MGAS=$(extract_mgas "./candidate-results/output.txt")
#
#          # Start building the summary
#          echo "# Firewood Performance Comparison" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "**Baseline:** \`${{ github.event.inputs.firewood-baseline-version }}\`" >> $GITHUB_STEP_SUMMARY
#          echo "**Candidate:** \`${{ github.event.inputs.firewood-candidate-version }}\`" >> $GITHUB_STEP_SUMMARY
#          echo "**Blocks:** ${{ github.event.inputs.start-block }} - ${{ github.event.inputs.end-block }}" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#
#          # Display results with better error handling
#          if is_valid_number "$BASELINE_MGAS"; then
#            echo "- **Baseline (\`${{ github.event.inputs.firewood-baseline-version }}\`):** ${BASELINE_MGAS} mgas/s" >> $GITHUB_STEP_SUMMARY
#            BASELINE_SUCCESS=true
#          else
#            echo "- **Baseline (\`${{ github.event.inputs.firewood-baseline-version }}\`):** Failed to parse results" >> $GITHUB_STEP_SUMMARY
#            BASELINE_SUCCESS=false
#          fi
#
#          if is_valid_number "$CANDIDATE_MGAS"; then
#            echo "- **Candidate (\`${{ github.event.inputs.firewood-candidate-version }}\`):** ${CANDIDATE_MGAS} mgas/s" >> $GITHUB_STEP_SUMMARY
#            CANDIDATE_SUCCESS=true
#          else
#            echo "- **Candidate (\`${{ github.event.inputs.firewood-candidate-version }}\`):** Failed to parse results" >> $GITHUB_STEP_SUMMARY
#            CANDIDATE_SUCCESS=false
#          fi
#
#          # Calculate percentage change if both values are valid
#          if [ "$BASELINE_SUCCESS" = true ] && [ "$CANDIDATE_SUCCESS" = true ]; then
#            CHANGE=$(awk "BEGIN {printf \"%.2f\", ($CANDIDATE_MGAS - $BASELINE_MGAS) / $BASELINE_MGAS * 100}")
#            CHANGE_ABS=$(awk "BEGIN {printf \"%.2f\", ($CHANGE < 0) ? -($CHANGE) : $CHANGE}")
#
#            # Determine performance indicator
#            if (( $(awk "BEGIN {print ($CHANGE > 5)}") )); then
#              PERF_INDICATOR="**Significant Improvement**"
#            elif (( $(awk "BEGIN {print ($CHANGE > 1)}") )); then
#              PERF_INDICATOR="**Improvement**"
#            elif (( $(awk "BEGIN {print ($CHANGE < -5)}") )); then
#              PERF_INDICATOR="**Significant Regression**"
#            elif (( $(awk "BEGIN {print ($CHANGE < -1)}") )); then
#              PERF_INDICATOR="**Regression**"
#            else
#              PERF_INDICATOR="**No significant change**"
#            fi
#
#            if (( $(awk "BEGIN {print ($CHANGE > 0)}") )); then
#              echo "- **Performance Change:** +${CHANGE}% ${PERF_INDICATOR}" >> $GITHUB_STEP_SUMMARY
#            elif (( $(awk "BEGIN {print ($CHANGE < 0)}") )); then
#              echo "- **Performance Change:** ${CHANGE}% ${PERF_INDICATOR}" >> $GITHUB_STEP_SUMMARY
#            else
#              echo "- **Performance Change:** No change ${PERF_INDICATOR}" >> $GITHUB_STEP_SUMMARY
#            fi
#
#            echo "" >> $GITHUB_STEP_SUMMARY
#            echo "## Raw Results" >> $GITHUB_STEP_SUMMARY
#            echo "### Baseline (${{ github.event.inputs.firewood-baseline-version }})" >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#            cat ./baseline-results/output.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No baseline output found" >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#
#            echo "### Candidate (${{ github.event.inputs.firewood-candidate-version }})" >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#            cat ./candidate-results/output.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No candidate output found" >> $GITHUB_STEP_SUMMARY
#            echo '```' >> $GITHUB_STEP_SUMMARY
#          else
#            echo "" >> $GITHUB_STEP_SUMMARY
#            echo "## Raw Results" >> $GITHUB_STEP_SUMMARY
#            if [ -f "./baseline-results/output.txt" ]; then
#              echo "### Baseline (${{ github.event.inputs.firewood-baseline-version }})" >> $GITHUB_STEP_SUMMARY
#              echo '```' >> $GITHUB_STEP_SUMMARY
#              cat ./baseline-results/output.txt >> $GITHUB_STEP_SUMMARY
#              echo '```' >> $GITHUB_STEP_SUMMARY
#            fi
#            if [ -f "./candidate-results/output.txt" ]; then
#              echo "### Candidate (${{ github.event.inputs.firewood-candidate-version }})" >> $GITHUB_STEP_SUMMARY
#              echo '```' >> $GITHUB_STEP_SUMMARY
#              cat ./candidate-results/output.txt >> $GITHUB_STEP_SUMMARY
#              echo '```' >> $GITHUB_STEP_SUMMARY
#            fi
#          fi
