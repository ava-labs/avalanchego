name: Tests

on:
  pull_request:
    branches: [chain4travel, dev]
  workflow_dispatch:
  merge_group:
    types: [checks_requested]

permissions:
  contents: read

# Cancel ongoing workflow runs if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  go_version: '~1.19'
  tmpnet_data_path: ~/.tmpnet/networks/1003

jobs:
  Unit:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [macos-12, ubuntu-20.04, ubuntu-22.04, windows-2022, [self-hosted, linux, ARM64, focal], [self-hosted, linux, ARM64, jammy]]
        os: [ubuntu-22.04]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
          check-latest: true
      - name: Set timeout on Windows # Windows UT run slower and need a longer timeout
        shell: bash
        if: matrix.os == 'windows-2022'
        run: echo "TIMEOUT=240s" >> $GITHUB_ENV
      - name: build_test
        shell: bash
        run: ./scripts/build_test.sh
        env:
          TIMEOUT: ${{ env.TIMEOUT }}
  Fuzz:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
          check-latest: true
      - name: fuzz_test
        shell: bash
        run: ./scripts/build_fuzz.sh 10 # Run each fuzz test 10 seconds
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
          check-latest: true
      - name: Build the caminogo binaries
        shell: bash
        run: ./scripts/build.sh -r
      - name: Run e2e tests
        shell: bash
        run: ./scripts/tests.e2e.sh ./build/caminogo ./tools/camino-network-runner/bin/camino-network-runner
  Lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
          check-latest: true
      - name: Run static analysis tests
        shell: bash
        run: TESTS='golangci_lint' scripts/lint.sh
      - name: Run shellcheck
        shell: bash
        run: scripts/shellcheck.sh
  License-Headers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22' #camino-license needs go version > 1.21 because of "slices" package
          check-latest: true
      - name: Run static analysis tests
        shell: bash
        run: TESTS='license_header' scripts/lint.sh
  buf-lint:
    name: Protobuf Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bufbuild/buf-setup-action@v1.34.0
        with:
          github_token: ${{ github.token }}
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: "proto"
  go_mod_tidy:
    name: Up-to-date go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.go_version }}
          check-latest: true
      - shell: bash
        run: go mod tidy
      - shell: bash
        run: .github/workflows/check-clean-branch.sh
  build_docker_image:
    name: Test docker image building
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build docker image
        run: scripts/build_image.sh

