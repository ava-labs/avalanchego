name: build-amd64-debian-packages

on:
  push:
    tags:
      - '*'

jobs:
  build-bionic-amd64-package:
    runs-on: ubuntu-18.04 

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
         go-version: '1.17.1' # The Go version to download (if necessary) and use.
    - run: go version

    - name: Build the avalanchego binaries 
      run: ./scripts/build.sh 

    - name: Install aws cli
      run: |
        sudo apt update
        sudo apt-get -y install awscli

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create debian package
      run: ./.github/workflows/build-deb-pkg.sh
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}
        BUCKET: ${{ secrets.BUCKET }}
        ARCH: "amd64"
        RELEASE: "bionic"

  build-focal-amd64-package:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
         go-version: '1.17.1' # The Go version to download (if necessary) and use.
    - run: go version

    - name: Build the avalanchego binaries
      run: ./scripts/build.sh

    - name: Install aws cli
      run: |
        sudo apt update
        sudo apt-get -y install awscli

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create debian package
      run: ./.github/workflows/build-deb-pkg.sh
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}
        BUCKET: ${{ secrets.BUCKET }}
        ARCH: "amd64"
        RELEASE: "focal"

  deploy-to-integration:
    needs: build-focal-amd64-package
    runs-on: [self-hosted, linux, deploy]
    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: master

    - name: Checkout devops repo
      uses: actions/checkout@v2
      with: 
        repository: ava-labs/devops
        token: ${{ secrets.AVALANCHE_PAT }}
  
    - name: Run Ansible
      run: | 
        export ANSIBLE_HOST_KEY_CHECKING=False
        if [[ ${{ secrets.DEPLOY }} == "true" ]]
        then 
          echo "The deployment is enabled.  Deploying $TAG to integration"
          ansible-playbook -i scripts/ansible/testnet/inventory/deploy-validators.yml -u avalanche scripts/ansible/testnet/update-from-s3-and-restart.yml -e release_ver=$TAG
          #ansible-playbook -i scripts/ansible/mainnet/inventory/deploy-validators.yml -u avalanche scripts/ansible/mainnet/update-from-s3-and-restart.yml -e release_ver=$TAG
          #ansible-playbook -i scripts/ansible/mainnet/inventory/deploy-api.yml -u avalanche scripts/ansible/mainnet/update-from-s3-and-restart.yml -e release_ver=$TAG
        else
          echo 'The deployment is not set to "true".  Skipping deployment.'
        fi
      env:
        TAG: ${{ steps.get_version.outputs.VERSION }}
