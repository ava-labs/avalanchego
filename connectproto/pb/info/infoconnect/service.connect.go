// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: info/service.proto

package infoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	info "github.com/ava-labs/avalanchego/connectproto/pb/info"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InfoServiceName is the fully-qualified name of the InfoService service.
	InfoServiceName = "info.InfoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InfoServiceGetNodeVersionProcedure is the fully-qualified name of the InfoService's
	// GetNodeVersion RPC.
	InfoServiceGetNodeVersionProcedure = "/info.InfoService/GetNodeVersion"
	// InfoServiceGetNodeIDProcedure is the fully-qualified name of the InfoService's GetNodeID RPC.
	InfoServiceGetNodeIDProcedure = "/info.InfoService/GetNodeID"
	// InfoServiceGetNodeIPProcedure is the fully-qualified name of the InfoService's GetNodeIP RPC.
	InfoServiceGetNodeIPProcedure = "/info.InfoService/GetNodeIP"
	// InfoServiceGetNetworkIDProcedure is the fully-qualified name of the InfoService's GetNetworkID
	// RPC.
	InfoServiceGetNetworkIDProcedure = "/info.InfoService/GetNetworkID"
	// InfoServiceGetNetworkNameProcedure is the fully-qualified name of the InfoService's
	// GetNetworkName RPC.
	InfoServiceGetNetworkNameProcedure = "/info.InfoService/GetNetworkName"
	// InfoServiceGetChainIDProcedure is the fully-qualified name of the InfoService's GetChainID RPC.
	InfoServiceGetChainIDProcedure = "/info.InfoService/GetChainID"
	// InfoServiceGetPeersProcedure is the fully-qualified name of the InfoService's GetPeers RPC.
	InfoServiceGetPeersProcedure = "/info.InfoService/GetPeers"
	// InfoServiceGetBootstrappedProcedure is the fully-qualified name of the InfoService's
	// GetBootstrapped RPC.
	InfoServiceGetBootstrappedProcedure = "/info.InfoService/GetBootstrapped"
	// InfoServiceGetUpgradesProcedure is the fully-qualified name of the InfoService's GetUpgrades RPC.
	InfoServiceGetUpgradesProcedure = "/info.InfoService/GetUpgrades"
	// InfoServiceGetUptimeProcedure is the fully-qualified name of the InfoService's GetUptime RPC.
	InfoServiceGetUptimeProcedure = "/info.InfoService/GetUptime"
	// InfoServiceGetACPsProcedure is the fully-qualified name of the InfoService's GetACPs RPC.
	InfoServiceGetACPsProcedure = "/info.InfoService/GetACPs"
	// InfoServiceGetVMsProcedure is the fully-qualified name of the InfoService's GetVMs RPC.
	InfoServiceGetVMsProcedure = "/info.InfoService/GetVMs"
)

// InfoServiceClient is a client for the info.InfoService service.
type InfoServiceClient interface {
	// Returns the version this node is running.
	GetNodeVersion(context.Context, *connect.Request[info.GetNodeVersionRequest]) (*connect.Response[info.GetNodeVersionResponse], error)
	// Returns the node id of this node.
	GetNodeID(context.Context, *connect.Request[info.GetNodeIDRequest]) (*connect.Response[info.GetNodeIDResponse], error)
	// Returns the ip address this node.
	GetNodeIP(context.Context, *connect.Request[info.GetNodeIPRequest]) (*connect.Response[info.GetNodeIPResponse], error)
	// Returns the network id this node is running.
	GetNetworkID(context.Context, *connect.Request[info.GetNetworkIDRequest]) (*connect.Response[info.GetNetworkIDResponse], error)
	// Returns the network name this node is running.
	GetNetworkName(context.Context, *connect.Request[info.GetNetworkNameRequest]) (*connect.Response[info.GetNetworkNameResponse], error)
	// Returns the chain id for an alias.
	GetChainID(context.Context, *connect.Request[info.GetChainIDRequest]) (*connect.Response[info.GetChainIDResponse], error)
	// Returns peer metadata.
	GetPeers(context.Context, *connect.Request[info.GetPeersRequest]) (*connect.Response[info.GetPeersResponse], error)
	// Returns if a chain is bootstrapped.
	GetBootstrapped(context.Context, *connect.Request[info.GetBootstrappedRequest]) (*connect.Response[info.GetBootstrappedResponse], error)
	// Returns the upgrade configuration this node is running.
	GetUpgrades(context.Context, *connect.Request[info.GetUpgradesRequest]) (*connect.Response[info.GetUpgradesResponse], error)
	// Returns the uptime of this node.
	GetUptime(context.Context, *connect.Request[info.GetUptimeRequest]) (*connect.Response[info.GetUptimeResponse], error)
	// Returns ACP network metadata.
	GetACPs(context.Context, *connect.Request[info.GetACPsRequest]) (*connect.Response[info.GetACPsResponse], error)
	// Returns VMs this node is running.
	GetVMs(context.Context, *connect.Request[info.GetVMsRequest]) (*connect.Response[info.GetVMsResponse], error)
}

// NewInfoServiceClient constructs a client for the info.InfoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInfoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	infoServiceMethods := info.File_info_service_proto.Services().ByName("InfoService").Methods()
	return &infoServiceClient{
		getNodeVersion: connect.NewClient[info.GetNodeVersionRequest, info.GetNodeVersionResponse](
			httpClient,
			baseURL+InfoServiceGetNodeVersionProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetNodeVersion")),
			connect.WithClientOptions(opts...),
		),
		getNodeID: connect.NewClient[info.GetNodeIDRequest, info.GetNodeIDResponse](
			httpClient,
			baseURL+InfoServiceGetNodeIDProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetNodeID")),
			connect.WithClientOptions(opts...),
		),
		getNodeIP: connect.NewClient[info.GetNodeIPRequest, info.GetNodeIPResponse](
			httpClient,
			baseURL+InfoServiceGetNodeIPProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetNodeIP")),
			connect.WithClientOptions(opts...),
		),
		getNetworkID: connect.NewClient[info.GetNetworkIDRequest, info.GetNetworkIDResponse](
			httpClient,
			baseURL+InfoServiceGetNetworkIDProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetNetworkID")),
			connect.WithClientOptions(opts...),
		),
		getNetworkName: connect.NewClient[info.GetNetworkNameRequest, info.GetNetworkNameResponse](
			httpClient,
			baseURL+InfoServiceGetNetworkNameProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetNetworkName")),
			connect.WithClientOptions(opts...),
		),
		getChainID: connect.NewClient[info.GetChainIDRequest, info.GetChainIDResponse](
			httpClient,
			baseURL+InfoServiceGetChainIDProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetChainID")),
			connect.WithClientOptions(opts...),
		),
		getPeers: connect.NewClient[info.GetPeersRequest, info.GetPeersResponse](
			httpClient,
			baseURL+InfoServiceGetPeersProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetPeers")),
			connect.WithClientOptions(opts...),
		),
		getBootstrapped: connect.NewClient[info.GetBootstrappedRequest, info.GetBootstrappedResponse](
			httpClient,
			baseURL+InfoServiceGetBootstrappedProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetBootstrapped")),
			connect.WithClientOptions(opts...),
		),
		getUpgrades: connect.NewClient[info.GetUpgradesRequest, info.GetUpgradesResponse](
			httpClient,
			baseURL+InfoServiceGetUpgradesProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetUpgrades")),
			connect.WithClientOptions(opts...),
		),
		getUptime: connect.NewClient[info.GetUptimeRequest, info.GetUptimeResponse](
			httpClient,
			baseURL+InfoServiceGetUptimeProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetUptime")),
			connect.WithClientOptions(opts...),
		),
		getACPs: connect.NewClient[info.GetACPsRequest, info.GetACPsResponse](
			httpClient,
			baseURL+InfoServiceGetACPsProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetACPs")),
			connect.WithClientOptions(opts...),
		),
		getVMs: connect.NewClient[info.GetVMsRequest, info.GetVMsResponse](
			httpClient,
			baseURL+InfoServiceGetVMsProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetVMs")),
			connect.WithClientOptions(opts...),
		),
	}
}

// infoServiceClient implements InfoServiceClient.
type infoServiceClient struct {
	getNodeVersion  *connect.Client[info.GetNodeVersionRequest, info.GetNodeVersionResponse]
	getNodeID       *connect.Client[info.GetNodeIDRequest, info.GetNodeIDResponse]
	getNodeIP       *connect.Client[info.GetNodeIPRequest, info.GetNodeIPResponse]
	getNetworkID    *connect.Client[info.GetNetworkIDRequest, info.GetNetworkIDResponse]
	getNetworkName  *connect.Client[info.GetNetworkNameRequest, info.GetNetworkNameResponse]
	getChainID      *connect.Client[info.GetChainIDRequest, info.GetChainIDResponse]
	getPeers        *connect.Client[info.GetPeersRequest, info.GetPeersResponse]
	getBootstrapped *connect.Client[info.GetBootstrappedRequest, info.GetBootstrappedResponse]
	getUpgrades     *connect.Client[info.GetUpgradesRequest, info.GetUpgradesResponse]
	getUptime       *connect.Client[info.GetUptimeRequest, info.GetUptimeResponse]
	getACPs         *connect.Client[info.GetACPsRequest, info.GetACPsResponse]
	getVMs          *connect.Client[info.GetVMsRequest, info.GetVMsResponse]
}

// GetNodeVersion calls info.InfoService.GetNodeVersion.
func (c *infoServiceClient) GetNodeVersion(ctx context.Context, req *connect.Request[info.GetNodeVersionRequest]) (*connect.Response[info.GetNodeVersionResponse], error) {
	return c.getNodeVersion.CallUnary(ctx, req)
}

// GetNodeID calls info.InfoService.GetNodeID.
func (c *infoServiceClient) GetNodeID(ctx context.Context, req *connect.Request[info.GetNodeIDRequest]) (*connect.Response[info.GetNodeIDResponse], error) {
	return c.getNodeID.CallUnary(ctx, req)
}

// GetNodeIP calls info.InfoService.GetNodeIP.
func (c *infoServiceClient) GetNodeIP(ctx context.Context, req *connect.Request[info.GetNodeIPRequest]) (*connect.Response[info.GetNodeIPResponse], error) {
	return c.getNodeIP.CallUnary(ctx, req)
}

// GetNetworkID calls info.InfoService.GetNetworkID.
func (c *infoServiceClient) GetNetworkID(ctx context.Context, req *connect.Request[info.GetNetworkIDRequest]) (*connect.Response[info.GetNetworkIDResponse], error) {
	return c.getNetworkID.CallUnary(ctx, req)
}

// GetNetworkName calls info.InfoService.GetNetworkName.
func (c *infoServiceClient) GetNetworkName(ctx context.Context, req *connect.Request[info.GetNetworkNameRequest]) (*connect.Response[info.GetNetworkNameResponse], error) {
	return c.getNetworkName.CallUnary(ctx, req)
}

// GetChainID calls info.InfoService.GetChainID.
func (c *infoServiceClient) GetChainID(ctx context.Context, req *connect.Request[info.GetChainIDRequest]) (*connect.Response[info.GetChainIDResponse], error) {
	return c.getChainID.CallUnary(ctx, req)
}

// GetPeers calls info.InfoService.GetPeers.
func (c *infoServiceClient) GetPeers(ctx context.Context, req *connect.Request[info.GetPeersRequest]) (*connect.Response[info.GetPeersResponse], error) {
	return c.getPeers.CallUnary(ctx, req)
}

// GetBootstrapped calls info.InfoService.GetBootstrapped.
func (c *infoServiceClient) GetBootstrapped(ctx context.Context, req *connect.Request[info.GetBootstrappedRequest]) (*connect.Response[info.GetBootstrappedResponse], error) {
	return c.getBootstrapped.CallUnary(ctx, req)
}

// GetUpgrades calls info.InfoService.GetUpgrades.
func (c *infoServiceClient) GetUpgrades(ctx context.Context, req *connect.Request[info.GetUpgradesRequest]) (*connect.Response[info.GetUpgradesResponse], error) {
	return c.getUpgrades.CallUnary(ctx, req)
}

// GetUptime calls info.InfoService.GetUptime.
func (c *infoServiceClient) GetUptime(ctx context.Context, req *connect.Request[info.GetUptimeRequest]) (*connect.Response[info.GetUptimeResponse], error) {
	return c.getUptime.CallUnary(ctx, req)
}

// GetACPs calls info.InfoService.GetACPs.
func (c *infoServiceClient) GetACPs(ctx context.Context, req *connect.Request[info.GetACPsRequest]) (*connect.Response[info.GetACPsResponse], error) {
	return c.getACPs.CallUnary(ctx, req)
}

// GetVMs calls info.InfoService.GetVMs.
func (c *infoServiceClient) GetVMs(ctx context.Context, req *connect.Request[info.GetVMsRequest]) (*connect.Response[info.GetVMsResponse], error) {
	return c.getVMs.CallUnary(ctx, req)
}

// InfoServiceHandler is an implementation of the info.InfoService service.
type InfoServiceHandler interface {
	// Returns the version this node is running.
	GetNodeVersion(context.Context, *connect.Request[info.GetNodeVersionRequest]) (*connect.Response[info.GetNodeVersionResponse], error)
	// Returns the node id of this node.
	GetNodeID(context.Context, *connect.Request[info.GetNodeIDRequest]) (*connect.Response[info.GetNodeIDResponse], error)
	// Returns the ip address this node.
	GetNodeIP(context.Context, *connect.Request[info.GetNodeIPRequest]) (*connect.Response[info.GetNodeIPResponse], error)
	// Returns the network id this node is running.
	GetNetworkID(context.Context, *connect.Request[info.GetNetworkIDRequest]) (*connect.Response[info.GetNetworkIDResponse], error)
	// Returns the network name this node is running.
	GetNetworkName(context.Context, *connect.Request[info.GetNetworkNameRequest]) (*connect.Response[info.GetNetworkNameResponse], error)
	// Returns the chain id for an alias.
	GetChainID(context.Context, *connect.Request[info.GetChainIDRequest]) (*connect.Response[info.GetChainIDResponse], error)
	// Returns peer metadata.
	GetPeers(context.Context, *connect.Request[info.GetPeersRequest]) (*connect.Response[info.GetPeersResponse], error)
	// Returns if a chain is bootstrapped.
	GetBootstrapped(context.Context, *connect.Request[info.GetBootstrappedRequest]) (*connect.Response[info.GetBootstrappedResponse], error)
	// Returns the upgrade configuration this node is running.
	GetUpgrades(context.Context, *connect.Request[info.GetUpgradesRequest]) (*connect.Response[info.GetUpgradesResponse], error)
	// Returns the uptime of this node.
	GetUptime(context.Context, *connect.Request[info.GetUptimeRequest]) (*connect.Response[info.GetUptimeResponse], error)
	// Returns ACP network metadata.
	GetACPs(context.Context, *connect.Request[info.GetACPsRequest]) (*connect.Response[info.GetACPsResponse], error)
	// Returns VMs this node is running.
	GetVMs(context.Context, *connect.Request[info.GetVMsRequest]) (*connect.Response[info.GetVMsResponse], error)
}

// NewInfoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInfoServiceHandler(svc InfoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	infoServiceMethods := info.File_info_service_proto.Services().ByName("InfoService").Methods()
	infoServiceGetNodeVersionHandler := connect.NewUnaryHandler(
		InfoServiceGetNodeVersionProcedure,
		svc.GetNodeVersion,
		connect.WithSchema(infoServiceMethods.ByName("GetNodeVersion")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetNodeIDHandler := connect.NewUnaryHandler(
		InfoServiceGetNodeIDProcedure,
		svc.GetNodeID,
		connect.WithSchema(infoServiceMethods.ByName("GetNodeID")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetNodeIPHandler := connect.NewUnaryHandler(
		InfoServiceGetNodeIPProcedure,
		svc.GetNodeIP,
		connect.WithSchema(infoServiceMethods.ByName("GetNodeIP")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetNetworkIDHandler := connect.NewUnaryHandler(
		InfoServiceGetNetworkIDProcedure,
		svc.GetNetworkID,
		connect.WithSchema(infoServiceMethods.ByName("GetNetworkID")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetNetworkNameHandler := connect.NewUnaryHandler(
		InfoServiceGetNetworkNameProcedure,
		svc.GetNetworkName,
		connect.WithSchema(infoServiceMethods.ByName("GetNetworkName")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetChainIDHandler := connect.NewUnaryHandler(
		InfoServiceGetChainIDProcedure,
		svc.GetChainID,
		connect.WithSchema(infoServiceMethods.ByName("GetChainID")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetPeersHandler := connect.NewUnaryHandler(
		InfoServiceGetPeersProcedure,
		svc.GetPeers,
		connect.WithSchema(infoServiceMethods.ByName("GetPeers")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetBootstrappedHandler := connect.NewUnaryHandler(
		InfoServiceGetBootstrappedProcedure,
		svc.GetBootstrapped,
		connect.WithSchema(infoServiceMethods.ByName("GetBootstrapped")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetUpgradesHandler := connect.NewUnaryHandler(
		InfoServiceGetUpgradesProcedure,
		svc.GetUpgrades,
		connect.WithSchema(infoServiceMethods.ByName("GetUpgrades")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetUptimeHandler := connect.NewUnaryHandler(
		InfoServiceGetUptimeProcedure,
		svc.GetUptime,
		connect.WithSchema(infoServiceMethods.ByName("GetUptime")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetACPsHandler := connect.NewUnaryHandler(
		InfoServiceGetACPsProcedure,
		svc.GetACPs,
		connect.WithSchema(infoServiceMethods.ByName("GetACPs")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetVMsHandler := connect.NewUnaryHandler(
		InfoServiceGetVMsProcedure,
		svc.GetVMs,
		connect.WithSchema(infoServiceMethods.ByName("GetVMs")),
		connect.WithHandlerOptions(opts...),
	)
	return "/info.InfoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InfoServiceGetNodeVersionProcedure:
			infoServiceGetNodeVersionHandler.ServeHTTP(w, r)
		case InfoServiceGetNodeIDProcedure:
			infoServiceGetNodeIDHandler.ServeHTTP(w, r)
		case InfoServiceGetNodeIPProcedure:
			infoServiceGetNodeIPHandler.ServeHTTP(w, r)
		case InfoServiceGetNetworkIDProcedure:
			infoServiceGetNetworkIDHandler.ServeHTTP(w, r)
		case InfoServiceGetNetworkNameProcedure:
			infoServiceGetNetworkNameHandler.ServeHTTP(w, r)
		case InfoServiceGetChainIDProcedure:
			infoServiceGetChainIDHandler.ServeHTTP(w, r)
		case InfoServiceGetPeersProcedure:
			infoServiceGetPeersHandler.ServeHTTP(w, r)
		case InfoServiceGetBootstrappedProcedure:
			infoServiceGetBootstrappedHandler.ServeHTTP(w, r)
		case InfoServiceGetUpgradesProcedure:
			infoServiceGetUpgradesHandler.ServeHTTP(w, r)
		case InfoServiceGetUptimeProcedure:
			infoServiceGetUptimeHandler.ServeHTTP(w, r)
		case InfoServiceGetACPsProcedure:
			infoServiceGetACPsHandler.ServeHTTP(w, r)
		case InfoServiceGetVMsProcedure:
			infoServiceGetVMsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInfoServiceHandler struct{}

func (UnimplementedInfoServiceHandler) GetNodeVersion(context.Context, *connect.Request[info.GetNodeVersionRequest]) (*connect.Response[info.GetNodeVersionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetNodeVersion is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetNodeID(context.Context, *connect.Request[info.GetNodeIDRequest]) (*connect.Response[info.GetNodeIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetNodeID is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetNodeIP(context.Context, *connect.Request[info.GetNodeIPRequest]) (*connect.Response[info.GetNodeIPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetNodeIP is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetNetworkID(context.Context, *connect.Request[info.GetNetworkIDRequest]) (*connect.Response[info.GetNetworkIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetNetworkID is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetNetworkName(context.Context, *connect.Request[info.GetNetworkNameRequest]) (*connect.Response[info.GetNetworkNameResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetNetworkName is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetChainID(context.Context, *connect.Request[info.GetChainIDRequest]) (*connect.Response[info.GetChainIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetChainID is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetPeers(context.Context, *connect.Request[info.GetPeersRequest]) (*connect.Response[info.GetPeersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetPeers is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetBootstrapped(context.Context, *connect.Request[info.GetBootstrappedRequest]) (*connect.Response[info.GetBootstrappedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetBootstrapped is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetUpgrades(context.Context, *connect.Request[info.GetUpgradesRequest]) (*connect.Response[info.GetUpgradesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetUpgrades is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetUptime(context.Context, *connect.Request[info.GetUptimeRequest]) (*connect.Response[info.GetUptimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetUptime is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetACPs(context.Context, *connect.Request[info.GetACPsRequest]) (*connect.Response[info.GetACPsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetACPs is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetVMs(context.Context, *connect.Request[info.GetVMsRequest]) (*connect.Response[info.GetVMsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.InfoService.GetVMs is not implemented"))
}
