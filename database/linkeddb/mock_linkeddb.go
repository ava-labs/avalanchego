// Copyright (C) 2019-2022, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/database (interfaces: Database)

// Package database is a generated GoMock package.
package linkeddb

import (
	reflect "reflect"

	database "github.com/ava-labs/avalanchego/database"
	gomock "github.com/golang/mock/gomock"
)

// MockLinkedDB is a mock of LinkedDB interface.
type MockLinkedDB struct {
	ctrl     *gomock.Controller
	recorder *MockLinkedDBMockRecorder
}

// MockLinkedDBMockRecorder is the mock recorder for MockLinkedDB.
type MockLinkedDBMockRecorder struct {
	mock *MockLinkedDB
}

// NewMockLinkedDB creates a new mock instance.
func NewMockLinkedDB(ctrl *gomock.Controller) *MockLinkedDB {
	mock := &MockLinkedDB{ctrl: ctrl}
	mock.recorder = &MockLinkedDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkedDB) EXPECT() *MockLinkedDBMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockLinkedDB) Delete(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLinkedDBMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLinkedDB)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockLinkedDB) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLinkedDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLinkedDB)(nil).Get), arg0)
}

// Has mocks base method.
func (m *MockLinkedDB) Has(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockLinkedDBMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockLinkedDB)(nil).Has), arg0)
}

// NewIterator mocks base method.
func (m *MockLinkedDB) NewIterator() database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator")
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockLinkedDBMockRecorder) NewIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockLinkedDB)(nil).NewIterator))
}

// NewIteratorWithStart mocks base method.
func (m *MockLinkedDB) NewIteratorWithStart(arg0 []byte) database.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIteratorWithStart", arg0)
	ret0, _ := ret[0].(database.Iterator)
	return ret0
}

// NewIteratorWithStart indicates an expected call of NewIteratorWithStart.
func (mr *MockLinkedDBMockRecorder) NewIteratorWithStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIteratorWithStart", reflect.TypeOf((*MockLinkedDB)(nil).NewIteratorWithStart), arg0)
}

// Put mocks base method.
func (m *MockLinkedDB) Put(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockLinkedDBMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockLinkedDB)(nil).Put), arg0, arg1)
}

// IsEmpty mocks base method.
func (m *MockLinkedDB) IsEmpty() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockLinkedDBMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockLinkedDB)(nil).IsEmpty))
}

// HeadKey mocks base method.
func (m *MockLinkedDB) HeadKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadKey indicates an expected call of HeadKey.
func (mr *MockLinkedDBMockRecorder) HeadKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadKey", reflect.TypeOf((*MockLinkedDB)(nil).HeadKey))
}

// Head mocks base method.
func (m *MockLinkedDB) Head() ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Head indicates an expected call of Head.
func (mr *MockLinkedDBMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockLinkedDB)(nil).Head))
}
