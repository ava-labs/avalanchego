// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package=vmsmock -destination=vmsmock/manager.go -mock_names=Manager=Manager . Manager
//

// Package vmsmock is a generated GoMock package.
package vmsmock

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	vms "github.com/ava-labs/avalanchego/vms"
	gomock "go.uber.org/mock/gomock"
)

// Manager is a mock of Manager interface.
type Manager struct {
	ctrl     *gomock.Controller
	recorder *ManagerMockRecorder
	isgomock struct{}
}

// ManagerMockRecorder is the mock recorder for Manager.
type ManagerMockRecorder struct {
	mock *Manager
}

// NewManager creates a new mock instance.
func NewManager(ctrl *gomock.Controller) *Manager {
	mock := &Manager{ctrl: ctrl}
	mock.recorder = &ManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Manager) EXPECT() *ManagerMockRecorder {
	return m.recorder
}

// Alias mocks base method.
func (m *Manager) Alias(id ids.ID, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alias", id, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Alias indicates an expected call of Alias.
func (mr *ManagerMockRecorder) Alias(id, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alias", reflect.TypeOf((*Manager)(nil).Alias), id, alias)
}

// Aliases mocks base method.
func (m *Manager) Aliases(id ids.ID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aliases", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aliases indicates an expected call of Aliases.
func (mr *ManagerMockRecorder) Aliases(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aliases", reflect.TypeOf((*Manager)(nil).Aliases), id)
}

// GetFactory mocks base method.
func (m *Manager) GetFactory(vmID ids.ID) (vms.Factory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFactory", vmID)
	ret0, _ := ret[0].(vms.Factory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFactory indicates an expected call of GetFactory.
func (mr *ManagerMockRecorder) GetFactory(vmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFactory", reflect.TypeOf((*Manager)(nil).GetFactory), vmID)
}

// ListFactories mocks base method.
func (m *Manager) ListFactories() ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFactories")
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFactories indicates an expected call of ListFactories.
func (mr *ManagerMockRecorder) ListFactories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFactories", reflect.TypeOf((*Manager)(nil).ListFactories))
}

// Lookup mocks base method.
func (m *Manager) Lookup(alias string) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lookup", alias)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lookup indicates an expected call of Lookup.
func (mr *ManagerMockRecorder) Lookup(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lookup", reflect.TypeOf((*Manager)(nil).Lookup), alias)
}

// PrimaryAlias mocks base method.
func (m *Manager) PrimaryAlias(id ids.ID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryAlias", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrimaryAlias indicates an expected call of PrimaryAlias.
func (mr *ManagerMockRecorder) PrimaryAlias(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryAlias", reflect.TypeOf((*Manager)(nil).PrimaryAlias), id)
}

// PrimaryAliasOrDefault mocks base method.
func (m *Manager) PrimaryAliasOrDefault(id ids.ID) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrimaryAliasOrDefault", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// PrimaryAliasOrDefault indicates an expected call of PrimaryAliasOrDefault.
func (mr *ManagerMockRecorder) PrimaryAliasOrDefault(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrimaryAliasOrDefault", reflect.TypeOf((*Manager)(nil).PrimaryAliasOrDefault), id)
}

// RegisterFactory mocks base method.
func (m *Manager) RegisterFactory(ctx context.Context, vmID ids.ID, factory vms.Factory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFactory", ctx, vmID, factory)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFactory indicates an expected call of RegisterFactory.
func (mr *ManagerMockRecorder) RegisterFactory(ctx, vmID, factory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFactory", reflect.TypeOf((*Manager)(nil).RegisterFactory), ctx, vmID, factory)
}

// RemoveAliases mocks base method.
func (m *Manager) RemoveAliases(id ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveAliases", id)
}

// RemoveAliases indicates an expected call of RemoveAliases.
func (mr *ManagerMockRecorder) RemoveAliases(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAliases", reflect.TypeOf((*Manager)(nil).RemoveAliases), id)
}

// Versions mocks base method.
func (m *Manager) Versions() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Versions")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Versions indicates an expected call of Versions.
func (mr *ManagerMockRecorder) Versions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*Manager)(nil).Versions))
}
