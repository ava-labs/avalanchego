// Copyright (C) 2019-2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package message

import (
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/ava-labs/avalanchego/codec"
	"github.com/ava-labs/avalanchego/ids"
	"github.com/ava-labs/avalanchego/utils/crypto/bls"
)

func TestParse(t *testing.T) {
	mustCreate := func(msg Payload, err error) Payload {
		require.NoError(t, err)
		return msg
	}
	tests := []struct {
		name        string
		bytes       []byte
		expected    Payload
		expectedErr error
	}{
		{
			name:        "invalid message",
			bytes:       []byte{255, 255, 255, 255},
			expectedErr: codec.ErrUnknownVersion,
		},
		{
			name: "SubnetConversion",
			bytes: []byte{
				// Codec version:
				0x00, 0x00,
				// Payload type = SubnetConversion:
				0x00, 0x00, 0x00, 0x00,
				// ID:
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
				0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
			},
			expected: mustCreate(NewSubnetConversion(
				ids.ID{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
					0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
					0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				},
			)),
		},
		{
			name: "RegisterSubnetValidator",
			bytes: []byte{
				// Codec version:
				0x00, 0x00,
				// Payload type = RegisterSubnetValidator:
				0x00, 0x00, 0x00, 0x01,
				// SubnetID:
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
				0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				// NodeID:
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
				0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
				0x31, 0x32, 0x33, 0x34,
				// Weight:
				0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,
				// BLSPublicKey:
				0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44,
				0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
				0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54,
				0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,
				0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64,
				0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
				// Expiry:
				0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,
			},
			expected: mustCreate(NewRegisterSubnetValidator(
				ids.ID{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
					0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
					0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				},
				ids.NodeID{
					0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
					0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
					0x31, 0x32, 0x33, 0x34,
				},
				0x35363738393a3b3c,
				[bls.PublicKeyLen]byte{
					0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44,
					0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
					0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54,
					0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,
					0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64,
					0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,
				},
				0x6d6e6f7071727374,
			)),
		},
		{
			name: "SubnetValidatorRegistration",
			bytes: []byte{
				// Codec version:
				0x00, 0x00,
				// Payload type = SubnetValidatorRegistration:
				0x00, 0x00, 0x00, 0x02,
				// ValidationID:
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
				0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				// Registered:
				0x00,
			},
			expected: mustCreate(NewSubnetValidatorRegistration(
				ids.ID{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
					0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
					0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				},
				false,
			)),
		},
		{
			name: "SetSubnetValidatorWeight",
			bytes: []byte{
				// Codec version:
				0x00, 0x00,
				// Payload type = SetSubnetValidatorWeight:
				0x00, 0x00, 0x00, 0x03,
				// ValidationID:
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
				0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				// Nonce:
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
				// Weight:
				0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
			},
			expected: mustCreate(NewSetSubnetValidatorWeight(
				ids.ID{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
					0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
					0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				},
				0x2122232425262728,
				0x292a2b2c2d2e2f30,
			)),
		},
		{
			name: "SubnetValidatorWeight",
			bytes: []byte{
				// Codec version:
				0x00, 0x00,
				// Payload type = SubnetValidatorWeight:
				0x00, 0x00, 0x00, 0x04,
				// ValidationID:
				0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
				0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
				0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
				0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				// Nonce:
				0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
				// Weight:
				0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
			},
			expected: mustCreate(NewSubnetValidatorWeight(
				ids.ID{
					0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
					0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
					0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
					0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
				},
				0x2122232425262728,
				0x292a2b2c2d2e2f30,
			)),
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			require := require.New(t)

			msg, err := Parse(test.bytes)
			require.ErrorIs(err, test.expectedErr)
			require.Equal(test.expected, msg)
			if msg != nil {
				require.Equal(test.bytes, msg.Bytes())
			}
		})
	}
}
