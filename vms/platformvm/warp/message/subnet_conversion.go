// Copyright (C) 2019-2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

package message

import (
	"fmt"

	"github.com/ava-labs/avalanchego/ids"
	"github.com/ava-labs/avalanchego/utils/crypto/bls"
	"github.com/ava-labs/avalanchego/utils/hashing"
	"github.com/ava-labs/avalanchego/vms/types"
)

type SubnetConversionValidatorData struct {
	NodeID       types.JSONByteSlice    `serialize:"true" json:"nodeID"`
	BLSPublicKey [bls.PublicKeyLen]byte `serialize:"true" json:"blsPublicKey"`
	Weight       uint64                 `serialize:"true" json:"weight"`
}

type SubnetConversionData struct {
	SubnetID       ids.ID                          `serialize:"true" json:"subnetID"`
	ManagerChainID ids.ID                          `serialize:"true" json:"managerChainID"`
	ManagerAddress types.JSONByteSlice             `serialize:"true" json:"managerAddress"`
	Validators     []SubnetConversionValidatorData `serialize:"true" json:"validators"`
}

// SubnetConversionID creates a subnet conversion ID from the provided subnet
// conversion data.
func SubnetConversionID(data SubnetConversionData) (ids.ID, error) {
	bytes, err := Codec.Marshal(CodecVersion, &data)
	if err != nil {
		return ids.Empty, err
	}
	return hashing.ComputeHash256Array(bytes), nil
}

// SubnetConversion reports the summary of the subnet conversation that occurred
// on the P-chain.
type SubnetConversion struct {
	payload

	// ID of the subnet conversion. It is typically generated by calling
	// SubnetConversionID.
	ID ids.ID `serialize:"true" json:"id"`
}

// NewSubnetConversion creates a new initialized SubnetConversion.
func NewSubnetConversion(id ids.ID) (*SubnetConversion, error) {
	msg := &SubnetConversion{
		ID: id,
	}
	return msg, initialize(msg)
}

// ParseSubnetConversion parses bytes into an initialized SubnetConversion.
func ParseSubnetConversion(b []byte) (*SubnetConversion, error) {
	payloadIntf, err := Parse(b)
	if err != nil {
		return nil, err
	}
	payload, ok := payloadIntf.(*SubnetConversion)
	if !ok {
		return nil, fmt.Errorf("%w: %T", ErrWrongType, payloadIntf)
	}
	return payload, nil
}
