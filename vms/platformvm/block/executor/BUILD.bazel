load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "executor",
    srcs = [
        "acceptor.go",
        "backend.go",
        "block.go",
        "block_state.go",
        "manager.go",
        "options.go",
        "rejector.go",
        "verifier.go",
        "warp_verifier.go",
    ],
    importpath = "github.com/ava-labs/avalanchego/vms/platformvm/block/executor",
    visibility = ["//visibility:public"],
    deps = [
        "//chains/atomic",
        "//ids",
        "//snow",
        "//snow/consensus/snowman",
        "//snow/engine/snowman/block",
        "//snow/uptime",
        "//snow/validators",
        "//utils",
        "//utils/constants",
        "//utils/logging",
        "//utils/math",
        "//utils/set",
        "//vms/components/gas",
        "//vms/platformvm/block",
        "//vms/platformvm/config",
        "//vms/platformvm/metrics",
        "//vms/platformvm/reward",
        "//vms/platformvm/state",
        "//vms/platformvm/status",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/executor",
        "//vms/platformvm/txs/fee",
        "//vms/platformvm/txs/mempool",
        "//vms/platformvm/validators",
        "//vms/platformvm/validators/fee",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "executor_test",
    srcs = [
        "acceptor_test.go",
        "backend_test.go",
        "block_test.go",
        "helpers_test.go",
        "manager_test.go",
        "mocks_generate_test.go",
        "options_test.go",
        "proposal_block_test.go",
        "rejector_test.go",
        "standard_block_test.go",
        "verifier_test.go",
        "warp_verifier_test.go",
    ],
    embed = [":executor"],
    deps = [
        "//chains",
        "//chains/atomic",
        "//chains/atomic/atomicmock",
        "//codec",
        "//codec/linearcodec",
        "//database",
        "//database/databasemock",
        "//database/memdb",
        "//database/prefixdb",
        "//database/versiondb",
        "//genesis",
        "//ids",
        "//snow",
        "//snow/consensus/snowman",
        "//snow/engine/enginetest",
        "//snow/snowtest",
        "//snow/uptime",
        "//snow/uptime/uptimemock",
        "//snow/validators",
        "//upgrade",
        "//upgrade/upgradetest",
        "//utils",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/crypto/bls/signer/localsigner",
        "//utils/crypto/secp256k1",
        "//utils/iterator",
        "//utils/logging",
        "//utils/set",
        "//utils/timer/mockable",
        "//utils/units",
        "//vms/components/avax",
        "//vms/components/gas",
        "//vms/components/verify",
        "//vms/platformvm/block",
        "//vms/platformvm/config",
        "//vms/platformvm/fx",
        "//vms/platformvm/genesis/genesistest",
        "//vms/platformvm/metrics",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/state",
        "//vms/platformvm/state/statetest",
        "//vms/platformvm/status",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/executor",
        "//vms/platformvm/txs/fee",
        "//vms/platformvm/txs/mempool",
        "//vms/platformvm/txs/txstest",
        "//vms/platformvm/utxo",
        "//vms/platformvm/validators/fee",
        "//vms/platformvm/validators/validatorstest",
        "//vms/secp256k1fx",
        "//wallet/chain/p/wallet",
        "//wallet/subnet/primary/common",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_mock//gomock",
    ],
)
