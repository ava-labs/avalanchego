// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/txs/staker_tx.go
//
// Generated by this command:
//
//	mockgen -source=vms/platformvm/txs/staker_tx.go -destination=vms/platformvm/txs/txsmock/staker_tx.go -package=txsmock -exclude_interfaces=ValidatorTx,DelegatorTx,StakerTx,PermissionlessStaker -mock_names=Staker=Staker,ScheduledStaker=ScheduledStaker
//

// Package txsmock is a generated GoMock package.
package txsmock

import (
	reflect "reflect"
	time "time"

	ids "github.com/ava-labs/avalanchego/ids"
	bls "github.com/ava-labs/avalanchego/utils/crypto/bls"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "go.uber.org/mock/gomock"
)

// Staker is a mock of Staker interface.
type Staker struct {
	ctrl     *gomock.Controller
	recorder *StakerMockRecorder
}

// StakerMockRecorder is the mock recorder for Staker.
type StakerMockRecorder struct {
	mock *Staker
}

// NewStaker creates a new mock instance.
func NewStaker(ctrl *gomock.Controller) *Staker {
	mock := &Staker{ctrl: ctrl}
	mock.recorder = &StakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Staker) EXPECT() *StakerMockRecorder {
	return m.recorder
}

// CurrentPriority mocks base method.
func (m *Staker) CurrentPriority() txs.Priority {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentPriority")
	ret0, _ := ret[0].(txs.Priority)
	return ret0
}

// CurrentPriority indicates an expected call of CurrentPriority.
func (mr *StakerMockRecorder) CurrentPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPriority", reflect.TypeOf((*Staker)(nil).CurrentPriority))
}

// EndTime mocks base method.
func (m *Staker) EndTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EndTime indicates an expected call of EndTime.
func (mr *StakerMockRecorder) EndTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTime", reflect.TypeOf((*Staker)(nil).EndTime))
}

// NodeID mocks base method.
func (m *Staker) NodeID() ids.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(ids.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *StakerMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*Staker)(nil).NodeID))
}

// PublicKey mocks base method.
func (m *Staker) PublicKey() (*bls.PublicKey, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*bls.PublicKey)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublicKey indicates an expected call of PublicKey.
func (mr *StakerMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*Staker)(nil).PublicKey))
}

// SubnetID mocks base method.
func (m *Staker) SubnetID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// SubnetID indicates an expected call of SubnetID.
func (mr *StakerMockRecorder) SubnetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetID", reflect.TypeOf((*Staker)(nil).SubnetID))
}

// Weight mocks base method.
func (m *Staker) Weight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *StakerMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*Staker)(nil).Weight))
}

// ScheduledStaker is a mock of ScheduledStaker interface.
type ScheduledStaker struct {
	ctrl     *gomock.Controller
	recorder *ScheduledStakerMockRecorder
}

// ScheduledStakerMockRecorder is the mock recorder for ScheduledStaker.
type ScheduledStakerMockRecorder struct {
	mock *ScheduledStaker
}

// NewScheduledStaker creates a new mock instance.
func NewScheduledStaker(ctrl *gomock.Controller) *ScheduledStaker {
	mock := &ScheduledStaker{ctrl: ctrl}
	mock.recorder = &ScheduledStakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ScheduledStaker) EXPECT() *ScheduledStakerMockRecorder {
	return m.recorder
}

// CurrentPriority mocks base method.
func (m *ScheduledStaker) CurrentPriority() txs.Priority {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentPriority")
	ret0, _ := ret[0].(txs.Priority)
	return ret0
}

// CurrentPriority indicates an expected call of CurrentPriority.
func (mr *ScheduledStakerMockRecorder) CurrentPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentPriority", reflect.TypeOf((*ScheduledStaker)(nil).CurrentPriority))
}

// EndTime mocks base method.
func (m *ScheduledStaker) EndTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// EndTime indicates an expected call of EndTime.
func (mr *ScheduledStakerMockRecorder) EndTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTime", reflect.TypeOf((*ScheduledStaker)(nil).EndTime))
}

// NodeID mocks base method.
func (m *ScheduledStaker) NodeID() ids.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(ids.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *ScheduledStakerMockRecorder) NodeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*ScheduledStaker)(nil).NodeID))
}

// PendingPriority mocks base method.
func (m *ScheduledStaker) PendingPriority() txs.Priority {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingPriority")
	ret0, _ := ret[0].(txs.Priority)
	return ret0
}

// PendingPriority indicates an expected call of PendingPriority.
func (mr *ScheduledStakerMockRecorder) PendingPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingPriority", reflect.TypeOf((*ScheduledStaker)(nil).PendingPriority))
}

// PublicKey mocks base method.
func (m *ScheduledStaker) PublicKey() (*bls.PublicKey, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*bls.PublicKey)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublicKey indicates an expected call of PublicKey.
func (mr *ScheduledStakerMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*ScheduledStaker)(nil).PublicKey))
}

// StartTime mocks base method.
func (m *ScheduledStaker) StartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// StartTime indicates an expected call of StartTime.
func (mr *ScheduledStakerMockRecorder) StartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTime", reflect.TypeOf((*ScheduledStaker)(nil).StartTime))
}

// SubnetID mocks base method.
func (m *ScheduledStaker) SubnetID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubnetID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// SubnetID indicates an expected call of SubnetID.
func (mr *ScheduledStakerMockRecorder) SubnetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubnetID", reflect.TypeOf((*ScheduledStaker)(nil).SubnetID))
}

// Weight mocks base method.
func (m *ScheduledStaker) Weight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *ScheduledStakerMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*ScheduledStaker)(nil).Weight))
}
