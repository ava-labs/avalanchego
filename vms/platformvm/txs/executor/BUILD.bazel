load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "executor",
    srcs = [
        "atomic_tx_executor.go",
        "backend.go",
        "proposal_tx_executor.go",
        "staker_tx_verification.go",
        "staker_tx_verification_helpers.go",
        "standard_tx_executor.go",
        "state_changes.go",
        "subnet_tx_verification.go",
        "warp_verifier.go",
    ],
    importpath = "github.com/ava-labs/avalanchego/vms/platformvm/txs/executor",
    visibility = ["//visibility:public"],
    deps = [
        "//chains/atomic",
        "//database",
        "//ids",
        "//snow",
        "//snow/uptime",
        "//snow/validators",
        "//utils",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/math",
        "//utils/set",
        "//utils/timer/mockable",
        "//vms/components/avax",
        "//vms/components/gas",
        "//vms/components/verify",
        "//vms/platformvm/config",
        "//vms/platformvm/fx",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/state",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/fee",
        "//vms/platformvm/utxo",
        "//vms/platformvm/validators/fee",
        "//vms/platformvm/warp",
        "//vms/platformvm/warp/message",
        "//vms/platformvm/warp/payload",
        "//vms/secp256k1fx",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "executor_test",
    srcs = [
        "advance_time_test.go",
        "create_chain_test.go",
        "export_test.go",
        "helpers_test.go",
        "import_test.go",
        "proposal_tx_executor_test.go",
        "reward_validator_test.go",
        "staker_tx_verification_test.go",
        "standard_tx_executor_test.go",
        "state_changes_test.go",
        "warp_verifier_test.go",
    ],
    embed = [":executor"],
    deps = [
        "//chains",
        "//chains/atomic",
        "//codec",
        "//codec/linearcodec",
        "//database",
        "//database/memdb",
        "//database/prefixdb",
        "//database/versiondb",
        "//genesis",
        "//ids",
        "//snow",
        "//snow/snowtest",
        "//snow/uptime",
        "//snow/validators",
        "//snow/validators/validatorstest",
        "//upgrade/upgradetest",
        "//utils",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/crypto/bls/signer/localsigner",
        "//utils/crypto/secp256k1",
        "//utils/hashing",
        "//utils/iterator",
        "//utils/logging",
        "//utils/math",
        "//utils/set",
        "//utils/timer/mockable",
        "//utils/units",
        "//vms/components/avax",
        "//vms/components/gas",
        "//vms/components/verify",
        "//vms/platformvm/config",
        "//vms/platformvm/fx",
        "//vms/platformvm/fx/fxmock",
        "//vms/platformvm/genesis/genesistest",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/state",
        "//vms/platformvm/state/statetest",
        "//vms/platformvm/status",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/fee",
        "//vms/platformvm/txs/txstest",
        "//vms/platformvm/utxo",
        "//vms/platformvm/utxo/utxomock",
        "//vms/platformvm/validators/fee",
        "//vms/platformvm/warp",
        "//vms/platformvm/warp/message",
        "//vms/platformvm/warp/payload",
        "//vms/secp256k1fx",
        "//wallet/chain/p/builder",
        "//wallet/chain/p/wallet",
        "//wallet/subnet/primary/common",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_mock//gomock",
    ],
)
