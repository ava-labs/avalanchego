// Copyright (C) 2019-2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/platformvm/txs/mempool (interfaces: TxIterator)

// Package mempool is a generated GoMock package.
package mempool

import (
	reflect "reflect"

	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "go.uber.org/mock/gomock"
)

// MockTxIterator is a mock of TxIterator interface.
type MockTxIterator struct {
	ctrl     *gomock.Controller
	recorder *MockTxIteratorMockRecorder
}

// MockTxIteratorMockRecorder is the mock recorder for MockTxIterator.
type MockTxIteratorMockRecorder struct {
	mock *MockTxIterator
}

// NewMockTxIterator creates a new mock instance.
func NewMockTxIterator(ctrl *gomock.Controller) *MockTxIterator {
	mock := &MockTxIterator{ctrl: ctrl}
	mock.recorder = &MockTxIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxIterator) EXPECT() *MockTxIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockTxIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockTxIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockTxIterator)(nil).Next))
}

// Value mocks base method.
func (m *MockTxIterator) Value() *txs.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*txs.Tx)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockTxIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockTxIterator)(nil).Value))
}
