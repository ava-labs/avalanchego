// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/signer/signer.go
//
// Generated by this command:
//
//	mockgen -source=vms/platformvm/signer/signer.go -destination=vms/platformvm/signer/mock_signer.go -package=signer -exclude_interfaces=
//

// Package signer is a generated GoMock package.
package signer

import (
	reflect "reflect"

	bls "github.com/ava-labs/avalanchego/utils/crypto/bls"
	gomock "go.uber.org/mock/gomock"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// Key mocks base method.
func (m *MockSigner) Key() *bls.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(*bls.PublicKey)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockSignerMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockSigner)(nil).Key))
}

// Verify mocks base method.
func (m *MockSigner) Verify() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify")
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockSignerMockRecorder) Verify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockSigner)(nil).Verify))
}
