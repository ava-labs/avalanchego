// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/platformvm/dac (interfaces: BondTxIDsGetter)

// Package dac is a generated GoMock package.
package dac

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockBondTxIDsGetter is a mock of BondTxIDsGetter interface.
type MockBondTxIDsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockBondTxIDsGetterMockRecorder
}

// MockBondTxIDsGetterMockRecorder is the mock recorder for MockBondTxIDsGetter.
type MockBondTxIDsGetterMockRecorder struct {
	mock *MockBondTxIDsGetter
}

// NewMockBondTxIDsGetter creates a new mock instance.
func NewMockBondTxIDsGetter(ctrl *gomock.Controller) *MockBondTxIDsGetter {
	mock := &MockBondTxIDsGetter{ctrl: ctrl}
	mock.recorder = &MockBondTxIDsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBondTxIDsGetter) EXPECT() *MockBondTxIDsGetterMockRecorder {
	return m.recorder
}

// AddMemberProposal mocks base method.
func (m *MockBondTxIDsGetter) AddMemberProposal(arg0 *AddMemberProposalState) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMemberProposal", arg0)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMemberProposal indicates an expected call of AddMemberProposal.
func (mr *MockBondTxIDsGetterMockRecorder) AddMemberProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMemberProposal", reflect.TypeOf((*MockBondTxIDsGetter)(nil).AddMemberProposal), arg0)
}

// BaseFeeProposal mocks base method.
func (m *MockBondTxIDsGetter) BaseFeeProposal(arg0 *BaseFeeProposalState) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseFeeProposal", arg0)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseFeeProposal indicates an expected call of BaseFeeProposal.
func (mr *MockBondTxIDsGetterMockRecorder) BaseFeeProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseFeeProposal", reflect.TypeOf((*MockBondTxIDsGetter)(nil).BaseFeeProposal), arg0)
}

// ExcludeMemberProposal mocks base method.
func (m *MockBondTxIDsGetter) ExcludeMemberProposal(arg0 *ExcludeMemberProposalState) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExcludeMemberProposal", arg0)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExcludeMemberProposal indicates an expected call of ExcludeMemberProposal.
func (mr *MockBondTxIDsGetterMockRecorder) ExcludeMemberProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeMemberProposal", reflect.TypeOf((*MockBondTxIDsGetter)(nil).ExcludeMemberProposal), arg0)
}

// FeeDistributionProposal mocks base method.
func (m *MockBondTxIDsGetter) FeeDistributionProposal(arg0 *FeeDistributionProposalState) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeDistributionProposal", arg0)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FeeDistributionProposal indicates an expected call of FeeDistributionProposal.
func (mr *MockBondTxIDsGetterMockRecorder) FeeDistributionProposal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeDistributionProposal", reflect.TypeOf((*MockBondTxIDsGetter)(nil).FeeDistributionProposal), arg0)
}
