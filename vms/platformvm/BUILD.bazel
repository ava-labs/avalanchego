load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "platformvm",
    srcs = [
        "client.go",
        "client_permissionless_validator.go",
        "factory.go",
        "health.go",
        "service.go",
        "vm.go",
    ],
    importpath = "github.com/ava-labs/avalanchego/vms/platformvm",
    visibility = ["//visibility:public"],
    deps = [
        "//api",
        "//api/metrics",
        "//cache",
        "//codec",
        "//codec/linearcodec",
        "//database",
        "//ids",
        "//snow",
        "//snow/consensus/snowman",
        "//snow/engine/common",
        "//snow/engine/snowman/block",
        "//snow/uptime",
        "//snow/validators",
        "//utils",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/formatting",
        "//utils/formatting/address",
        "//utils/json",
        "//utils/logging",
        "//utils/math",
        "//utils/rpc",
        "//utils/set",
        "//utils/timer/mockable",
        "//version",
        "//vms",
        "//vms/components/avax",
        "//vms/components/gas",
        "//vms/platformvm/api",
        "//vms/platformvm/block",
        "//vms/platformvm/block/builder",
        "//vms/platformvm/block/executor",
        "//vms/platformvm/config",
        "//vms/platformvm/fx",
        "//vms/platformvm/metrics",
        "//vms/platformvm/network",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/stakeable",
        "//vms/platformvm/state",
        "//vms/platformvm/status",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/executor",
        "//vms/platformvm/txs/mempool",
        "//vms/platformvm/utxo",
        "//vms/platformvm/validators",
        "//vms/platformvm/validators/fee",
        "//vms/platformvm/warp/message",
        "//vms/secp256k1fx",
        "//vms/txs/mempool",
        "//vms/types",
        "@com_github_gorilla_rpc//v2:rpc",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "platformvm_test",
    srcs = [
        "main_test.go",
        "service_test.go",
        "validator_set_property_test.go",
        "vm_regression_test.go",
        "vm_test.go",
    ],
    embed = [":platformvm"],
    deps = [
        "//api",
        "//cache",
        "//chains",
        "//chains/atomic",
        "//database",
        "//database/memdb",
        "//database/prefixdb",
        "//ids",
        "//message",
        "//network/p2p",
        "//network/p2p/gossip",
        "//proto/pb/p2p",
        "//snow",
        "//snow/consensus/snowball",
        "//snow/consensus/snowman",
        "//snow/engine/common",
        "//snow/engine/common/tracker",
        "//snow/engine/enginetest",
        "//snow/engine/snowman",
        "//snow/engine/snowman/bootstrap",
        "//snow/engine/snowman/getter",
        "//snow/networking/benchlist",
        "//snow/networking/handler",
        "//snow/networking/router",
        "//snow/networking/sender",
        "//snow/networking/sender/sendertest",
        "//snow/networking/timeout",
        "//snow/networking/tracker",
        "//snow/snowtest",
        "//snow/uptime",
        "//snow/validators",
        "//subnets",
        "//upgrade/upgradetest",
        "//utils/bloom",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/crypto/bls/signer/localsigner",
        "//utils/crypto/secp256k1",
        "//utils/formatting",
        "//utils/formatting/address",
        "//utils/json",
        "//utils/logging",
        "//utils/math/meter",
        "//utils/resource",
        "//utils/set",
        "//utils/timer",
        "//utils/timer/mockable",
        "//utils/units",
        "//version",
        "//vms/components/avax",
        "//vms/components/gas",
        "//vms/platformvm/api",
        "//vms/platformvm/block",
        "//vms/platformvm/block/builder",
        "//vms/platformvm/block/executor",
        "//vms/platformvm/block/executor/executormock",
        "//vms/platformvm/config",
        "//vms/platformvm/genesis/genesistest",
        "//vms/platformvm/reward",
        "//vms/platformvm/signer",
        "//vms/platformvm/state",
        "//vms/platformvm/state/statetest",
        "//vms/platformvm/status",
        "//vms/platformvm/txs",
        "//vms/platformvm/txs/executor",
        "//vms/platformvm/txs/txstest",
        "//vms/platformvm/validators/fee",
        "//vms/platformvm/warp/message",
        "//vms/secp256k1fx",
        "//vms/types",
        "//wallet/chain/p/builder",
        "//wallet/chain/p/wallet",
        "//wallet/subnet/primary/common",
        "@com_github_leanovate_gopter//:gopter",
        "@com_github_leanovate_gopter//gen",
        "@com_github_leanovate_gopter//prop",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_stretchr_testify//require",
        "@org_golang_x_exp//maps",
        "@org_golang_x_sync//errgroup",
        "@org_uber_go_goleak//:goleak",
        "@org_uber_go_mock//gomock",
    ],
)
