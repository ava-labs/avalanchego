// Copyright (C) 2019-2023, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/platformvm/state (interfaces: ProposalsIterator)

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	dac "github.com/ava-labs/avalanchego/vms/platformvm/dac"
	gomock "github.com/golang/mock/gomock"
)

// MockProposalsIterator is a mock of ProposalsIterator interface.
type MockProposalsIterator struct {
	ctrl     *gomock.Controller
	recorder *MockProposalsIteratorMockRecorder
}

// MockProposalsIteratorMockRecorder is the mock recorder for MockProposalsIterator.
type MockProposalsIteratorMockRecorder struct {
	mock *MockProposalsIterator
}

// NewMockProposalsIterator creates a new mock instance.
func NewMockProposalsIterator(ctrl *gomock.Controller) *MockProposalsIterator {
	mock := &MockProposalsIterator{ctrl: ctrl}
	mock.recorder = &MockProposalsIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalsIterator) EXPECT() *MockProposalsIteratorMockRecorder {
	return m.recorder
}

// Value mocks base method.
func (m *MockProposalsIterator) Value() (dac.ProposalState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(dac.ProposalState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockProposalsIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockProposalsIterator)(nil).Value))
}

// Next mocks base method.
func (m *MockProposalsIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockProposalsIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockProposalsIterator)(nil).Next))
}

// Error mocks base method.
func (m *MockProposalsIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockProposalsIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockProposalsIterator)(nil).Error))
}

// Release mocks base method.
func (m *MockProposalsIterator) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockProposalsIteratorMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockProposalsIterator)(nil).Release))
}

// key mocks base method.
func (m *MockProposalsIterator) key() (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "key")
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// key indicates an expected call of key.
func (mr *MockProposalsIteratorMockRecorder) key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "key", reflect.TypeOf((*MockProposalsIterator)(nil).key))
}
