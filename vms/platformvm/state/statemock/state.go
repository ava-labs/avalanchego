// Code generated by MockGen. DO NOT EDIT.
// Source: vms/platformvm/state/state.go
//
// Generated by this command:
//
//	mockgen -source=vms/platformvm/state/state.go -destination=vms/platformvm/state/statemock/state.go -package=statemock -exclude_interfaces=Chain -mock_names=State=State
//

// Package statemock is a generated GoMock package.
package statemock

import (
	context "context"
	reflect "reflect"
	sync "sync"
	time "time"

	database "github.com/ava-labs/avalanchego/database"
	ids "github.com/ava-labs/avalanchego/ids"
	validators "github.com/ava-labs/avalanchego/snow/validators"
	iterator "github.com/ava-labs/avalanchego/utils/iterator"
	logging "github.com/ava-labs/avalanchego/utils/logging"
	avax "github.com/ava-labs/avalanchego/vms/components/avax"
	gas "github.com/ava-labs/avalanchego/vms/components/gas"
	block "github.com/ava-labs/avalanchego/vms/platformvm/block"
	fx "github.com/ava-labs/avalanchego/vms/platformvm/fx"
	state "github.com/ava-labs/avalanchego/vms/platformvm/state"
	status "github.com/ava-labs/avalanchego/vms/platformvm/status"
	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"
	gomock "go.uber.org/mock/gomock"
)

// State is a mock of State interface.
type State struct {
	ctrl     *gomock.Controller
	recorder *StateMockRecorder
}

// StateMockRecorder is the mock recorder for State.
type StateMockRecorder struct {
	mock *State
}

// NewState creates a new mock instance.
func NewState(ctrl *gomock.Controller) *State {
	mock := &State{ctrl: ctrl}
	mock.recorder = &StateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *State) EXPECT() *StateMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *State) Abort() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Abort")
}

// Abort indicates an expected call of Abort.
func (mr *StateMockRecorder) Abort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*State)(nil).Abort))
}

// AddChain mocks base method.
func (m *State) AddChain(createChainTx *txs.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChain", createChainTx)
}

// AddChain indicates an expected call of AddChain.
func (mr *StateMockRecorder) AddChain(createChainTx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChain", reflect.TypeOf((*State)(nil).AddChain), createChainTx)
}

// AddRewardUTXO mocks base method.
func (m *State) AddRewardUTXO(txID ids.ID, utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddRewardUTXO", txID, utxo)
}

// AddRewardUTXO indicates an expected call of AddRewardUTXO.
func (mr *StateMockRecorder) AddRewardUTXO(txID, utxo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRewardUTXO", reflect.TypeOf((*State)(nil).AddRewardUTXO), txID, utxo)
}

// AddStatelessBlock mocks base method.
func (m *State) AddStatelessBlock(block block.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStatelessBlock", block)
}

// AddStatelessBlock indicates an expected call of AddStatelessBlock.
func (mr *StateMockRecorder) AddStatelessBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStatelessBlock", reflect.TypeOf((*State)(nil).AddStatelessBlock), block)
}

// AddSubnet mocks base method.
func (m *State) AddSubnet(subnetID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnet", subnetID)
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *StateMockRecorder) AddSubnet(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*State)(nil).AddSubnet), subnetID)
}

// AddSubnetTransformation mocks base method.
func (m *State) AddSubnetTransformation(transformSubnetTx *txs.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddSubnetTransformation", transformSubnetTx)
}

// AddSubnetTransformation indicates an expected call of AddSubnetTransformation.
func (mr *StateMockRecorder) AddSubnetTransformation(transformSubnetTx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnetTransformation", reflect.TypeOf((*State)(nil).AddSubnetTransformation), transformSubnetTx)
}

// AddTx mocks base method.
func (m *State) AddTx(tx *txs.Tx, status status.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTx", tx, status)
}

// AddTx indicates an expected call of AddTx.
func (mr *StateMockRecorder) AddTx(tx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*State)(nil).AddTx), tx, status)
}

// AddUTXO mocks base method.
func (m *State) AddUTXO(utxo *avax.UTXO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUTXO", utxo)
}

// AddUTXO indicates an expected call of AddUTXO.
func (mr *StateMockRecorder) AddUTXO(utxo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUTXO", reflect.TypeOf((*State)(nil).AddUTXO), utxo)
}

// ApplyValidatorPublicKeyDiffs mocks base method.
func (m *State) ApplyValidatorPublicKeyDiffs(ctx context.Context, validators map[ids.NodeID]*validators.GetValidatorOutput, startHeight, endHeight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyValidatorPublicKeyDiffs", ctx, validators, startHeight, endHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyValidatorPublicKeyDiffs indicates an expected call of ApplyValidatorPublicKeyDiffs.
func (mr *StateMockRecorder) ApplyValidatorPublicKeyDiffs(ctx, validators, startHeight, endHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyValidatorPublicKeyDiffs", reflect.TypeOf((*State)(nil).ApplyValidatorPublicKeyDiffs), ctx, validators, startHeight, endHeight)
}

// ApplyValidatorWeightDiffs mocks base method.
func (m *State) ApplyValidatorWeightDiffs(ctx context.Context, validators map[ids.NodeID]*validators.GetValidatorOutput, startHeight, endHeight uint64, subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyValidatorWeightDiffs", ctx, validators, startHeight, endHeight, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyValidatorWeightDiffs indicates an expected call of ApplyValidatorWeightDiffs.
func (mr *StateMockRecorder) ApplyValidatorWeightDiffs(ctx, validators, startHeight, endHeight, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyValidatorWeightDiffs", reflect.TypeOf((*State)(nil).ApplyValidatorWeightDiffs), ctx, validators, startHeight, endHeight, subnetID)
}

// Checksum mocks base method.
func (m *State) Checksum() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checksum")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// Checksum indicates an expected call of Checksum.
func (mr *StateMockRecorder) Checksum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checksum", reflect.TypeOf((*State)(nil).Checksum))
}

// Close mocks base method.
func (m *State) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *StateMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*State)(nil).Close))
}

// Commit mocks base method.
func (m *State) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *StateMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*State)(nil).Commit))
}

// CommitBatch mocks base method.
func (m *State) CommitBatch() (database.Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitBatch")
	ret0, _ := ret[0].(database.Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitBatch indicates an expected call of CommitBatch.
func (mr *StateMockRecorder) CommitBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitBatch", reflect.TypeOf((*State)(nil).CommitBatch))
}

// DeleteCurrentDelegator mocks base method.
func (m *State) DeleteCurrentDelegator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentDelegator", staker)
}

// DeleteCurrentDelegator indicates an expected call of DeleteCurrentDelegator.
func (mr *StateMockRecorder) DeleteCurrentDelegator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentDelegator", reflect.TypeOf((*State)(nil).DeleteCurrentDelegator), staker)
}

// DeleteCurrentValidator mocks base method.
func (m *State) DeleteCurrentValidator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteCurrentValidator", staker)
}

// DeleteCurrentValidator indicates an expected call of DeleteCurrentValidator.
func (mr *StateMockRecorder) DeleteCurrentValidator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCurrentValidator", reflect.TypeOf((*State)(nil).DeleteCurrentValidator), staker)
}

// DeletePendingDelegator mocks base method.
func (m *State) DeletePendingDelegator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingDelegator", staker)
}

// DeletePendingDelegator indicates an expected call of DeletePendingDelegator.
func (mr *StateMockRecorder) DeletePendingDelegator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingDelegator", reflect.TypeOf((*State)(nil).DeletePendingDelegator), staker)
}

// DeletePendingValidator mocks base method.
func (m *State) DeletePendingValidator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePendingValidator", staker)
}

// DeletePendingValidator indicates an expected call of DeletePendingValidator.
func (mr *StateMockRecorder) DeletePendingValidator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingValidator", reflect.TypeOf((*State)(nil).DeletePendingValidator), staker)
}

// DeleteUTXO mocks base method.
func (m *State) DeleteUTXO(utxoID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUTXO", utxoID)
}

// DeleteUTXO indicates an expected call of DeleteUTXO.
func (mr *StateMockRecorder) DeleteUTXO(utxoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUTXO", reflect.TypeOf((*State)(nil).DeleteUTXO), utxoID)
}

// GetBlockIDAtHeight mocks base method.
func (m *State) GetBlockIDAtHeight(height uint64) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockIDAtHeight", height)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockIDAtHeight indicates an expected call of GetBlockIDAtHeight.
func (mr *StateMockRecorder) GetBlockIDAtHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockIDAtHeight", reflect.TypeOf((*State)(nil).GetBlockIDAtHeight), height)
}

// GetChains mocks base method.
func (m *State) GetChains(subnetID ids.ID) ([]*txs.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", subnetID)
	ret0, _ := ret[0].([]*txs.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains.
func (mr *StateMockRecorder) GetChains(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*State)(nil).GetChains), subnetID)
}

// GetCurrentDelegatorIterator mocks base method.
func (m *State) GetCurrentDelegatorIterator(subnetID ids.ID, nodeID ids.NodeID) (iterator.Iterator[*state.Staker], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDelegatorIterator", subnetID, nodeID)
	ret0, _ := ret[0].(iterator.Iterator[*state.Staker])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentDelegatorIterator indicates an expected call of GetCurrentDelegatorIterator.
func (mr *StateMockRecorder) GetCurrentDelegatorIterator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDelegatorIterator", reflect.TypeOf((*State)(nil).GetCurrentDelegatorIterator), subnetID, nodeID)
}

// GetCurrentStakerIterator mocks base method.
func (m *State) GetCurrentStakerIterator() (iterator.Iterator[*state.Staker], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStakerIterator")
	ret0, _ := ret[0].(iterator.Iterator[*state.Staker])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStakerIterator indicates an expected call of GetCurrentStakerIterator.
func (mr *StateMockRecorder) GetCurrentStakerIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStakerIterator", reflect.TypeOf((*State)(nil).GetCurrentStakerIterator))
}

// GetCurrentSupply mocks base method.
func (m *State) GetCurrentSupply(subnetID ids.ID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSupply", subnetID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSupply indicates an expected call of GetCurrentSupply.
func (mr *StateMockRecorder) GetCurrentSupply(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSupply", reflect.TypeOf((*State)(nil).GetCurrentSupply), subnetID)
}

// GetCurrentValidator mocks base method.
func (m *State) GetCurrentValidator(subnetID ids.ID, nodeID ids.NodeID) (*state.Staker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*state.Staker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentValidator indicates an expected call of GetCurrentValidator.
func (mr *StateMockRecorder) GetCurrentValidator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidator", reflect.TypeOf((*State)(nil).GetCurrentValidator), subnetID, nodeID)
}

// GetDelegateeReward mocks base method.
func (m *State) GetDelegateeReward(subnetID ids.ID, nodeID ids.NodeID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegateeReward", subnetID, nodeID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegateeReward indicates an expected call of GetDelegateeReward.
func (mr *StateMockRecorder) GetDelegateeReward(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegateeReward", reflect.TypeOf((*State)(nil).GetDelegateeReward), subnetID, nodeID)
}

// GetFeeState mocks base method.
func (m *State) GetFeeState() gas.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeState")
	ret0, _ := ret[0].(gas.State)
	return ret0
}

// GetFeeState indicates an expected call of GetFeeState.
func (mr *StateMockRecorder) GetFeeState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeState", reflect.TypeOf((*State)(nil).GetFeeState))
}

// GetLastAccepted mocks base method.
func (m *State) GetLastAccepted() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAccepted")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// GetLastAccepted indicates an expected call of GetLastAccepted.
func (mr *StateMockRecorder) GetLastAccepted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAccepted", reflect.TypeOf((*State)(nil).GetLastAccepted))
}

// GetPendingDelegatorIterator mocks base method.
func (m *State) GetPendingDelegatorIterator(subnetID ids.ID, nodeID ids.NodeID) (iterator.Iterator[*state.Staker], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingDelegatorIterator", subnetID, nodeID)
	ret0, _ := ret[0].(iterator.Iterator[*state.Staker])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingDelegatorIterator indicates an expected call of GetPendingDelegatorIterator.
func (mr *StateMockRecorder) GetPendingDelegatorIterator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingDelegatorIterator", reflect.TypeOf((*State)(nil).GetPendingDelegatorIterator), subnetID, nodeID)
}

// GetPendingStakerIterator mocks base method.
func (m *State) GetPendingStakerIterator() (iterator.Iterator[*state.Staker], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingStakerIterator")
	ret0, _ := ret[0].(iterator.Iterator[*state.Staker])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingStakerIterator indicates an expected call of GetPendingStakerIterator.
func (mr *StateMockRecorder) GetPendingStakerIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingStakerIterator", reflect.TypeOf((*State)(nil).GetPendingStakerIterator))
}

// GetPendingValidator mocks base method.
func (m *State) GetPendingValidator(subnetID ids.ID, nodeID ids.NodeID) (*state.Staker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*state.Staker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingValidator indicates an expected call of GetPendingValidator.
func (mr *StateMockRecorder) GetPendingValidator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingValidator", reflect.TypeOf((*State)(nil).GetPendingValidator), subnetID, nodeID)
}

// GetRewardUTXOs mocks base method.
func (m *State) GetRewardUTXOs(txID ids.ID) ([]*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardUTXOs", txID)
	ret0, _ := ret[0].([]*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardUTXOs indicates an expected call of GetRewardUTXOs.
func (mr *StateMockRecorder) GetRewardUTXOs(txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardUTXOs", reflect.TypeOf((*State)(nil).GetRewardUTXOs), txID)
}

// GetStartTime mocks base method.
func (m *State) GetStartTime(nodeID ids.NodeID, subnetID ids.ID) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime", nodeID, subnetID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *StateMockRecorder) GetStartTime(nodeID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*State)(nil).GetStartTime), nodeID, subnetID)
}

// GetStatelessBlock mocks base method.
func (m *State) GetStatelessBlock(blockID ids.ID) (block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blockID)
	ret0, _ := ret[0].(block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *StateMockRecorder) GetStatelessBlock(blockID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*State)(nil).GetStatelessBlock), blockID)
}

// GetSubnetIDs mocks base method.
func (m *State) GetSubnetIDs() ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetIDs")
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetIDs indicates an expected call of GetSubnetIDs.
func (mr *StateMockRecorder) GetSubnetIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetIDs", reflect.TypeOf((*State)(nil).GetSubnetIDs))
}

// GetSubnetManager mocks base method.
func (m *State) GetSubnetManager(subnetID ids.ID) (ids.ID, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetManager", subnetID)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubnetManager indicates an expected call of GetSubnetManager.
func (mr *StateMockRecorder) GetSubnetManager(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetManager", reflect.TypeOf((*State)(nil).GetSubnetManager), subnetID)
}

// GetSubnetOwner mocks base method.
func (m *State) GetSubnetOwner(subnetID ids.ID) (fx.Owner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetOwner", subnetID)
	ret0, _ := ret[0].(fx.Owner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetOwner indicates an expected call of GetSubnetOwner.
func (mr *StateMockRecorder) GetSubnetOwner(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetOwner", reflect.TypeOf((*State)(nil).GetSubnetOwner), subnetID)
}

// GetSubnetTransformation mocks base method.
func (m *State) GetSubnetTransformation(subnetID ids.ID) (*txs.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetTransformation", subnetID)
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetTransformation indicates an expected call of GetSubnetTransformation.
func (mr *StateMockRecorder) GetSubnetTransformation(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetTransformation", reflect.TypeOf((*State)(nil).GetSubnetTransformation), subnetID)
}

// GetTimestamp mocks base method.
func (m *State) GetTimestamp() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *StateMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*State)(nil).GetTimestamp))
}

// GetTx mocks base method.
func (m *State) GetTx(txID ids.ID) (*txs.Tx, status.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", txID)
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(status.Status)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTx indicates an expected call of GetTx.
func (mr *StateMockRecorder) GetTx(txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*State)(nil).GetTx), txID)
}

// GetUTXO mocks base method.
func (m *State) GetUTXO(utxoID ids.ID) (*avax.UTXO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUTXO", utxoID)
	ret0, _ := ret[0].(*avax.UTXO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUTXO indicates an expected call of GetUTXO.
func (mr *StateMockRecorder) GetUTXO(utxoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUTXO", reflect.TypeOf((*State)(nil).GetUTXO), utxoID)
}

// GetUptime mocks base method.
func (m *State) GetUptime(nodeID ids.NodeID, subnetID ids.ID) (time.Duration, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUptime", nodeID, subnetID)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUptime indicates an expected call of GetUptime.
func (mr *StateMockRecorder) GetUptime(nodeID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUptime", reflect.TypeOf((*State)(nil).GetUptime), nodeID, subnetID)
}

// PutCurrentDelegator mocks base method.
func (m *State) PutCurrentDelegator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCurrentDelegator", staker)
}

// PutCurrentDelegator indicates an expected call of PutCurrentDelegator.
func (mr *StateMockRecorder) PutCurrentDelegator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCurrentDelegator", reflect.TypeOf((*State)(nil).PutCurrentDelegator), staker)
}

// PutCurrentValidator mocks base method.
func (m *State) PutCurrentValidator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutCurrentValidator", staker)
}

// PutCurrentValidator indicates an expected call of PutCurrentValidator.
func (mr *StateMockRecorder) PutCurrentValidator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCurrentValidator", reflect.TypeOf((*State)(nil).PutCurrentValidator), staker)
}

// PutPendingDelegator mocks base method.
func (m *State) PutPendingDelegator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutPendingDelegator", staker)
}

// PutPendingDelegator indicates an expected call of PutPendingDelegator.
func (mr *StateMockRecorder) PutPendingDelegator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPendingDelegator", reflect.TypeOf((*State)(nil).PutPendingDelegator), staker)
}

// PutPendingValidator mocks base method.
func (m *State) PutPendingValidator(staker *state.Staker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutPendingValidator", staker)
}

// PutPendingValidator indicates an expected call of PutPendingValidator.
func (mr *StateMockRecorder) PutPendingValidator(staker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPendingValidator", reflect.TypeOf((*State)(nil).PutPendingValidator), staker)
}

// ReindexBlocks mocks base method.
func (m *State) ReindexBlocks(lock sync.Locker, log logging.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReindexBlocks", lock, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReindexBlocks indicates an expected call of ReindexBlocks.
func (mr *StateMockRecorder) ReindexBlocks(lock, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReindexBlocks", reflect.TypeOf((*State)(nil).ReindexBlocks), lock, log)
}

// SetCurrentSupply mocks base method.
func (m *State) SetCurrentSupply(subnetID ids.ID, cs uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentSupply", subnetID, cs)
}

// SetCurrentSupply indicates an expected call of SetCurrentSupply.
func (mr *StateMockRecorder) SetCurrentSupply(subnetID, cs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentSupply", reflect.TypeOf((*State)(nil).SetCurrentSupply), subnetID, cs)
}

// SetDelegateeReward mocks base method.
func (m *State) SetDelegateeReward(subnetID ids.ID, nodeID ids.NodeID, amount uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDelegateeReward", subnetID, nodeID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDelegateeReward indicates an expected call of SetDelegateeReward.
func (mr *StateMockRecorder) SetDelegateeReward(subnetID, nodeID, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelegateeReward", reflect.TypeOf((*State)(nil).SetDelegateeReward), subnetID, nodeID, amount)
}

// SetFeeState mocks base method.
func (m *State) SetFeeState(f gas.State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFeeState", f)
}

// SetFeeState indicates an expected call of SetFeeState.
func (mr *StateMockRecorder) SetFeeState(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeeState", reflect.TypeOf((*State)(nil).SetFeeState), f)
}

// SetHeight mocks base method.
func (m *State) SetHeight(height uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeight", height)
}

// SetHeight indicates an expected call of SetHeight.
func (mr *StateMockRecorder) SetHeight(height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeight", reflect.TypeOf((*State)(nil).SetHeight), height)
}

// SetLastAccepted mocks base method.
func (m *State) SetLastAccepted(blkID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastAccepted", blkID)
}

// SetLastAccepted indicates an expected call of SetLastAccepted.
func (mr *StateMockRecorder) SetLastAccepted(blkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastAccepted", reflect.TypeOf((*State)(nil).SetLastAccepted), blkID)
}

// SetSubnetManager mocks base method.
func (m *State) SetSubnetManager(subnetID, chainID ids.ID, addr []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubnetManager", subnetID, chainID, addr)
}

// SetSubnetManager indicates an expected call of SetSubnetManager.
func (mr *StateMockRecorder) SetSubnetManager(subnetID, chainID, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubnetManager", reflect.TypeOf((*State)(nil).SetSubnetManager), subnetID, chainID, addr)
}

// SetSubnetOwner mocks base method.
func (m *State) SetSubnetOwner(subnetID ids.ID, owner fx.Owner) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubnetOwner", subnetID, owner)
}

// SetSubnetOwner indicates an expected call of SetSubnetOwner.
func (mr *StateMockRecorder) SetSubnetOwner(subnetID, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubnetOwner", reflect.TypeOf((*State)(nil).SetSubnetOwner), subnetID, owner)
}

// SetTimestamp mocks base method.
func (m *State) SetTimestamp(tm time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimestamp", tm)
}

// SetTimestamp indicates an expected call of SetTimestamp.
func (mr *StateMockRecorder) SetTimestamp(tm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimestamp", reflect.TypeOf((*State)(nil).SetTimestamp), tm)
}

// SetUptime mocks base method.
func (m *State) SetUptime(nodeID ids.NodeID, subnetID ids.ID, upDuration time.Duration, lastUpdated time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUptime", nodeID, subnetID, upDuration, lastUpdated)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUptime indicates an expected call of SetUptime.
func (mr *StateMockRecorder) SetUptime(nodeID, subnetID, upDuration, lastUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUptime", reflect.TypeOf((*State)(nil).SetUptime), nodeID, subnetID, upDuration, lastUpdated)
}

// UTXOIDs mocks base method.
func (m *State) UTXOIDs(addr []byte, previous ids.ID, limit int) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UTXOIDs", addr, previous, limit)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UTXOIDs indicates an expected call of UTXOIDs.
func (mr *StateMockRecorder) UTXOIDs(addr, previous, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UTXOIDs", reflect.TypeOf((*State)(nil).UTXOIDs), addr, previous, limit)
}
