// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/proposervm/proposer (interfaces: Windower)
//
// Generated by this command:
//
//	mockgen -package=proposermock -destination=vms/proposervm/proposer/proposermock/windower.go -mock_names=Windower=Windower github.com/ava-labs/avalanchego/vms/proposervm/proposer Windower
//

// Package proposermock is a generated GoMock package.
package proposermock

import (
	context "context"
	reflect "reflect"
	time "time"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// Windower is a mock of Windower interface.
type Windower struct {
	ctrl     *gomock.Controller
	recorder *WindowerMockRecorder
}

// WindowerMockRecorder is the mock recorder for Windower.
type WindowerMockRecorder struct {
	mock *Windower
}

// NewWindower creates a new mock instance.
func NewWindower(ctrl *gomock.Controller) *Windower {
	mock := &Windower{ctrl: ctrl}
	mock.recorder = &WindowerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Windower) EXPECT() *WindowerMockRecorder {
	return m.recorder
}

// Delay mocks base method.
func (m *Windower) Delay(arg0 context.Context, arg1, arg2 uint64, arg3 ids.NodeID, arg4 int) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delay", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delay indicates an expected call of Delay.
func (mr *WindowerMockRecorder) Delay(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delay", reflect.TypeOf((*Windower)(nil).Delay), arg0, arg1, arg2, arg3, arg4)
}

// ExpectedProposer mocks base method.
func (m *Windower) ExpectedProposer(arg0 context.Context, arg1, arg2, arg3 uint64) (ids.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpectedProposer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ids.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpectedProposer indicates an expected call of ExpectedProposer.
func (mr *WindowerMockRecorder) ExpectedProposer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpectedProposer", reflect.TypeOf((*Windower)(nil).ExpectedProposer), arg0, arg1, arg2, arg3)
}

// MinDelayForProposer mocks base method.
func (m *Windower) MinDelayForProposer(arg0 context.Context, arg1, arg2 uint64, arg3 ids.NodeID, arg4 uint64) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinDelayForProposer", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinDelayForProposer indicates an expected call of MinDelayForProposer.
func (mr *WindowerMockRecorder) MinDelayForProposer(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinDelayForProposer", reflect.TypeOf((*Windower)(nil).MinDelayForProposer), arg0, arg1, arg2, arg3, arg4)
}

// Proposers mocks base method.
func (m *Windower) Proposers(arg0 context.Context, arg1, arg2 uint64, arg3 int) ([]ids.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proposers", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]ids.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Proposers indicates an expected call of Proposers.
func (mr *WindowerMockRecorder) Proposers(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proposers", reflect.TypeOf((*Windower)(nil).Proposers), arg0, arg1, arg2, arg3)
}
