// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/proposervm (interfaces: SelfSubscriber)
//
// Generated by this command:
//
//	mockgen -package=proposervm -destination=mock_test.go . SelfSubscriber
//

// Package proposervm is a generated GoMock package.
package proposervm

import (
	context "context"
	reflect "reflect"

	common "github.com/ava-labs/avalanchego/snow/engine/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSelfSubscriber is a mock of SelfSubscriber interface.
type MockSelfSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSelfSubscriberMockRecorder
	isgomock struct{}
}

// MockSelfSubscriberMockRecorder is the mock recorder for MockSelfSubscriber.
type MockSelfSubscriberMockRecorder struct {
	mock *MockSelfSubscriber
}

// NewMockSelfSubscriber creates a new mock instance.
func NewMockSelfSubscriber(ctrl *gomock.Controller) *MockSelfSubscriber {
	mock := &MockSelfSubscriber{ctrl: ctrl}
	mock.recorder = &MockSelfSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelfSubscriber) EXPECT() *MockSelfSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSelfSubscriber) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSelfSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSelfSubscriber)(nil).Close))
}

// Publish mocks base method.
func (m *MockSelfSubscriber) Publish(msg common.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", msg)
}

// Publish indicates an expected call of Publish.
func (mr *MockSelfSubscriberMockRecorder) Publish(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSelfSubscriber)(nil).Publish), msg)
}

// WaitForEvent mocks base method.
func (m *MockSelfSubscriber) WaitForEvent(ctx context.Context) (common.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForEvent", ctx)
	ret0, _ := ret[0].(common.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForEvent indicates an expected call of WaitForEvent.
func (mr *MockSelfSubscriberMockRecorder) WaitForEvent(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForEvent", reflect.TypeOf((*MockSelfSubscriber)(nil).WaitForEvent), ctx)
}
