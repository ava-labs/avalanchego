syntax = "proto3";
package vmproto;

message InitializeRequest {
    uint32 networkID = 1;
    bytes subnetID = 2;
    bytes chainID = 3;
    bytes nodeID = 4;
    bytes xChainID = 5;
    bytes avaxAssetID = 6;
    bytes genesisBytes = 7;
    
    uint32 dbServer = 8;
    uint32 engineServer = 9;
    uint32 keystoreServer = 10;
    uint32 sharedMemoryServer = 11;
    uint32 bcLookupServer = 12;
    uint32 snLookupServer = 13;
}

message InitializeResponse {
    bytes lastAcceptedID = 1;
}

message BootstrappingRequest {}

message BootstrappingResponse {}

message BootstrappedRequest {}

message BootstrappedResponse {}

message ShutdownRequest {}

message ShutdownResponse {}

message CreateHandlersRequest {}

message CreateHandlersResponse {
    repeated Handler handlers = 1;
}

message Handler {
    string prefix = 1;
    uint32 lockOptions = 2;
    uint32 server = 3;
}

message BuildBlockRequest {}

message BuildBlockResponse {
    bytes id = 1;
    bytes parentID = 2;
    bytes bytes = 3;
    // status is always processing
}

message ParseBlockRequest {
    bytes bytes = 1;
}

message ParseBlockResponse {
    bytes id = 1;
    bytes parentID = 2;
    uint32 status = 3;
}

message GetBlockRequest {
    bytes id = 1;
}

message GetBlockResponse {
    bytes parentID = 1;
    bytes bytes = 2;
    uint32 status = 3;
}

message SetPreferenceRequest {
    bytes id = 1;
}

message SetPreferenceResponse {}

message BlockVerifyRequest {
    bytes id = 1;
}

message BlockVerifyResponse {}

message BlockAcceptRequest {
    bytes id = 1;
}

message BlockAcceptResponse {}

message BlockRejectRequest {
    bytes id = 1;
}

message BlockRejectResponse {}

message HealthRequest{}

message HealthResponse{
    string details = 1;
}

service VM {
    rpc Initialize(InitializeRequest) returns (InitializeResponse);
    rpc Bootstrapping(BootstrappingRequest) returns (BootstrappingResponse);
    rpc Bootstrapped(BootstrappedRequest) returns (BootstrappedResponse);
    rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
    rpc CreateHandlers(CreateHandlersRequest) returns (CreateHandlersResponse);
    rpc BuildBlock(BuildBlockRequest) returns (BuildBlockResponse);
    rpc ParseBlock(ParseBlockRequest) returns (ParseBlockResponse);
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    rpc SetPreference(SetPreferenceRequest) returns (SetPreferenceResponse);
    rpc Health(HealthRequest) returns (HealthResponse);

    rpc BlockVerify(BlockVerifyRequest) returns (BlockVerifyResponse);
    rpc BlockAccept(BlockAcceptRequest) returns (BlockAcceptResponse);
    rpc BlockReject(BlockRejectRequest) returns (BlockRejectResponse);
}
