// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/avm/txs/mempool (interfaces: Mempool)
//
// Generated by this command:
//
//	mockgen -package=mempoolmock -destination=mempoolmock/mempool.go -mock_names=Mempool=Mempool . Mempool
//

// Package mempoolmock is a generated GoMock package.
package mempoolmock

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	txs "github.com/ava-labs/avalanchego/vms/avm/txs"
	gomock "go.uber.org/mock/gomock"
)

// Mempool is a mock of Mempool interface.
type Mempool struct {
	ctrl     *gomock.Controller
	recorder *MempoolMockRecorder
	isgomock struct{}
}

// MempoolMockRecorder is the mock recorder for Mempool.
type MempoolMockRecorder struct {
	mock *Mempool
}

// NewMempool creates a new mock instance.
func NewMempool(ctrl *gomock.Controller) *Mempool {
	mock := &Mempool{ctrl: ctrl}
	mock.recorder = &MempoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mempool) EXPECT() *MempoolMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mempool) Add(tx *txs.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MempoolMockRecorder) Add(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mempool)(nil).Add), tx)
}

// Get mocks base method.
func (m *Mempool) Get(txID ids.ID) (*txs.Tx, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txID)
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MempoolMockRecorder) Get(txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mempool)(nil).Get), txID)
}

// GetDropReason mocks base method.
func (m *Mempool) GetDropReason(txID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDropReason", txID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDropReason indicates an expected call of GetDropReason.
func (mr *MempoolMockRecorder) GetDropReason(txID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDropReason", reflect.TypeOf((*Mempool)(nil).GetDropReason), txID)
}

// Iterate mocks base method.
func (m *Mempool) Iterate(f func(*txs.Tx) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Iterate", f)
}

// Iterate indicates an expected call of Iterate.
func (mr *MempoolMockRecorder) Iterate(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*Mempool)(nil).Iterate), f)
}

// Len mocks base method.
func (m *Mempool) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MempoolMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*Mempool)(nil).Len))
}

// MarkDropped mocks base method.
func (m *Mempool) MarkDropped(txID ids.ID, reason error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDropped", txID, reason)
}

// MarkDropped indicates an expected call of MarkDropped.
func (mr *MempoolMockRecorder) MarkDropped(txID, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDropped", reflect.TypeOf((*Mempool)(nil).MarkDropped), txID, reason)
}

// Peek mocks base method.
func (m *Mempool) Peek() (*txs.Tx, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(*txs.Tx)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MempoolMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*Mempool)(nil).Peek))
}

// Remove mocks base method.
func (m *Mempool) Remove(txs ...*txs.Tx) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Remove", varargs...)
}

// Remove indicates an expected call of Remove.
func (mr *MempoolMockRecorder) Remove(txs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Mempool)(nil).Remove), txs...)
}

// RequestBuildBlock mocks base method.
func (m *Mempool) RequestBuildBlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestBuildBlock")
}

// RequestBuildBlock indicates an expected call of RequestBuildBlock.
func (mr *MempoolMockRecorder) RequestBuildBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestBuildBlock", reflect.TypeOf((*Mempool)(nil).RequestBuildBlock))
}
