// Code generated by MockGen. DO NOT EDIT.
// Source: vms/avm/block/executor/manager.go
//
// Generated by this command:
//
//	mockgen -source=vms/avm/block/executor/manager.go -destination=vms/avm/block/executor/executormock/manager.go -package=executormock -exclude_interfaces= -mock_names=Manager=Manager
//

// Package executormock is a generated GoMock package.
package executormock

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	snowman "github.com/ava-labs/avalanchego/snow/consensus/snowman"
	set "github.com/ava-labs/avalanchego/utils/set"
	block "github.com/ava-labs/avalanchego/vms/avm/block"
	state "github.com/ava-labs/avalanchego/vms/avm/state"
	txs "github.com/ava-labs/avalanchego/vms/avm/txs"
	gomock "go.uber.org/mock/gomock"
)

// Manager is a mock of Manager interface.
type Manager struct {
	ctrl     *gomock.Controller
	recorder *ManagerMockRecorder
}

// ManagerMockRecorder is the mock recorder for Manager.
type ManagerMockRecorder struct {
	mock *Manager
}

// NewManager creates a new mock instance.
func NewManager(ctrl *gomock.Controller) *Manager {
	mock := &Manager{ctrl: ctrl}
	mock.recorder = &ManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Manager) EXPECT() *ManagerMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *Manager) GetBlock(blkID ids.ID) (snowman.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", blkID)
	ret0, _ := ret[0].(snowman.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *ManagerMockRecorder) GetBlock(blkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*Manager)(nil).GetBlock), blkID)
}

// GetState mocks base method.
func (m *Manager) GetState(blkID ids.ID) (state.Chain, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", blkID)
	ret0, _ := ret[0].(state.Chain)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *ManagerMockRecorder) GetState(blkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*Manager)(nil).GetState), blkID)
}

// GetStatelessBlock mocks base method.
func (m *Manager) GetStatelessBlock(blkID ids.ID) (block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatelessBlock", blkID)
	ret0, _ := ret[0].(block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatelessBlock indicates an expected call of GetStatelessBlock.
func (mr *ManagerMockRecorder) GetStatelessBlock(blkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatelessBlock", reflect.TypeOf((*Manager)(nil).GetStatelessBlock), blkID)
}

// LastAccepted mocks base method.
func (m *Manager) LastAccepted() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastAccepted")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// LastAccepted indicates an expected call of LastAccepted.
func (mr *ManagerMockRecorder) LastAccepted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastAccepted", reflect.TypeOf((*Manager)(nil).LastAccepted))
}

// NewBlock mocks base method.
func (m *Manager) NewBlock(arg0 block.Block) snowman.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBlock", arg0)
	ret0, _ := ret[0].(snowman.Block)
	return ret0
}

// NewBlock indicates an expected call of NewBlock.
func (mr *ManagerMockRecorder) NewBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBlock", reflect.TypeOf((*Manager)(nil).NewBlock), arg0)
}

// Preferred mocks base method.
func (m *Manager) Preferred() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preferred")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// Preferred indicates an expected call of Preferred.
func (mr *ManagerMockRecorder) Preferred() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preferred", reflect.TypeOf((*Manager)(nil).Preferred))
}

// SetPreference mocks base method.
func (m *Manager) SetPreference(blkID ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPreference", blkID)
}

// SetPreference indicates an expected call of SetPreference.
func (mr *ManagerMockRecorder) SetPreference(blkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPreference", reflect.TypeOf((*Manager)(nil).SetPreference), blkID)
}

// VerifyTx mocks base method.
func (m *Manager) VerifyTx(tx *txs.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTx", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyTx indicates an expected call of VerifyTx.
func (mr *ManagerMockRecorder) VerifyTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTx", reflect.TypeOf((*Manager)(nil).VerifyTx), tx)
}

// VerifyUniqueInputs mocks base method.
func (m *Manager) VerifyUniqueInputs(blkID ids.ID, inputs set.Set[ids.ID]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUniqueInputs", blkID, inputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUniqueInputs indicates an expected call of VerifyUniqueInputs.
func (mr *ManagerMockRecorder) VerifyUniqueInputs(blkID, inputs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUniqueInputs", reflect.TypeOf((*Manager)(nil).VerifyUniqueInputs), blkID, inputs)
}
