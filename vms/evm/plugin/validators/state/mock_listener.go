// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/evm/plugin/validators/state (interfaces: StateCallbackListener)
//
// Generated by this command:
//
//	mockgen -package=state -destination=mock_listener.go . StateCallbackListener
//

// Package state is a generated GoMock package.
package state

import (
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockStateCallbackListener is a mock of StateCallbackListener interface.
type MockStateCallbackListener struct {
	ctrl     *gomock.Controller
	recorder *MockStateCallbackListenerMockRecorder
	isgomock struct{}
}

// MockStateCallbackListenerMockRecorder is the mock recorder for MockStateCallbackListener.
type MockStateCallbackListenerMockRecorder struct {
	mock *MockStateCallbackListener
}

// NewMockStateCallbackListener creates a new mock instance.
func NewMockStateCallbackListener(ctrl *gomock.Controller) *MockStateCallbackListener {
	mock := &MockStateCallbackListener{ctrl: ctrl}
	mock.recorder = &MockStateCallbackListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateCallbackListener) EXPECT() *MockStateCallbackListenerMockRecorder {
	return m.recorder
}

// OnValidatorAdded mocks base method.
func (m *MockStateCallbackListener) OnValidatorAdded(vID ids.ID, nodeID ids.NodeID, startTime uint64, isActive bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorAdded", vID, nodeID, startTime, isActive)
}

// OnValidatorAdded indicates an expected call of OnValidatorAdded.
func (mr *MockStateCallbackListenerMockRecorder) OnValidatorAdded(vID, nodeID, startTime, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorAdded", reflect.TypeOf((*MockStateCallbackListener)(nil).OnValidatorAdded), vID, nodeID, startTime, isActive)
}

// OnValidatorRemoved mocks base method.
func (m *MockStateCallbackListener) OnValidatorRemoved(vID ids.ID, nodeID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorRemoved", vID, nodeID)
}

// OnValidatorRemoved indicates an expected call of OnValidatorRemoved.
func (mr *MockStateCallbackListenerMockRecorder) OnValidatorRemoved(vID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorRemoved", reflect.TypeOf((*MockStateCallbackListener)(nil).OnValidatorRemoved), vID, nodeID)
}

// OnValidatorStatusUpdated mocks base method.
func (m *MockStateCallbackListener) OnValidatorStatusUpdated(vID ids.ID, nodeID ids.NodeID, isActive bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorStatusUpdated", vID, nodeID, isActive)
}

// OnValidatorStatusUpdated indicates an expected call of OnValidatorStatusUpdated.
func (mr *MockStateCallbackListenerMockRecorder) OnValidatorStatusUpdated(vID, nodeID, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorStatusUpdated", reflect.TypeOf((*MockStateCallbackListener)(nil).OnValidatorStatusUpdated), vID, nodeID, isActive)
}
