// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/vms/registry (interfaces: VMRegistry)
//
// Generated by this command:
//
//	mockgen -package=registry -destination=vms/registry/mock_vm_registry.go github.com/ava-labs/avalanchego/vms/registry VMRegistry
//

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockVMRegistry is a mock of VMRegistry interface.
type MockVMRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockVMRegistryMockRecorder
}

// MockVMRegistryMockRecorder is the mock recorder for MockVMRegistry.
type MockVMRegistryMockRecorder struct {
	mock *MockVMRegistry
}

// NewMockVMRegistry creates a new mock instance.
func NewMockVMRegistry(ctrl *gomock.Controller) *MockVMRegistry {
	mock := &MockVMRegistry{ctrl: ctrl}
	mock.recorder = &MockVMRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMRegistry) EXPECT() *MockVMRegistryMockRecorder {
	return m.recorder
}

// Reload mocks base method.
func (m *MockVMRegistry) Reload(arg0 context.Context) ([]ids.ID, map[ids.ID]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", arg0)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(map[ids.ID]error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Reload indicates an expected call of Reload.
func (mr *MockVMRegistryMockRecorder) Reload(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockVMRegistry)(nil).Reload), arg0)
}
