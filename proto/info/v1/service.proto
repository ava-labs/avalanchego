syntax = "proto3";
package info.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ava-labs/avalanchego/proto/pb/info/v1;infov1";

// InfoService is the API service for unprivileged info on a node
service InfoService {
  rpc NodeVersion(NodeVersionRequest) returns (NodeVersionResponse);
  rpc NodeID(NodeIDRequest) returns (NodeIDResponse);
  rpc NodeIP(NodeIPRequest) returns (NodeIPResponse);
  rpc NetworkID(NetworkIDRequest) returns (NetworkIDResponse);
  rpc NetworkName(NetworkNameRequest) returns (NetworkNameResponse);
  rpc BlockchainID(BlockchainIDRequest) returns (BlockchainIDResponse);
  rpc Peers(PeersRequest) returns (PeersResponse);
  rpc IsBootstrapped(IsBootstrappedRequest) returns (IsBootstrappedResponse);
  rpc Upgrades(UpgradesRequest) returns (UpgradesResponse);
  rpc Uptime(UptimeRequest) returns (UptimeResponse);
  rpc VMs(VMsRequest) returns (VMsResponse);
}

message NodeVersionRequest {}
message NodeVersionResponse {
  string version = 1;
  string database_version = 2;
  uint32 rpc_protocol_version = 3;
  string git_commit = 4;
  map<string, string> vm_versions = 5;
}

message NodeIDRequest {}
message ProofOfPossession {
  string public_key = 1;
  string proof_of_possession = 2;
}
message NodeIDResponse {
  string node_id = 1;
  ProofOfPossession node_pop = 2;
}

message NodeIPRequest {}
message NodeIPResponse {
  string ip = 1;
}

message NetworkIDRequest {}
message NetworkIDResponse {
  uint32 network_id = 1;
}

message NetworkNameRequest {}
message NetworkNameResponse {
  string network_name = 1;
}

message BlockchainIDRequest {
  string alias = 1;
}
message BlockchainIDResponse {
  string blockchain_id = 1;
}

message PeersRequest {
  repeated string node_ids = 1;
}
message PeerInfo {
  string ip = 1;
  string public_ip = 2;
  string node_id = 3;
  string version = 4;
  google.protobuf.Timestamp last_sent = 5;
  google.protobuf.Timestamp last_received = 6;
  repeated string benched = 7;
  google.protobuf.Duration observed_uptime = 8;
  repeated string tracked_subnets = 9;
}
message PeersResponse {
  uint32 num_peers = 1;
  repeated PeerInfo peers = 2;
}

message IsBootstrappedRequest {
  // Alias of the chain
  string chain = 1;
}
message IsBootstrappedResponse {
  // True iff the chain exists and is done bootstrapping
  bool is_bootstrapped = 1;
}

message UpgradesRequest {}
message UpgradesResponse {
  google.protobuf.Timestamp apricot_phase1_time = 1;
  google.protobuf.Timestamp apricot_phase2_time = 2;
  google.protobuf.Timestamp apricot_phase3_time = 3;
  google.protobuf.Timestamp apricot_phase4_time = 4;
  uint64 apricot_phase4_min_p_chain_height = 5;
  google.protobuf.Timestamp apricot_phase5_time = 6;
  google.protobuf.Timestamp apricot_phase_pre6_time = 7;
  google.protobuf.Timestamp apricot_phase6_time = 8;
  google.protobuf.Timestamp apricot_phase_post6_time = 9;
  google.protobuf.Timestamp banff_time = 10;
  google.protobuf.Timestamp cortina_time = 11;
  string cortina_x_chain_stop_vertex_id = 12;
  google.protobuf.Timestamp durango_time = 13;
  google.protobuf.Timestamp etna_time = 14;
  google.protobuf.Timestamp fortuna_time = 15;
  google.protobuf.Timestamp granite_time = 16;
}

message UptimeRequest {}
message UptimeResponse {
  double rewarding_stake_percentage = 1;
  double weighted_average_percentage = 2;
}

message VMsRequest {}
message VMsResponse {
  map<string, VMAliases> vms = 1;
  map<string, string> fxs = 2;
}

message VMAliases {
  repeated string aliases = 1;
}
