// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: http/http.proto

package http

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPClient is the client API for HTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPClient interface {
	// Handle wraps http1 over http2 and provides support for websockets by implementing
	// net conn and responsewriter in http2.
	Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleSimple wraps http1 requests over http2 similar to Handle but only passes headers
	// and body bytes. Because the request and response are single protos with no inline
	// gRPC servers the CPU cost as well as file descriptor overhead is less
	// (no additional goroutines).
	HandleSimple(ctx context.Context, in *HandleSimpleHTTPRequest, opts ...grpc.CallOption) (*HandleSimpleHTTPResponse, error)
}

type hTTPClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPClient(cc grpc.ClientConnInterface) HTTPClient {
	return &hTTPClient{cc}
}

func (c *hTTPClient) Handle(ctx context.Context, in *HTTPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/http.HTTP/Handle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPClient) HandleSimple(ctx context.Context, in *HandleSimpleHTTPRequest, opts ...grpc.CallOption) (*HandleSimpleHTTPResponse, error) {
	out := new(HandleSimpleHTTPResponse)
	err := c.cc.Invoke(ctx, "/http.HTTP/HandleSimple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServer is the server API for HTTP service.
// All implementations must embed UnimplementedHTTPServer
// for forward compatibility
type HTTPServer interface {
	// Handle wraps http1 over http2 and provides support for websockets by implementing
	// net conn and responsewriter in http2.
	Handle(context.Context, *HTTPRequest) (*emptypb.Empty, error)
	// HandleSimple wraps http1 requests over http2 similar to Handle but only passes headers
	// and body bytes. Because the request and response are single protos with no inline
	// gRPC servers the CPU cost as well as file descriptor overhead is less
	// (no additional goroutines).
	HandleSimple(context.Context, *HandleSimpleHTTPRequest) (*HandleSimpleHTTPResponse, error)
	mustEmbedUnimplementedHTTPServer()
}

// UnimplementedHTTPServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPServer struct {
}

func (UnimplementedHTTPServer) Handle(context.Context, *HTTPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedHTTPServer) HandleSimple(context.Context, *HandleSimpleHTTPRequest) (*HandleSimpleHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSimple not implemented")
}
func (UnimplementedHTTPServer) mustEmbedUnimplementedHTTPServer() {}

// UnsafeHTTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPServer will
// result in compilation errors.
type UnsafeHTTPServer interface {
	mustEmbedUnimplementedHTTPServer()
}

func RegisterHTTPServer(s grpc.ServiceRegistrar, srv HTTPServer) {
	s.RegisterService(&HTTP_ServiceDesc, srv)
}

func _HTTP_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/http.HTTP/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).Handle(ctx, req.(*HTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTP_HandleSimple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleSimpleHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServer).HandleSimple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/http.HTTP/HandleSimple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServer).HandleSimple(ctx, req.(*HandleSimpleHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HTTP_ServiceDesc is the grpc.ServiceDesc for HTTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "http.HTTP",
	HandlerType: (*HTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _HTTP_Handle_Handler,
		},
		{
			MethodName: "HandleSimple",
			Handler:    _HTTP_HandleSimple_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/http.proto",
}
