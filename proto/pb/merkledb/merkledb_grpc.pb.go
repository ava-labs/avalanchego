// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: merkledb/merkledb.proto

package merkledb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerkleDB_GetMerkleRoot_FullMethodName     = "/merkledb.MerkleDB/GetMerkleRoot"
	MerkleDB_GetChangeProof_FullMethodName    = "/merkledb.MerkleDB/GetChangeProof"
	MerkleDB_VerifyChangeProof_FullMethodName = "/merkledb.MerkleDB/VerifyChangeProof"
	MerkleDB_CommitChangeProof_FullMethodName = "/merkledb.MerkleDB/CommitChangeProof"
	MerkleDB_GetProof_FullMethodName          = "/merkledb.MerkleDB/GetProof"
	MerkleDB_VerifyProof_FullMethodName       = "/merkledb.MerkleDB/VerifyProof"
	MerkleDB_GetRangeProof_FullMethodName     = "/merkledb.MerkleDB/GetRangeProof"
	MerkleDB_VerifyRangeProof_FullMethodName  = "/merkledb.MerkleDB/VerifyRangeProof"
	MerkleDB_CommitRangeProof_FullMethodName  = "/merkledb.MerkleDB/CommitRangeProof"
)

// MerkleDBClient is the client API for MerkleDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerkleDBClient interface {
	GetMerkleRoot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMerkleRootResponse, error)
	GetChangeProof(ctx context.Context, in *ChangeProofRequest, opts ...grpc.CallOption) (*ChangeProof, error)
	VerifyChangeProof(ctx context.Context, in *ChangeProof, opts ...grpc.CallOption) (*Error, error)
	CommitChangeProof(ctx context.Context, in *ChangeProof, opts ...grpc.CallOption) (*Error, error)
	GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*Proof, error)
	VerifyProof(ctx context.Context, in *Proof, opts ...grpc.CallOption) (*Error, error)
	GetRangeProof(ctx context.Context, in *RangeProofRequest, opts ...grpc.CallOption) (*RangeProof, error)
	VerifyRangeProof(ctx context.Context, in *RangeProof, opts ...grpc.CallOption) (*Error, error)
	CommitRangeProof(ctx context.Context, in *CommitRangeProofRequest, opts ...grpc.CallOption) (*Error, error)
}

type merkleDBClient struct {
	cc grpc.ClientConnInterface
}

func NewMerkleDBClient(cc grpc.ClientConnInterface) MerkleDBClient {
	return &merkleDBClient{cc}
}

func (c *merkleDBClient) GetMerkleRoot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMerkleRootResponse, error) {
	out := new(GetMerkleRootResponse)
	err := c.cc.Invoke(ctx, MerkleDB_GetMerkleRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) GetChangeProof(ctx context.Context, in *ChangeProofRequest, opts ...grpc.CallOption) (*ChangeProof, error) {
	out := new(ChangeProof)
	err := c.cc.Invoke(ctx, MerkleDB_GetChangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) VerifyChangeProof(ctx context.Context, in *ChangeProof, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, MerkleDB_VerifyChangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) CommitChangeProof(ctx context.Context, in *ChangeProof, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, MerkleDB_CommitChangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) GetProof(ctx context.Context, in *GetProofRequest, opts ...grpc.CallOption) (*Proof, error) {
	out := new(Proof)
	err := c.cc.Invoke(ctx, MerkleDB_GetProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) VerifyProof(ctx context.Context, in *Proof, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, MerkleDB_VerifyProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) GetRangeProof(ctx context.Context, in *RangeProofRequest, opts ...grpc.CallOption) (*RangeProof, error) {
	out := new(RangeProof)
	err := c.cc.Invoke(ctx, MerkleDB_GetRangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) VerifyRangeProof(ctx context.Context, in *RangeProof, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, MerkleDB_VerifyRangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merkleDBClient) CommitRangeProof(ctx context.Context, in *CommitRangeProofRequest, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, MerkleDB_CommitRangeProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerkleDBServer is the server API for MerkleDB service.
// All implementations must embed UnimplementedMerkleDBServer
// for forward compatibility
type MerkleDBServer interface {
	GetMerkleRoot(context.Context, *emptypb.Empty) (*GetMerkleRootResponse, error)
	GetChangeProof(context.Context, *ChangeProofRequest) (*ChangeProof, error)
	VerifyChangeProof(context.Context, *ChangeProof) (*Error, error)
	CommitChangeProof(context.Context, *ChangeProof) (*Error, error)
	GetProof(context.Context, *GetProofRequest) (*Proof, error)
	VerifyProof(context.Context, *Proof) (*Error, error)
	GetRangeProof(context.Context, *RangeProofRequest) (*RangeProof, error)
	VerifyRangeProof(context.Context, *RangeProof) (*Error, error)
	CommitRangeProof(context.Context, *CommitRangeProofRequest) (*Error, error)
	mustEmbedUnimplementedMerkleDBServer()
}

// UnimplementedMerkleDBServer must be embedded to have forward compatible implementations.
type UnimplementedMerkleDBServer struct {
}

func (UnimplementedMerkleDBServer) GetMerkleRoot(context.Context, *emptypb.Empty) (*GetMerkleRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleRoot not implemented")
}
func (UnimplementedMerkleDBServer) GetChangeProof(context.Context, *ChangeProofRequest) (*ChangeProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangeProof not implemented")
}
func (UnimplementedMerkleDBServer) VerifyChangeProof(context.Context, *ChangeProof) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChangeProof not implemented")
}
func (UnimplementedMerkleDBServer) CommitChangeProof(context.Context, *ChangeProof) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitChangeProof not implemented")
}
func (UnimplementedMerkleDBServer) GetProof(context.Context, *GetProofRequest) (*Proof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProof not implemented")
}
func (UnimplementedMerkleDBServer) VerifyProof(context.Context, *Proof) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProof not implemented")
}
func (UnimplementedMerkleDBServer) GetRangeProof(context.Context, *RangeProofRequest) (*RangeProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRangeProof not implemented")
}
func (UnimplementedMerkleDBServer) VerifyRangeProof(context.Context, *RangeProof) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRangeProof not implemented")
}
func (UnimplementedMerkleDBServer) CommitRangeProof(context.Context, *CommitRangeProofRequest) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitRangeProof not implemented")
}
func (UnimplementedMerkleDBServer) mustEmbedUnimplementedMerkleDBServer() {}

// UnsafeMerkleDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerkleDBServer will
// result in compilation errors.
type UnsafeMerkleDBServer interface {
	mustEmbedUnimplementedMerkleDBServer()
}

func RegisterMerkleDBServer(s grpc.ServiceRegistrar, srv MerkleDBServer) {
	s.RegisterService(&MerkleDB_ServiceDesc, srv)
}

func _MerkleDB_GetMerkleRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).GetMerkleRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_GetMerkleRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).GetMerkleRoot(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_GetChangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).GetChangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_GetChangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).GetChangeProof(ctx, req.(*ChangeProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_VerifyChangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).VerifyChangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_VerifyChangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).VerifyChangeProof(ctx, req.(*ChangeProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_CommitChangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).CommitChangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_CommitChangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).CommitChangeProof(ctx, req.(*ChangeProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_GetProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).GetProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_GetProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).GetProof(ctx, req.(*GetProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_VerifyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).VerifyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_VerifyProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).VerifyProof(ctx, req.(*Proof))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_GetRangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).GetRangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_GetRangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).GetRangeProof(ctx, req.(*RangeProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_VerifyRangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).VerifyRangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_VerifyRangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).VerifyRangeProof(ctx, req.(*RangeProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerkleDB_CommitRangeProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRangeProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerkleDBServer).CommitRangeProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerkleDB_CommitRangeProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerkleDBServer).CommitRangeProof(ctx, req.(*CommitRangeProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerkleDB_ServiceDesc is the grpc.ServiceDesc for MerkleDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerkleDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merkledb.MerkleDB",
	HandlerType: (*MerkleDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerkleRoot",
			Handler:    _MerkleDB_GetMerkleRoot_Handler,
		},
		{
			MethodName: "GetChangeProof",
			Handler:    _MerkleDB_GetChangeProof_Handler,
		},
		{
			MethodName: "VerifyChangeProof",
			Handler:    _MerkleDB_VerifyChangeProof_Handler,
		},
		{
			MethodName: "CommitChangeProof",
			Handler:    _MerkleDB_CommitChangeProof_Handler,
		},
		{
			MethodName: "GetProof",
			Handler:    _MerkleDB_GetProof_Handler,
		},
		{
			MethodName: "VerifyProof",
			Handler:    _MerkleDB_VerifyProof_Handler,
		},
		{
			MethodName: "GetRangeProof",
			Handler:    _MerkleDB_GetRangeProof_Handler,
		},
		{
			MethodName: "VerifyRangeProof",
			Handler:    _MerkleDB_VerifyRangeProof_Handler,
		},
		{
			MethodName: "CommitRangeProof",
			Handler:    _MerkleDB_CommitRangeProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merkledb/merkledb.proto",
}
