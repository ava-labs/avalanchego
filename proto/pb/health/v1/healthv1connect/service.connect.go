// Copyright (C) 2019-2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: health/v1/service.proto

package healthv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ava-labs/avalanchego/proto/pb/health/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthServiceName is the fully-qualified name of the HealthService service.
	HealthServiceName = "health.v1.HealthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthServiceReadinessProcedure is the fully-qualified name of the HealthService's Readiness RPC.
	HealthServiceReadinessProcedure = "/health.v1.HealthService/Readiness"
	// HealthServiceLivenessProcedure is the fully-qualified name of the HealthService's Liveness RPC.
	HealthServiceLivenessProcedure = "/health.v1.HealthService/Liveness"
	// HealthServiceHealthProcedure is the fully-qualified name of the HealthService's Health RPC.
	HealthServiceHealthProcedure = "/health.v1.HealthService/Health"
)

// HealthServiceClient is a client for the health.v1.HealthService service.
type HealthServiceClient interface {
	Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error)
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewHealthServiceClient constructs a client for the health.v1.HealthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	healthServiceMethods := v1.File_health_v1_service_proto.Services().ByName("HealthService").Methods()
	return &healthServiceClient{
		readiness: connect.NewClient[v1.ReadinessRequest, v1.ReadinessResponse](
			httpClient,
			baseURL+HealthServiceReadinessProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Readiness")),
			connect.WithClientOptions(opts...),
		),
		liveness: connect.NewClient[v1.LivenessRequest, v1.LivenessResponse](
			httpClient,
			baseURL+HealthServiceLivenessProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Liveness")),
			connect.WithClientOptions(opts...),
		),
		health: connect.NewClient[v1.HealthRequest, v1.HealthResponse](
			httpClient,
			baseURL+HealthServiceHealthProcedure,
			connect.WithSchema(healthServiceMethods.ByName("Health")),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthServiceClient implements HealthServiceClient.
type healthServiceClient struct {
	readiness *connect.Client[v1.ReadinessRequest, v1.ReadinessResponse]
	liveness  *connect.Client[v1.LivenessRequest, v1.LivenessResponse]
	health    *connect.Client[v1.HealthRequest, v1.HealthResponse]
}

// Readiness calls health.v1.HealthService.Readiness.
func (c *healthServiceClient) Readiness(ctx context.Context, req *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error) {
	return c.readiness.CallUnary(ctx, req)
}

// Liveness calls health.v1.HealthService.Liveness.
func (c *healthServiceClient) Liveness(ctx context.Context, req *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return c.liveness.CallUnary(ctx, req)
}

// Health calls health.v1.HealthService.Health.
func (c *healthServiceClient) Health(ctx context.Context, req *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// HealthServiceHandler is an implementation of the health.v1.HealthService service.
type HealthServiceHandler interface {
	Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error)
	Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error)
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewHealthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthServiceHandler(svc HealthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthServiceMethods := v1.File_health_v1_service_proto.Services().ByName("HealthService").Methods()
	healthServiceReadinessHandler := connect.NewUnaryHandler(
		HealthServiceReadinessProcedure,
		svc.Readiness,
		connect.WithSchema(healthServiceMethods.ByName("Readiness")),
		connect.WithHandlerOptions(opts...),
	)
	healthServiceLivenessHandler := connect.NewUnaryHandler(
		HealthServiceLivenessProcedure,
		svc.Liveness,
		connect.WithSchema(healthServiceMethods.ByName("Liveness")),
		connect.WithHandlerOptions(opts...),
	)
	healthServiceHealthHandler := connect.NewUnaryHandler(
		HealthServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(healthServiceMethods.ByName("Health")),
		connect.WithHandlerOptions(opts...),
	)
	return "/health.v1.HealthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthServiceReadinessProcedure:
			healthServiceReadinessHandler.ServeHTTP(w, r)
		case HealthServiceLivenessProcedure:
			healthServiceLivenessHandler.ServeHTTP(w, r)
		case HealthServiceHealthProcedure:
			healthServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthServiceHandler struct{}

func (UnimplementedHealthServiceHandler) Readiness(context.Context, *connect.Request[v1.ReadinessRequest]) (*connect.Response[v1.ReadinessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("health.v1.HealthService.Readiness is not implemented"))
}

func (UnimplementedHealthServiceHandler) Liveness(context.Context, *connect.Request[v1.LivenessRequest]) (*connect.Response[v1.LivenessResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("health.v1.HealthService.Liveness is not implemented"))
}

func (UnimplementedHealthServiceHandler) Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("health.v1.HealthService.Health is not implemented"))
}
