// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: info/v1/service.proto

package infov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InfoService_GetNodeVersion_FullMethodName  = "/info.v1.InfoService/GetNodeVersion"
	InfoService_GetNodeID_FullMethodName       = "/info.v1.InfoService/GetNodeID"
	InfoService_GetNodeIP_FullMethodName       = "/info.v1.InfoService/GetNodeIP"
	InfoService_GetNetworkID_FullMethodName    = "/info.v1.InfoService/GetNetworkID"
	InfoService_GetNetworkName_FullMethodName  = "/info.v1.InfoService/GetNetworkName"
	InfoService_GetBlockchainID_FullMethodName = "/info.v1.InfoService/GetBlockchainID"
	InfoService_Peers_FullMethodName           = "/info.v1.InfoService/Peers"
	InfoService_IsBootstrapped_FullMethodName  = "/info.v1.InfoService/IsBootstrapped"
	InfoService_Upgrades_FullMethodName        = "/info.v1.InfoService/Upgrades"
	InfoService_Uptime_FullMethodName          = "/info.v1.InfoService/Uptime"
	InfoService_GetVMs_FullMethodName          = "/info.v1.InfoService/GetVMs"
)

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoServiceClient interface {
	GetNodeVersion(ctx context.Context, in *GetNodeVersionRequest, opts ...grpc.CallOption) (*GetNodeVersionResponse, error)
	GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error)
	GetNodeIP(ctx context.Context, in *GetNodeIPRequest, opts ...grpc.CallOption) (*GetNodeIPResponse, error)
	GetNetworkID(ctx context.Context, in *GetNetworkIDRequest, opts ...grpc.CallOption) (*GetNetworkIDResponse, error)
	GetNetworkName(ctx context.Context, in *GetNetworkNameRequest, opts ...grpc.CallOption) (*GetNetworkNameResponse, error)
	GetBlockchainID(ctx context.Context, in *GetBlockchainIDRequest, opts ...grpc.CallOption) (*GetBlockchainIDResponse, error)
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error)
	IsBootstrapped(ctx context.Context, in *IsBootstrappedRequest, opts ...grpc.CallOption) (*IsBootstrappedResponse, error)
	Upgrades(ctx context.Context, in *UpgradesRequest, opts ...grpc.CallOption) (*UpgradesResponse, error)
	Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
	GetVMs(ctx context.Context, in *GetVMsRequest, opts ...grpc.CallOption) (*GetVMsResponse, error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetNodeVersion(ctx context.Context, in *GetNodeVersionRequest, opts ...grpc.CallOption) (*GetNodeVersionResponse, error) {
	out := new(GetNodeVersionResponse)
	err := c.cc.Invoke(ctx, InfoService_GetNodeVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetNodeID(ctx context.Context, in *GetNodeIDRequest, opts ...grpc.CallOption) (*GetNodeIDResponse, error) {
	out := new(GetNodeIDResponse)
	err := c.cc.Invoke(ctx, InfoService_GetNodeID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetNodeIP(ctx context.Context, in *GetNodeIPRequest, opts ...grpc.CallOption) (*GetNodeIPResponse, error) {
	out := new(GetNodeIPResponse)
	err := c.cc.Invoke(ctx, InfoService_GetNodeIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetNetworkID(ctx context.Context, in *GetNetworkIDRequest, opts ...grpc.CallOption) (*GetNetworkIDResponse, error) {
	out := new(GetNetworkIDResponse)
	err := c.cc.Invoke(ctx, InfoService_GetNetworkID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetNetworkName(ctx context.Context, in *GetNetworkNameRequest, opts ...grpc.CallOption) (*GetNetworkNameResponse, error) {
	out := new(GetNetworkNameResponse)
	err := c.cc.Invoke(ctx, InfoService_GetNetworkName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetBlockchainID(ctx context.Context, in *GetBlockchainIDRequest, opts ...grpc.CallOption) (*GetBlockchainIDResponse, error) {
	out := new(GetBlockchainIDResponse)
	err := c.cc.Invoke(ctx, InfoService_GetBlockchainID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error) {
	out := new(PeersResponse)
	err := c.cc.Invoke(ctx, InfoService_Peers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) IsBootstrapped(ctx context.Context, in *IsBootstrappedRequest, opts ...grpc.CallOption) (*IsBootstrappedResponse, error) {
	out := new(IsBootstrappedResponse)
	err := c.cc.Invoke(ctx, InfoService_IsBootstrapped_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Upgrades(ctx context.Context, in *UpgradesRequest, opts ...grpc.CallOption) (*UpgradesResponse, error) {
	out := new(UpgradesResponse)
	err := c.cc.Invoke(ctx, InfoService_Upgrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, InfoService_Uptime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) GetVMs(ctx context.Context, in *GetVMsRequest, opts ...grpc.CallOption) (*GetVMsResponse, error) {
	out := new(GetVMsResponse)
	err := c.cc.Invoke(ctx, InfoService_GetVMs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServiceServer is the server API for InfoService service.
// All implementations must embed UnimplementedInfoServiceServer
// for forward compatibility
type InfoServiceServer interface {
	GetNodeVersion(context.Context, *GetNodeVersionRequest) (*GetNodeVersionResponse, error)
	GetNodeID(context.Context, *GetNodeIDRequest) (*GetNodeIDResponse, error)
	GetNodeIP(context.Context, *GetNodeIPRequest) (*GetNodeIPResponse, error)
	GetNetworkID(context.Context, *GetNetworkIDRequest) (*GetNetworkIDResponse, error)
	GetNetworkName(context.Context, *GetNetworkNameRequest) (*GetNetworkNameResponse, error)
	GetBlockchainID(context.Context, *GetBlockchainIDRequest) (*GetBlockchainIDResponse, error)
	Peers(context.Context, *PeersRequest) (*PeersResponse, error)
	IsBootstrapped(context.Context, *IsBootstrappedRequest) (*IsBootstrappedResponse, error)
	Upgrades(context.Context, *UpgradesRequest) (*UpgradesResponse, error)
	Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error)
	GetVMs(context.Context, *GetVMsRequest) (*GetVMsResponse, error)
	mustEmbedUnimplementedInfoServiceServer()
}

// UnimplementedInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServiceServer struct {
}

func (UnimplementedInfoServiceServer) GetNodeVersion(context.Context, *GetNodeVersionRequest) (*GetNodeVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeVersion not implemented")
}
func (UnimplementedInfoServiceServer) GetNodeID(context.Context, *GetNodeIDRequest) (*GetNodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeID not implemented")
}
func (UnimplementedInfoServiceServer) GetNodeIP(context.Context, *GetNodeIPRequest) (*GetNodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeIP not implemented")
}
func (UnimplementedInfoServiceServer) GetNetworkID(context.Context, *GetNetworkIDRequest) (*GetNetworkIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkID not implemented")
}
func (UnimplementedInfoServiceServer) GetNetworkName(context.Context, *GetNetworkNameRequest) (*GetNetworkNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkName not implemented")
}
func (UnimplementedInfoServiceServer) GetBlockchainID(context.Context, *GetBlockchainIDRequest) (*GetBlockchainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainID not implemented")
}
func (UnimplementedInfoServiceServer) Peers(context.Context, *PeersRequest) (*PeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (UnimplementedInfoServiceServer) IsBootstrapped(context.Context, *IsBootstrappedRequest) (*IsBootstrappedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBootstrapped not implemented")
}
func (UnimplementedInfoServiceServer) Upgrades(context.Context, *UpgradesRequest) (*UpgradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrades not implemented")
}
func (UnimplementedInfoServiceServer) Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uptime not implemented")
}
func (UnimplementedInfoServiceServer) GetVMs(context.Context, *GetVMsRequest) (*GetVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMs not implemented")
}
func (UnimplementedInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {}

// UnsafeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServiceServer will
// result in compilation errors.
type UnsafeInfoServiceServer interface {
	mustEmbedUnimplementedInfoServiceServer()
}

func RegisterInfoServiceServer(s grpc.ServiceRegistrar, srv InfoServiceServer) {
	s.RegisterService(&InfoService_ServiceDesc, srv)
}

func _InfoService_GetNodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetNodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetNodeVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetNodeVersion(ctx, req.(*GetNodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetNodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetNodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetNodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetNodeID(ctx, req.(*GetNodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetNodeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetNodeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetNodeIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetNodeIP(ctx, req.(*GetNodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetNetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetNetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetNetworkID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetNetworkID(ctx, req.(*GetNetworkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetNetworkName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetNetworkName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetNetworkName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetNetworkName(ctx, req.(*GetNetworkNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetBlockchainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetBlockchainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetBlockchainID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetBlockchainID(ctx, req.(*GetBlockchainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Peers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_IsBootstrapped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBootstrappedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).IsBootstrapped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_IsBootstrapped_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).IsBootstrapped(ctx, req.(*IsBootstrappedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Upgrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Upgrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Upgrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Upgrades(ctx, req.(*UpgradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Uptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Uptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Uptime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Uptime(ctx, req.(*UptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_GetVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).GetVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_GetVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).GetVMs(ctx, req.(*GetVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoService_ServiceDesc is the grpc.ServiceDesc for InfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.v1.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeVersion",
			Handler:    _InfoService_GetNodeVersion_Handler,
		},
		{
			MethodName: "GetNodeID",
			Handler:    _InfoService_GetNodeID_Handler,
		},
		{
			MethodName: "GetNodeIP",
			Handler:    _InfoService_GetNodeIP_Handler,
		},
		{
			MethodName: "GetNetworkID",
			Handler:    _InfoService_GetNetworkID_Handler,
		},
		{
			MethodName: "GetNetworkName",
			Handler:    _InfoService_GetNetworkName_Handler,
		},
		{
			MethodName: "GetBlockchainID",
			Handler:    _InfoService_GetBlockchainID_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _InfoService_Peers_Handler,
		},
		{
			MethodName: "IsBootstrapped",
			Handler:    _InfoService_IsBootstrapped_Handler,
		},
		{
			MethodName: "Upgrades",
			Handler:    _InfoService_Upgrades_Handler,
		},
		{
			MethodName: "Uptime",
			Handler:    _InfoService_Uptime_Handler,
		},
		{
			MethodName: "GetVMs",
			Handler:    _InfoService_GetVMs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info/v1/service.proto",
}
