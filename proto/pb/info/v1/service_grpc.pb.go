// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: info/v1/service.proto

package infov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InfoService_NodeVersion_FullMethodName    = "/info.v1.InfoService/NodeVersion"
	InfoService_NodeID_FullMethodName         = "/info.v1.InfoService/NodeID"
	InfoService_NodeIP_FullMethodName         = "/info.v1.InfoService/NodeIP"
	InfoService_NetworkID_FullMethodName      = "/info.v1.InfoService/NetworkID"
	InfoService_NetworkName_FullMethodName    = "/info.v1.InfoService/NetworkName"
	InfoService_BlockchainID_FullMethodName   = "/info.v1.InfoService/BlockchainID"
	InfoService_Peers_FullMethodName          = "/info.v1.InfoService/Peers"
	InfoService_IsBootstrapped_FullMethodName = "/info.v1.InfoService/IsBootstrapped"
	InfoService_Upgrades_FullMethodName       = "/info.v1.InfoService/Upgrades"
	InfoService_Uptime_FullMethodName         = "/info.v1.InfoService/Uptime"
	InfoService_VMs_FullMethodName            = "/info.v1.InfoService/VMs"
)

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// InfoService is the API service for unprivileged info on a node
type InfoServiceClient interface {
	NodeVersion(ctx context.Context, in *NodeVersionRequest, opts ...grpc.CallOption) (*NodeVersionResponse, error)
	NodeID(ctx context.Context, in *NodeIDRequest, opts ...grpc.CallOption) (*NodeIDResponse, error)
	NodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error)
	NetworkID(ctx context.Context, in *NetworkIDRequest, opts ...grpc.CallOption) (*NetworkIDResponse, error)
	NetworkName(ctx context.Context, in *NetworkNameRequest, opts ...grpc.CallOption) (*NetworkNameResponse, error)
	BlockchainID(ctx context.Context, in *BlockchainIDRequest, opts ...grpc.CallOption) (*BlockchainIDResponse, error)
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error)
	IsBootstrapped(ctx context.Context, in *IsBootstrappedRequest, opts ...grpc.CallOption) (*IsBootstrappedResponse, error)
	Upgrades(ctx context.Context, in *UpgradesRequest, opts ...grpc.CallOption) (*UpgradesResponse, error)
	Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error)
	VMs(ctx context.Context, in *VMsRequest, opts ...grpc.CallOption) (*VMsResponse, error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) NodeVersion(ctx context.Context, in *NodeVersionRequest, opts ...grpc.CallOption) (*NodeVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeVersionResponse)
	err := c.cc.Invoke(ctx, InfoService_NodeVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) NodeID(ctx context.Context, in *NodeIDRequest, opts ...grpc.CallOption) (*NodeIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeIDResponse)
	err := c.cc.Invoke(ctx, InfoService_NodeID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) NodeIP(ctx context.Context, in *NodeIPRequest, opts ...grpc.CallOption) (*NodeIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeIPResponse)
	err := c.cc.Invoke(ctx, InfoService_NodeIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) NetworkID(ctx context.Context, in *NetworkIDRequest, opts ...grpc.CallOption) (*NetworkIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkIDResponse)
	err := c.cc.Invoke(ctx, InfoService_NetworkID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) NetworkName(ctx context.Context, in *NetworkNameRequest, opts ...grpc.CallOption) (*NetworkNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkNameResponse)
	err := c.cc.Invoke(ctx, InfoService_NetworkName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) BlockchainID(ctx context.Context, in *BlockchainIDRequest, opts ...grpc.CallOption) (*BlockchainIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockchainIDResponse)
	err := c.cc.Invoke(ctx, InfoService_BlockchainID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PeersResponse)
	err := c.cc.Invoke(ctx, InfoService_Peers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) IsBootstrapped(ctx context.Context, in *IsBootstrappedRequest, opts ...grpc.CallOption) (*IsBootstrappedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsBootstrappedResponse)
	err := c.cc.Invoke(ctx, InfoService_IsBootstrapped_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Upgrades(ctx context.Context, in *UpgradesRequest, opts ...grpc.CallOption) (*UpgradesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpgradesResponse)
	err := c.cc.Invoke(ctx, InfoService_Upgrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) Uptime(ctx context.Context, in *UptimeRequest, opts ...grpc.CallOption) (*UptimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UptimeResponse)
	err := c.cc.Invoke(ctx, InfoService_Uptime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServiceClient) VMs(ctx context.Context, in *VMsRequest, opts ...grpc.CallOption) (*VMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMsResponse)
	err := c.cc.Invoke(ctx, InfoService_VMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServiceServer is the server API for InfoService service.
// All implementations must embed UnimplementedInfoServiceServer
// for forward compatibility.
//
// InfoService is the API service for unprivileged info on a node
type InfoServiceServer interface {
	NodeVersion(context.Context, *NodeVersionRequest) (*NodeVersionResponse, error)
	NodeID(context.Context, *NodeIDRequest) (*NodeIDResponse, error)
	NodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error)
	NetworkID(context.Context, *NetworkIDRequest) (*NetworkIDResponse, error)
	NetworkName(context.Context, *NetworkNameRequest) (*NetworkNameResponse, error)
	BlockchainID(context.Context, *BlockchainIDRequest) (*BlockchainIDResponse, error)
	Peers(context.Context, *PeersRequest) (*PeersResponse, error)
	IsBootstrapped(context.Context, *IsBootstrappedRequest) (*IsBootstrappedResponse, error)
	Upgrades(context.Context, *UpgradesRequest) (*UpgradesResponse, error)
	Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error)
	VMs(context.Context, *VMsRequest) (*VMsResponse, error)
	mustEmbedUnimplementedInfoServiceServer()
}

// UnimplementedInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoServiceServer struct{}

func (UnimplementedInfoServiceServer) NodeVersion(context.Context, *NodeVersionRequest) (*NodeVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeVersion not implemented")
}
func (UnimplementedInfoServiceServer) NodeID(context.Context, *NodeIDRequest) (*NodeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeID not implemented")
}
func (UnimplementedInfoServiceServer) NodeIP(context.Context, *NodeIPRequest) (*NodeIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeIP not implemented")
}
func (UnimplementedInfoServiceServer) NetworkID(context.Context, *NetworkIDRequest) (*NetworkIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkID not implemented")
}
func (UnimplementedInfoServiceServer) NetworkName(context.Context, *NetworkNameRequest) (*NetworkNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkName not implemented")
}
func (UnimplementedInfoServiceServer) BlockchainID(context.Context, *BlockchainIDRequest) (*BlockchainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockchainID not implemented")
}
func (UnimplementedInfoServiceServer) Peers(context.Context, *PeersRequest) (*PeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (UnimplementedInfoServiceServer) IsBootstrapped(context.Context, *IsBootstrappedRequest) (*IsBootstrappedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBootstrapped not implemented")
}
func (UnimplementedInfoServiceServer) Upgrades(context.Context, *UpgradesRequest) (*UpgradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrades not implemented")
}
func (UnimplementedInfoServiceServer) Uptime(context.Context, *UptimeRequest) (*UptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uptime not implemented")
}
func (UnimplementedInfoServiceServer) VMs(context.Context, *VMsRequest) (*VMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMs not implemented")
}
func (UnimplementedInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {}
func (UnimplementedInfoServiceServer) testEmbeddedByValue()                     {}

// UnsafeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServiceServer will
// result in compilation errors.
type UnsafeInfoServiceServer interface {
	mustEmbedUnimplementedInfoServiceServer()
}

func RegisterInfoServiceServer(s grpc.ServiceRegistrar, srv InfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InfoService_ServiceDesc, srv)
}

func _InfoService_NodeVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).NodeVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_NodeVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).NodeVersion(ctx, req.(*NodeVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_NodeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).NodeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_NodeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).NodeID(ctx, req.(*NodeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_NodeIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).NodeIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_NodeIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).NodeIP(ctx, req.(*NodeIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_NetworkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).NetworkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_NetworkID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).NetworkID(ctx, req.(*NetworkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_NetworkName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).NetworkName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_NetworkName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).NetworkName(ctx, req.(*NetworkNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_BlockchainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockchainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).BlockchainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_BlockchainID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).BlockchainID(ctx, req.(*BlockchainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Peers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_IsBootstrapped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBootstrappedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).IsBootstrapped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_IsBootstrapped_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).IsBootstrapped(ctx, req.(*IsBootstrappedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Upgrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Upgrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Upgrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Upgrades(ctx, req.(*UpgradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_Uptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).Uptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_Uptime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).Uptime(ctx, req.(*UptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoService_VMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServiceServer).VMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InfoService_VMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServiceServer).VMs(ctx, req.(*VMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InfoService_ServiceDesc is the grpc.ServiceDesc for InfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "info.v1.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeVersion",
			Handler:    _InfoService_NodeVersion_Handler,
		},
		{
			MethodName: "NodeID",
			Handler:    _InfoService_NodeID_Handler,
		},
		{
			MethodName: "NodeIP",
			Handler:    _InfoService_NodeIP_Handler,
		},
		{
			MethodName: "NetworkID",
			Handler:    _InfoService_NetworkID_Handler,
		},
		{
			MethodName: "NetworkName",
			Handler:    _InfoService_NetworkName_Handler,
		},
		{
			MethodName: "BlockchainID",
			Handler:    _InfoService_BlockchainID_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _InfoService_Peers_Handler,
		},
		{
			MethodName: "IsBootstrapped",
			Handler:    _InfoService_IsBootstrapped_Handler,
		},
		{
			MethodName: "Upgrades",
			Handler:    _InfoService_Upgrades_Handler,
		},
		{
			MethodName: "Uptime",
			Handler:    _InfoService_Uptime_Handler,
		},
		{
			MethodName: "VMs",
			Handler:    _InfoService_VMs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info/v1/service.proto",
}
