// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: info/v1/service.proto

package infov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNodeVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeVersionRequest) Reset() {
	*x = GetNodeVersionRequest{}
	mi := &file_info_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeVersionRequest) ProtoMessage() {}

func (x *GetNodeVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeVersionRequest.ProtoReflect.Descriptor instead.
func (*GetNodeVersionRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{0}
}

type GetNodeVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version            string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	DatabaseVersion    string            `protobuf:"bytes,2,opt,name=database_version,json=databaseVersion,proto3" json:"database_version,omitempty"`
	RpcProtocolVersion uint32            `protobuf:"varint,3,opt,name=rpc_protocol_version,json=rpcProtocolVersion,proto3" json:"rpc_protocol_version,omitempty"`
	GitCommit          string            `protobuf:"bytes,4,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	VmVersions         map[string]string `protobuf:"bytes,5,rep,name=vm_versions,json=vmVersions,proto3" json:"vm_versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetNodeVersionResponse) Reset() {
	*x = GetNodeVersionResponse{}
	mi := &file_info_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeVersionResponse) ProtoMessage() {}

func (x *GetNodeVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeVersionResponse.ProtoReflect.Descriptor instead.
func (*GetNodeVersionResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetNodeVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetNodeVersionResponse) GetDatabaseVersion() string {
	if x != nil {
		return x.DatabaseVersion
	}
	return ""
}

func (x *GetNodeVersionResponse) GetRpcProtocolVersion() uint32 {
	if x != nil {
		return x.RpcProtocolVersion
	}
	return 0
}

func (x *GetNodeVersionResponse) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *GetNodeVersionResponse) GetVmVersions() map[string]string {
	if x != nil {
		return x.VmVersions
	}
	return nil
}

type GetNodeIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeIDRequest) Reset() {
	*x = GetNodeIDRequest{}
	mi := &file_info_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIDRequest) ProtoMessage() {}

func (x *GetNodeIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIDRequest.ProtoReflect.Descriptor instead.
func (*GetNodeIDRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{2}
}

type GetNodeIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodePop []byte `protobuf:"bytes,2,opt,name=node_pop,json=nodePop,proto3" json:"node_pop,omitempty"`
}

func (x *GetNodeIDResponse) Reset() {
	*x = GetNodeIDResponse{}
	mi := &file_info_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIDResponse) ProtoMessage() {}

func (x *GetNodeIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIDResponse.ProtoReflect.Descriptor instead.
func (*GetNodeIDResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetNodeIDResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetNodeIDResponse) GetNodePop() []byte {
	if x != nil {
		return x.NodePop
	}
	return nil
}

type GetNodeIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeIPRequest) Reset() {
	*x = GetNodeIPRequest{}
	mi := &file_info_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIPRequest) ProtoMessage() {}

func (x *GetNodeIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIPRequest.ProtoReflect.Descriptor instead.
func (*GetNodeIPRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{4}
}

type GetNodeIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetNodeIPResponse) Reset() {
	*x = GetNodeIPResponse{}
	mi := &file_info_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeIPResponse) ProtoMessage() {}

func (x *GetNodeIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeIPResponse.ProtoReflect.Descriptor instead.
func (*GetNodeIPResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetNodeIPResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type GetNetworkIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkIDRequest) Reset() {
	*x = GetNetworkIDRequest{}
	mi := &file_info_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkIDRequest) ProtoMessage() {}

func (x *GetNetworkIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkIDRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkIDRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{6}
}

type GetNetworkIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId uint32 `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *GetNetworkIDResponse) Reset() {
	*x = GetNetworkIDResponse{}
	mi := &file_info_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkIDResponse) ProtoMessage() {}

func (x *GetNetworkIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkIDResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkIDResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetNetworkIDResponse) GetNetworkId() uint32 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type GetNetworkNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNetworkNameRequest) Reset() {
	*x = GetNetworkNameRequest{}
	mi := &file_info_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkNameRequest) ProtoMessage() {}

func (x *GetNetworkNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkNameRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkNameRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{8}
}

type GetNetworkNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (x *GetNetworkNameResponse) Reset() {
	*x = GetNetworkNameResponse{}
	mi := &file_info_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkNameResponse) ProtoMessage() {}

func (x *GetNetworkNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkNameResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkNameResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetNetworkNameResponse) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type GetBlockchainIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *GetBlockchainIDRequest) Reset() {
	*x = GetBlockchainIDRequest{}
	mi := &file_info_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainIDRequest) ProtoMessage() {}

func (x *GetBlockchainIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainIDRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainIDRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetBlockchainIDRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type GetBlockchainIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockchainId string `protobuf:"bytes,1,opt,name=blockchain_id,json=blockchainId,proto3" json:"blockchain_id,omitempty"`
}

func (x *GetBlockchainIDResponse) Reset() {
	*x = GetBlockchainIDResponse{}
	mi := &file_info_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockchainIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainIDResponse) ProtoMessage() {}

func (x *GetBlockchainIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainIDResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainIDResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetBlockchainIDResponse) GetBlockchainId() string {
	if x != nil {
		return x.BlockchainId
	}
	return ""
}

type PeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeIds []string `protobuf:"bytes,1,rep,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
}

func (x *PeersRequest) Reset() {
	*x = PeersRequest{}
	mi := &file_info_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersRequest) ProtoMessage() {}

func (x *PeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersRequest.ProtoReflect.Descriptor instead.
func (*PeersRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *PeersRequest) GetNodeIds() []string {
	if x != nil {
		return x.NodeIds
	}
	return nil
}

// PeerInfo provides metadata about a connected peer in the network
type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	PublicIp       string   `protobuf:"bytes,2,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	NodeId         string   `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Version        string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	LastSent       string   `protobuf:"bytes,5,opt,name=last_sent,json=lastSent,proto3" json:"last_sent,omitempty"`
	LastReceived   string   `protobuf:"bytes,6,opt,name=last_received,json=lastReceived,proto3" json:"last_received,omitempty"`
	Benched        []string `protobuf:"bytes,7,rep,name=benched,proto3" json:"benched,omitempty"`
	ObservedUptime uint32   `protobuf:"varint,8,opt,name=observed_uptime,json=observedUptime,proto3" json:"observed_uptime,omitempty"`
	TrackedSubnets []string `protobuf:"bytes,9,rep,name=tracked_subnets,json=trackedSubnets,proto3" json:"tracked_subnets,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_info_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *PeerInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PeerInfo) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *PeerInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PeerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerInfo) GetLastSent() string {
	if x != nil {
		return x.LastSent
	}
	return ""
}

func (x *PeerInfo) GetLastReceived() string {
	if x != nil {
		return x.LastReceived
	}
	return ""
}

func (x *PeerInfo) GetBenched() []string {
	if x != nil {
		return x.Benched
	}
	return nil
}

func (x *PeerInfo) GetObservedUptime() uint32 {
	if x != nil {
		return x.ObservedUptime
	}
	return 0
}

func (x *PeerInfo) GetTrackedSubnets() []string {
	if x != nil {
		return x.TrackedSubnets
	}
	return nil
}

type PeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumPeers uint32      `protobuf:"varint,1,opt,name=num_peers,json=numPeers,proto3" json:"num_peers,omitempty"`
	Peers    []*PeerInfo `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *PeersResponse) Reset() {
	*x = PeersResponse{}
	mi := &file_info_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersResponse) ProtoMessage() {}

func (x *PeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersResponse.ProtoReflect.Descriptor instead.
func (*PeersResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *PeersResponse) GetNumPeers() uint32 {
	if x != nil {
		return x.NumPeers
	}
	return 0
}

func (x *PeersResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type IsBootstrappedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias of the chain
	// Can also be the string representation of the chain's ID
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *IsBootstrappedRequest) Reset() {
	*x = IsBootstrappedRequest{}
	mi := &file_info_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrappedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrappedRequest) ProtoMessage() {}

func (x *IsBootstrappedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrappedRequest.ProtoReflect.Descriptor instead.
func (*IsBootstrappedRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *IsBootstrappedRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

type IsBootstrappedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True iff the chain exists and is done bootstrapping
	IsBootstrapped bool `protobuf:"varint,1,opt,name=is_bootstrapped,json=isBootstrapped,proto3" json:"is_bootstrapped,omitempty"`
}

func (x *IsBootstrappedResponse) Reset() {
	*x = IsBootstrappedResponse{}
	mi := &file_info_v1_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBootstrappedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBootstrappedResponse) ProtoMessage() {}

func (x *IsBootstrappedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBootstrappedResponse.ProtoReflect.Descriptor instead.
func (*IsBootstrappedResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *IsBootstrappedResponse) GetIsBootstrapped() bool {
	if x != nil {
		return x.IsBootstrapped
	}
	return false
}

type UpgradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpgradesRequest) Reset() {
	*x = UpgradesRequest{}
	mi := &file_info_v1_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradesRequest) ProtoMessage() {}

func (x *UpgradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradesRequest.ProtoReflect.Descriptor instead.
func (*UpgradesRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{17}
}

type UpgradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApricotPhase1Time            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=apricot_phase1_time,json=apricotPhase1Time,proto3" json:"apricot_phase1_time,omitempty"`
	ApricotPhase2Time            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=apricot_phase2_time,json=apricotPhase2Time,proto3" json:"apricot_phase2_time,omitempty"`
	ApricotPhase3Time            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=apricot_phase3_time,json=apricotPhase3Time,proto3" json:"apricot_phase3_time,omitempty"`
	ApricotPhase4Time            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=apricot_phase4_time,json=apricotPhase4Time,proto3" json:"apricot_phase4_time,omitempty"`
	ApricotPhase4MinPChainHeight uint64                 `protobuf:"varint,5,opt,name=apricot_phase4_min_p_chain_height,json=apricotPhase4MinPChainHeight,proto3" json:"apricot_phase4_min_p_chain_height,omitempty"`
	ApricotPhase5Time            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=apricot_phase5_time,json=apricotPhase5Time,proto3" json:"apricot_phase5_time,omitempty"`
	ApricotPhasePre6Time         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=apricot_phase_pre6_time,json=apricotPhasePre6Time,proto3" json:"apricot_phase_pre6_time,omitempty"`
	ApricotPhase6Time            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=apricot_phase6_time,json=apricotPhase6Time,proto3" json:"apricot_phase6_time,omitempty"`
	ApricotPhasePost6Time        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=apricot_phase_post6_time,json=apricotPhasePost6Time,proto3" json:"apricot_phase_post6_time,omitempty"`
	BanffTime                    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=banff_time,json=banffTime,proto3" json:"banff_time,omitempty"`
	CortinaTime                  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=cortina_time,json=cortinaTime,proto3" json:"cortina_time,omitempty"`
	CortinaXChainStopVertexId    string                 `protobuf:"bytes,12,opt,name=cortina_x_chain_stop_vertex_id,json=cortinaXChainStopVertexId,proto3" json:"cortina_x_chain_stop_vertex_id,omitempty"`
	DurangoTime                  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=durango_time,json=durangoTime,proto3" json:"durango_time,omitempty"`
	EtnaTime                     *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=etna_time,json=etnaTime,proto3" json:"etna_time,omitempty"`
	FortunaTime                  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=fortuna_time,json=fortunaTime,proto3" json:"fortuna_time,omitempty"`
	GraniteTime                  *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=granite_time,json=graniteTime,proto3" json:"granite_time,omitempty"`
}

func (x *UpgradesResponse) Reset() {
	*x = UpgradesResponse{}
	mi := &file_info_v1_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpgradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradesResponse) ProtoMessage() {}

func (x *UpgradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradesResponse.ProtoReflect.Descriptor instead.
func (*UpgradesResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpgradesResponse) GetApricotPhase1Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase1Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhase2Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase2Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhase3Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase3Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhase4Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase4Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhase4MinPChainHeight() uint64 {
	if x != nil {
		return x.ApricotPhase4MinPChainHeight
	}
	return 0
}

func (x *UpgradesResponse) GetApricotPhase5Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase5Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhasePre6Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhasePre6Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhase6Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhase6Time
	}
	return nil
}

func (x *UpgradesResponse) GetApricotPhasePost6Time() *timestamppb.Timestamp {
	if x != nil {
		return x.ApricotPhasePost6Time
	}
	return nil
}

func (x *UpgradesResponse) GetBanffTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BanffTime
	}
	return nil
}

func (x *UpgradesResponse) GetCortinaTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CortinaTime
	}
	return nil
}

func (x *UpgradesResponse) GetCortinaXChainStopVertexId() string {
	if x != nil {
		return x.CortinaXChainStopVertexId
	}
	return ""
}

func (x *UpgradesResponse) GetDurangoTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DurangoTime
	}
	return nil
}

func (x *UpgradesResponse) GetEtnaTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EtnaTime
	}
	return nil
}

func (x *UpgradesResponse) GetFortunaTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FortunaTime
	}
	return nil
}

func (x *UpgradesResponse) GetGraniteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GraniteTime
	}
	return nil
}

type UptimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UptimeRequest) Reset() {
	*x = UptimeRequest{}
	mi := &file_info_v1_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeRequest) ProtoMessage() {}

func (x *UptimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeRequest.ProtoReflect.Descriptor instead.
func (*UptimeRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{19}
}

type UptimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardingStakePercentage  float64 `protobuf:"fixed64,1,opt,name=rewarding_stake_percentage,json=rewardingStakePercentage,proto3" json:"rewarding_stake_percentage,omitempty"`
	WeightedAveragePercentage float64 `protobuf:"fixed64,2,opt,name=weighted_average_percentage,json=weightedAveragePercentage,proto3" json:"weighted_average_percentage,omitempty"`
}

func (x *UptimeResponse) Reset() {
	*x = UptimeResponse{}
	mi := &file_info_v1_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeResponse) ProtoMessage() {}

func (x *UptimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeResponse.ProtoReflect.Descriptor instead.
func (*UptimeResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *UptimeResponse) GetRewardingStakePercentage() float64 {
	if x != nil {
		return x.RewardingStakePercentage
	}
	return 0
}

func (x *UptimeResponse) GetWeightedAveragePercentage() float64 {
	if x != nil {
		return x.WeightedAveragePercentage
	}
	return 0
}

type GetVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVMsRequest) Reset() {
	*x = GetVMsRequest{}
	mi := &file_info_v1_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMsRequest) ProtoMessage() {}

func (x *GetVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMsRequest.ProtoReflect.Descriptor instead.
func (*GetVMsRequest) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{21}
}

type GetVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vms map[string]*VMAliases `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Fxs map[string]string     `protobuf:"bytes,2,rep,name=fxs,proto3" json:"fxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetVMsResponse) Reset() {
	*x = GetVMsResponse{}
	mi := &file_info_v1_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMsResponse) ProtoMessage() {}

func (x *GetVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMsResponse.ProtoReflect.Descriptor instead.
func (*GetVMsResponse) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetVMsResponse) GetVms() map[string]*VMAliases {
	if x != nil {
		return x.Vms
	}
	return nil
}

func (x *GetVMsResponse) GetFxs() map[string]string {
	if x != nil {
		return x.Fxs
	}
	return nil
}

type VMAliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aliases []string `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *VMAliases) Reset() {
	*x = VMAliases{}
	mi := &file_info_v1_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMAliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMAliases) ProtoMessage() {}

func (x *VMAliases) ProtoReflect() protoreflect.Message {
	mi := &file_info_v1_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMAliases.ProtoReflect.Descriptor instead.
func (*VMAliases) Descriptor() ([]byte, []int) {
	return file_info_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *VMAliases) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

var File_info_v1_service_proto protoreflect.FileDescriptor

var file_info_v1_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x70,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x76,
	0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x56, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x76, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x56, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x70, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x55, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0d,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x22, 0x41, 0x0a, 0x16, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfe, 0x08, 0x0a, 0x10, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x13, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x31, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x31, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x70, 0x72,
	0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x32, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x11, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x32, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x33, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x33, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x34, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x61, 0x70, 0x72, 0x69,
	0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x21, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x34, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f,
	0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x34, 0x4d, 0x69, 0x6e, 0x50, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f,
	0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x35, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x35, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x36, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x14, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65,
	0x36, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x36, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x36, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x18, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x36, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x15, 0x61, 0x70, 0x72, 0x69, 0x63, 0x6f, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x36, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x66, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x66, 0x66, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x61, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x1e, 0x63, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x61, 0x5f, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x61, 0x58, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x74, 0x6e, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x65, 0x74, 0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x66,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x72,
	0x61, 0x6e, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x55,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x1a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x76, 0x6d, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x66, 0x78, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x78, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x66, 0x78, 0x73, 0x1a, 0x4a, 0x0a, 0x08, 0x56, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x4d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x46, 0x78, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x09, 0x56,
	0x4d, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x32, 0xa0, 0x06, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x44, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x49,
	0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1e, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x56, 0x4d, 0x73, 0x12, 0x16, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x61, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x61, 0x76, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70,
	0x62, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x6e, 0x66, 0x6f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_v1_service_proto_rawDescOnce sync.Once
	file_info_v1_service_proto_rawDescData = file_info_v1_service_proto_rawDesc
)

func file_info_v1_service_proto_rawDescGZIP() []byte {
	file_info_v1_service_proto_rawDescOnce.Do(func() {
		file_info_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_v1_service_proto_rawDescData)
	})
	return file_info_v1_service_proto_rawDescData
}

var file_info_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_info_v1_service_proto_goTypes = []any{
	(*GetNodeVersionRequest)(nil),   // 0: info.v1.GetNodeVersionRequest
	(*GetNodeVersionResponse)(nil),  // 1: info.v1.GetNodeVersionResponse
	(*GetNodeIDRequest)(nil),        // 2: info.v1.GetNodeIDRequest
	(*GetNodeIDResponse)(nil),       // 3: info.v1.GetNodeIDResponse
	(*GetNodeIPRequest)(nil),        // 4: info.v1.GetNodeIPRequest
	(*GetNodeIPResponse)(nil),       // 5: info.v1.GetNodeIPResponse
	(*GetNetworkIDRequest)(nil),     // 6: info.v1.GetNetworkIDRequest
	(*GetNetworkIDResponse)(nil),    // 7: info.v1.GetNetworkIDResponse
	(*GetNetworkNameRequest)(nil),   // 8: info.v1.GetNetworkNameRequest
	(*GetNetworkNameResponse)(nil),  // 9: info.v1.GetNetworkNameResponse
	(*GetBlockchainIDRequest)(nil),  // 10: info.v1.GetBlockchainIDRequest
	(*GetBlockchainIDResponse)(nil), // 11: info.v1.GetBlockchainIDResponse
	(*PeersRequest)(nil),            // 12: info.v1.PeersRequest
	(*PeerInfo)(nil),                // 13: info.v1.PeerInfo
	(*PeersResponse)(nil),           // 14: info.v1.PeersResponse
	(*IsBootstrappedRequest)(nil),   // 15: info.v1.IsBootstrappedRequest
	(*IsBootstrappedResponse)(nil),  // 16: info.v1.IsBootstrappedResponse
	(*UpgradesRequest)(nil),         // 17: info.v1.UpgradesRequest
	(*UpgradesResponse)(nil),        // 18: info.v1.UpgradesResponse
	(*UptimeRequest)(nil),           // 19: info.v1.UptimeRequest
	(*UptimeResponse)(nil),          // 20: info.v1.UptimeResponse
	(*GetVMsRequest)(nil),           // 21: info.v1.GetVMsRequest
	(*GetVMsResponse)(nil),          // 22: info.v1.GetVMsResponse
	(*VMAliases)(nil),               // 23: info.v1.VMAliases
	nil,                             // 24: info.v1.GetNodeVersionResponse.VmVersionsEntry
	nil,                             // 25: info.v1.GetVMsResponse.VmsEntry
	nil,                             // 26: info.v1.GetVMsResponse.FxsEntry
	(*timestamppb.Timestamp)(nil),   // 27: google.protobuf.Timestamp
}
var file_info_v1_service_proto_depIdxs = []int32{
	24, // 0: info.v1.GetNodeVersionResponse.vm_versions:type_name -> info.v1.GetNodeVersionResponse.VmVersionsEntry
	13, // 1: info.v1.PeersResponse.peers:type_name -> info.v1.PeerInfo
	27, // 2: info.v1.UpgradesResponse.apricot_phase1_time:type_name -> google.protobuf.Timestamp
	27, // 3: info.v1.UpgradesResponse.apricot_phase2_time:type_name -> google.protobuf.Timestamp
	27, // 4: info.v1.UpgradesResponse.apricot_phase3_time:type_name -> google.protobuf.Timestamp
	27, // 5: info.v1.UpgradesResponse.apricot_phase4_time:type_name -> google.protobuf.Timestamp
	27, // 6: info.v1.UpgradesResponse.apricot_phase5_time:type_name -> google.protobuf.Timestamp
	27, // 7: info.v1.UpgradesResponse.apricot_phase_pre6_time:type_name -> google.protobuf.Timestamp
	27, // 8: info.v1.UpgradesResponse.apricot_phase6_time:type_name -> google.protobuf.Timestamp
	27, // 9: info.v1.UpgradesResponse.apricot_phase_post6_time:type_name -> google.protobuf.Timestamp
	27, // 10: info.v1.UpgradesResponse.banff_time:type_name -> google.protobuf.Timestamp
	27, // 11: info.v1.UpgradesResponse.cortina_time:type_name -> google.protobuf.Timestamp
	27, // 12: info.v1.UpgradesResponse.durango_time:type_name -> google.protobuf.Timestamp
	27, // 13: info.v1.UpgradesResponse.etna_time:type_name -> google.protobuf.Timestamp
	27, // 14: info.v1.UpgradesResponse.fortuna_time:type_name -> google.protobuf.Timestamp
	27, // 15: info.v1.UpgradesResponse.granite_time:type_name -> google.protobuf.Timestamp
	25, // 16: info.v1.GetVMsResponse.vms:type_name -> info.v1.GetVMsResponse.VmsEntry
	26, // 17: info.v1.GetVMsResponse.fxs:type_name -> info.v1.GetVMsResponse.FxsEntry
	23, // 18: info.v1.GetVMsResponse.VmsEntry.value:type_name -> info.v1.VMAliases
	0,  // 19: info.v1.InfoService.GetNodeVersion:input_type -> info.v1.GetNodeVersionRequest
	2,  // 20: info.v1.InfoService.GetNodeID:input_type -> info.v1.GetNodeIDRequest
	4,  // 21: info.v1.InfoService.GetNodeIP:input_type -> info.v1.GetNodeIPRequest
	6,  // 22: info.v1.InfoService.GetNetworkID:input_type -> info.v1.GetNetworkIDRequest
	8,  // 23: info.v1.InfoService.GetNetworkName:input_type -> info.v1.GetNetworkNameRequest
	10, // 24: info.v1.InfoService.GetBlockchainID:input_type -> info.v1.GetBlockchainIDRequest
	12, // 25: info.v1.InfoService.Peers:input_type -> info.v1.PeersRequest
	15, // 26: info.v1.InfoService.IsBootstrapped:input_type -> info.v1.IsBootstrappedRequest
	17, // 27: info.v1.InfoService.Upgrades:input_type -> info.v1.UpgradesRequest
	19, // 28: info.v1.InfoService.Uptime:input_type -> info.v1.UptimeRequest
	21, // 29: info.v1.InfoService.GetVMs:input_type -> info.v1.GetVMsRequest
	1,  // 30: info.v1.InfoService.GetNodeVersion:output_type -> info.v1.GetNodeVersionResponse
	3,  // 31: info.v1.InfoService.GetNodeID:output_type -> info.v1.GetNodeIDResponse
	5,  // 32: info.v1.InfoService.GetNodeIP:output_type -> info.v1.GetNodeIPResponse
	7,  // 33: info.v1.InfoService.GetNetworkID:output_type -> info.v1.GetNetworkIDResponse
	9,  // 34: info.v1.InfoService.GetNetworkName:output_type -> info.v1.GetNetworkNameResponse
	11, // 35: info.v1.InfoService.GetBlockchainID:output_type -> info.v1.GetBlockchainIDResponse
	14, // 36: info.v1.InfoService.Peers:output_type -> info.v1.PeersResponse
	16, // 37: info.v1.InfoService.IsBootstrapped:output_type -> info.v1.IsBootstrappedResponse
	18, // 38: info.v1.InfoService.Upgrades:output_type -> info.v1.UpgradesResponse
	20, // 39: info.v1.InfoService.Uptime:output_type -> info.v1.UptimeResponse
	22, // 40: info.v1.InfoService.GetVMs:output_type -> info.v1.GetVMsResponse
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_info_v1_service_proto_init() }
func file_info_v1_service_proto_init() {
	if File_info_v1_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_info_v1_service_proto_goTypes,
		DependencyIndexes: file_info_v1_service_proto_depIdxs,
		MessageInfos:      file_info_v1_service_proto_msgTypes,
	}.Build()
	File_info_v1_service_proto = out.File
	file_info_v1_service_proto_rawDesc = nil
	file_info_v1_service_proto_goTypes = nil
	file_info_v1_service_proto_depIdxs = nil
}
