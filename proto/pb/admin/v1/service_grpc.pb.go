// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: admin/v1/service.proto

package adminv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_StartCPUProfiler_FullMethodName = "/admin.v1.AdminService/StartCPUProfiler"
	AdminService_StopCPUProfiler_FullMethodName  = "/admin.v1.AdminService/StopCPUProfiler"
	AdminService_MemoryProfile_FullMethodName    = "/admin.v1.AdminService/MemoryProfile"
	AdminService_LockProfile_FullMethodName      = "/admin.v1.AdminService/LockProfile"
	AdminService_Alias_FullMethodName            = "/admin.v1.AdminService/Alias"
	AdminService_AliasChain_FullMethodName       = "/admin.v1.AdminService/AliasChain"
	AdminService_GetChainAliases_FullMethodName  = "/admin.v1.AdminService/GetChainAliases"
	AdminService_Stacktrace_FullMethodName       = "/admin.v1.AdminService/Stacktrace"
	AdminService_SetLoggerLevel_FullMethodName   = "/admin.v1.AdminService/SetLoggerLevel"
	AdminService_GetLoggerLevel_FullMethodName   = "/admin.v1.AdminService/GetLoggerLevel"
	AdminService_GetConfig_FullMethodName        = "/admin.v1.AdminService/GetConfig"
	AdminService_DBGet_FullMethodName            = "/admin.v1.AdminService/DBGet"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	StartCPUProfiler(ctx context.Context, in *StartCPUProfilerRequest, opts ...grpc.CallOption) (*StartCPUProfilerResponse, error)
	StopCPUProfiler(ctx context.Context, in *StopCPUProfilerRequest, opts ...grpc.CallOption) (*StopCPUProfilerResponse, error)
	MemoryProfile(ctx context.Context, in *MemoryProfileRequest, opts ...grpc.CallOption) (*MemoryProfileResponse, error)
	LockProfile(ctx context.Context, in *LockProfileRequest, opts ...grpc.CallOption) (*LockProfileResponse, error)
	Alias(ctx context.Context, in *AliasRequest, opts ...grpc.CallOption) (*AliasResponse, error)
	AliasChain(ctx context.Context, in *AliasChainRequest, opts ...grpc.CallOption) (*AliasChainResponse, error)
	GetChainAliases(ctx context.Context, in *GetChainAliasesRequest, opts ...grpc.CallOption) (*GetChainAliasesResponse, error)
	Stacktrace(ctx context.Context, in *StacktraceRequest, opts ...grpc.CallOption) (*StacktraceResponse, error)
	SetLoggerLevel(ctx context.Context, in *SetLoggerLevelRequest, opts ...grpc.CallOption) (*SetLoggerLevelResponse, error)
	GetLoggerLevel(ctx context.Context, in *GetLoggerLevelRequest, opts ...grpc.CallOption) (*GetLoggerLevelResponse, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	DBGet(ctx context.Context, in *DBGetRequest, opts ...grpc.CallOption) (*DBGetResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) StartCPUProfiler(ctx context.Context, in *StartCPUProfilerRequest, opts ...grpc.CallOption) (*StartCPUProfilerResponse, error) {
	out := new(StartCPUProfilerResponse)
	err := c.cc.Invoke(ctx, AdminService_StartCPUProfiler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) StopCPUProfiler(ctx context.Context, in *StopCPUProfilerRequest, opts ...grpc.CallOption) (*StopCPUProfilerResponse, error) {
	out := new(StopCPUProfilerResponse)
	err := c.cc.Invoke(ctx, AdminService_StopCPUProfiler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) MemoryProfile(ctx context.Context, in *MemoryProfileRequest, opts ...grpc.CallOption) (*MemoryProfileResponse, error) {
	out := new(MemoryProfileResponse)
	err := c.cc.Invoke(ctx, AdminService_MemoryProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LockProfile(ctx context.Context, in *LockProfileRequest, opts ...grpc.CallOption) (*LockProfileResponse, error) {
	out := new(LockProfileResponse)
	err := c.cc.Invoke(ctx, AdminService_LockProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Alias(ctx context.Context, in *AliasRequest, opts ...grpc.CallOption) (*AliasResponse, error) {
	out := new(AliasResponse)
	err := c.cc.Invoke(ctx, AdminService_Alias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AliasChain(ctx context.Context, in *AliasChainRequest, opts ...grpc.CallOption) (*AliasChainResponse, error) {
	out := new(AliasChainResponse)
	err := c.cc.Invoke(ctx, AdminService_AliasChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetChainAliases(ctx context.Context, in *GetChainAliasesRequest, opts ...grpc.CallOption) (*GetChainAliasesResponse, error) {
	out := new(GetChainAliasesResponse)
	err := c.cc.Invoke(ctx, AdminService_GetChainAliases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Stacktrace(ctx context.Context, in *StacktraceRequest, opts ...grpc.CallOption) (*StacktraceResponse, error) {
	out := new(StacktraceResponse)
	err := c.cc.Invoke(ctx, AdminService_Stacktrace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) SetLoggerLevel(ctx context.Context, in *SetLoggerLevelRequest, opts ...grpc.CallOption) (*SetLoggerLevelResponse, error) {
	out := new(SetLoggerLevelResponse)
	err := c.cc.Invoke(ctx, AdminService_SetLoggerLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetLoggerLevel(ctx context.Context, in *GetLoggerLevelRequest, opts ...grpc.CallOption) (*GetLoggerLevelResponse, error) {
	out := new(GetLoggerLevelResponse)
	err := c.cc.Invoke(ctx, AdminService_GetLoggerLevel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, AdminService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DBGet(ctx context.Context, in *DBGetRequest, opts ...grpc.CallOption) (*DBGetResponse, error) {
	out := new(DBGetResponse)
	err := c.cc.Invoke(ctx, AdminService_DBGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	StartCPUProfiler(context.Context, *StartCPUProfilerRequest) (*StartCPUProfilerResponse, error)
	StopCPUProfiler(context.Context, *StopCPUProfilerRequest) (*StopCPUProfilerResponse, error)
	MemoryProfile(context.Context, *MemoryProfileRequest) (*MemoryProfileResponse, error)
	LockProfile(context.Context, *LockProfileRequest) (*LockProfileResponse, error)
	Alias(context.Context, *AliasRequest) (*AliasResponse, error)
	AliasChain(context.Context, *AliasChainRequest) (*AliasChainResponse, error)
	GetChainAliases(context.Context, *GetChainAliasesRequest) (*GetChainAliasesResponse, error)
	Stacktrace(context.Context, *StacktraceRequest) (*StacktraceResponse, error)
	SetLoggerLevel(context.Context, *SetLoggerLevelRequest) (*SetLoggerLevelResponse, error)
	GetLoggerLevel(context.Context, *GetLoggerLevelRequest) (*GetLoggerLevelResponse, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	DBGet(context.Context, *DBGetRequest) (*DBGetResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) StartCPUProfiler(context.Context, *StartCPUProfilerRequest) (*StartCPUProfilerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCPUProfiler not implemented")
}
func (UnimplementedAdminServiceServer) StopCPUProfiler(context.Context, *StopCPUProfilerRequest) (*StopCPUProfilerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCPUProfiler not implemented")
}
func (UnimplementedAdminServiceServer) MemoryProfile(context.Context, *MemoryProfileRequest) (*MemoryProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemoryProfile not implemented")
}
func (UnimplementedAdminServiceServer) LockProfile(context.Context, *LockProfileRequest) (*LockProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockProfile not implemented")
}
func (UnimplementedAdminServiceServer) Alias(context.Context, *AliasRequest) (*AliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alias not implemented")
}
func (UnimplementedAdminServiceServer) AliasChain(context.Context, *AliasChainRequest) (*AliasChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AliasChain not implemented")
}
func (UnimplementedAdminServiceServer) GetChainAliases(context.Context, *GetChainAliasesRequest) (*GetChainAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainAliases not implemented")
}
func (UnimplementedAdminServiceServer) Stacktrace(context.Context, *StacktraceRequest) (*StacktraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stacktrace not implemented")
}
func (UnimplementedAdminServiceServer) SetLoggerLevel(context.Context, *SetLoggerLevelRequest) (*SetLoggerLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoggerLevel not implemented")
}
func (UnimplementedAdminServiceServer) GetLoggerLevel(context.Context, *GetLoggerLevelRequest) (*GetLoggerLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggerLevel not implemented")
}
func (UnimplementedAdminServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAdminServiceServer) DBGet(context.Context, *DBGetRequest) (*DBGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DBGet not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_StartCPUProfiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCPUProfilerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).StartCPUProfiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_StartCPUProfiler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).StartCPUProfiler(ctx, req.(*StartCPUProfilerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_StopCPUProfiler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCPUProfilerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).StopCPUProfiler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_StopCPUProfiler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).StopCPUProfiler(ctx, req.(*StopCPUProfilerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_MemoryProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).MemoryProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_MemoryProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).MemoryProfile(ctx, req.(*MemoryProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LockProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LockProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_LockProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LockProfile(ctx, req.(*LockProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Alias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Alias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Alias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Alias(ctx, req.(*AliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AliasChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AliasChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AliasChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AliasChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AliasChain(ctx, req.(*AliasChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetChainAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetChainAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetChainAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetChainAliases(ctx, req.(*GetChainAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Stacktrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StacktraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Stacktrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Stacktrace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Stacktrace(ctx, req.(*StacktraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_SetLoggerLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoggerLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).SetLoggerLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_SetLoggerLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).SetLoggerLevel(ctx, req.(*SetLoggerLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetLoggerLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoggerLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetLoggerLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetLoggerLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetLoggerLevel(ctx, req.(*GetLoggerLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DBGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DBGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DBGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DBGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DBGet(ctx, req.(*DBGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCPUProfiler",
			Handler:    _AdminService_StartCPUProfiler_Handler,
		},
		{
			MethodName: "StopCPUProfiler",
			Handler:    _AdminService_StopCPUProfiler_Handler,
		},
		{
			MethodName: "MemoryProfile",
			Handler:    _AdminService_MemoryProfile_Handler,
		},
		{
			MethodName: "LockProfile",
			Handler:    _AdminService_LockProfile_Handler,
		},
		{
			MethodName: "Alias",
			Handler:    _AdminService_Alias_Handler,
		},
		{
			MethodName: "AliasChain",
			Handler:    _AdminService_AliasChain_Handler,
		},
		{
			MethodName: "GetChainAliases",
			Handler:    _AdminService_GetChainAliases_Handler,
		},
		{
			MethodName: "Stacktrace",
			Handler:    _AdminService_Stacktrace_Handler,
		},
		{
			MethodName: "SetLoggerLevel",
			Handler:    _AdminService_SetLoggerLevel_Handler,
		},
		{
			MethodName: "GetLoggerLevel",
			Handler:    _AdminService_GetLoggerLevel_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _AdminService_GetConfig_Handler,
		},
		{
			MethodName: "DBGet",
			Handler:    _AdminService_DBGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/service.proto",
}
