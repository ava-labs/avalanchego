// Copyright (C) 2019-2024, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/service.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ava-labs/avalanchego/proto/pb/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "admin.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceStartCPUProfilerProcedure is the fully-qualified name of the AdminService's
	// StartCPUProfiler RPC.
	AdminServiceStartCPUProfilerProcedure = "/admin.v1.AdminService/StartCPUProfiler"
	// AdminServiceStopCPUProfilerProcedure is the fully-qualified name of the AdminService's
	// StopCPUProfiler RPC.
	AdminServiceStopCPUProfilerProcedure = "/admin.v1.AdminService/StopCPUProfiler"
	// AdminServiceMemoryProfileProcedure is the fully-qualified name of the AdminService's
	// MemoryProfile RPC.
	AdminServiceMemoryProfileProcedure = "/admin.v1.AdminService/MemoryProfile"
	// AdminServiceLockProfileProcedure is the fully-qualified name of the AdminService's LockProfile
	// RPC.
	AdminServiceLockProfileProcedure = "/admin.v1.AdminService/LockProfile"
	// AdminServiceAliasProcedure is the fully-qualified name of the AdminService's Alias RPC.
	AdminServiceAliasProcedure = "/admin.v1.AdminService/Alias"
	// AdminServiceAliasChainProcedure is the fully-qualified name of the AdminService's AliasChain RPC.
	AdminServiceAliasChainProcedure = "/admin.v1.AdminService/AliasChain"
	// AdminServiceChainAliasesProcedure is the fully-qualified name of the AdminService's ChainAliases
	// RPC.
	AdminServiceChainAliasesProcedure = "/admin.v1.AdminService/ChainAliases"
	// AdminServiceStacktraceProcedure is the fully-qualified name of the AdminService's Stacktrace RPC.
	AdminServiceStacktraceProcedure = "/admin.v1.AdminService/Stacktrace"
	// AdminServiceSetLoggerLevelProcedure is the fully-qualified name of the AdminService's
	// SetLoggerLevel RPC.
	AdminServiceSetLoggerLevelProcedure = "/admin.v1.AdminService/SetLoggerLevel"
	// AdminServiceLoggerLevelProcedure is the fully-qualified name of the AdminService's LoggerLevel
	// RPC.
	AdminServiceLoggerLevelProcedure = "/admin.v1.AdminService/LoggerLevel"
	// AdminServiceConfigProcedure is the fully-qualified name of the AdminService's Config RPC.
	AdminServiceConfigProcedure = "/admin.v1.AdminService/Config"
	// AdminServiceDBProcedure is the fully-qualified name of the AdminService's DB RPC.
	AdminServiceDBProcedure = "/admin.v1.AdminService/DB"
)

// AdminServiceClient is a client for the admin.v1.AdminService service.
type AdminServiceClient interface {
	StartCPUProfiler(context.Context, *connect.Request[v1.StartCPUProfilerRequest]) (*connect.Response[v1.StartCPUProfilerResponse], error)
	StopCPUProfiler(context.Context, *connect.Request[v1.StopCPUProfilerRequest]) (*connect.Response[v1.StopCPUProfilerResponse], error)
	MemoryProfile(context.Context, *connect.Request[v1.MemoryProfileRequest]) (*connect.Response[v1.MemoryProfileResponse], error)
	LockProfile(context.Context, *connect.Request[v1.LockProfileRequest]) (*connect.Response[v1.LockProfileResponse], error)
	Alias(context.Context, *connect.Request[v1.AliasRequest]) (*connect.Response[v1.AliasResponse], error)
	AliasChain(context.Context, *connect.Request[v1.AliasChainRequest]) (*connect.Response[v1.AliasChainResponse], error)
	ChainAliases(context.Context, *connect.Request[v1.ChainAliasesRequest]) (*connect.Response[v1.ChainAliasesResponse], error)
	Stacktrace(context.Context, *connect.Request[v1.StacktraceRequest]) (*connect.Response[v1.StacktraceResponse], error)
	SetLoggerLevel(context.Context, *connect.Request[v1.SetLoggerLevelRequest]) (*connect.Response[v1.SetLoggerLevelResponse], error)
	LoggerLevel(context.Context, *connect.Request[v1.LoggerLevelRequest]) (*connect.Response[v1.LoggerLevelResponse], error)
	Config(context.Context, *connect.Request[v1.ConfigRequest]) (*connect.Response[v1.ConfigResponse], error)
	DB(context.Context, *connect.Request[v1.DBRequest]) (*connect.Response[v1.DBResponse], error)
}

// NewAdminServiceClient constructs a client for the admin.v1.AdminService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	adminServiceMethods := v1.File_admin_v1_service_proto.Services().ByName("AdminService").Methods()
	return &adminServiceClient{
		startCPUProfiler: connect.NewClient[v1.StartCPUProfilerRequest, v1.StartCPUProfilerResponse](
			httpClient,
			baseURL+AdminServiceStartCPUProfilerProcedure,
			connect.WithSchema(adminServiceMethods.ByName("StartCPUProfiler")),
			connect.WithClientOptions(opts...),
		),
		stopCPUProfiler: connect.NewClient[v1.StopCPUProfilerRequest, v1.StopCPUProfilerResponse](
			httpClient,
			baseURL+AdminServiceStopCPUProfilerProcedure,
			connect.WithSchema(adminServiceMethods.ByName("StopCPUProfiler")),
			connect.WithClientOptions(opts...),
		),
		memoryProfile: connect.NewClient[v1.MemoryProfileRequest, v1.MemoryProfileResponse](
			httpClient,
			baseURL+AdminServiceMemoryProfileProcedure,
			connect.WithSchema(adminServiceMethods.ByName("MemoryProfile")),
			connect.WithClientOptions(opts...),
		),
		lockProfile: connect.NewClient[v1.LockProfileRequest, v1.LockProfileResponse](
			httpClient,
			baseURL+AdminServiceLockProfileProcedure,
			connect.WithSchema(adminServiceMethods.ByName("LockProfile")),
			connect.WithClientOptions(opts...),
		),
		alias: connect.NewClient[v1.AliasRequest, v1.AliasResponse](
			httpClient,
			baseURL+AdminServiceAliasProcedure,
			connect.WithSchema(adminServiceMethods.ByName("Alias")),
			connect.WithClientOptions(opts...),
		),
		aliasChain: connect.NewClient[v1.AliasChainRequest, v1.AliasChainResponse](
			httpClient,
			baseURL+AdminServiceAliasChainProcedure,
			connect.WithSchema(adminServiceMethods.ByName("AliasChain")),
			connect.WithClientOptions(opts...),
		),
		chainAliases: connect.NewClient[v1.ChainAliasesRequest, v1.ChainAliasesResponse](
			httpClient,
			baseURL+AdminServiceChainAliasesProcedure,
			connect.WithSchema(adminServiceMethods.ByName("ChainAliases")),
			connect.WithClientOptions(opts...),
		),
		stacktrace: connect.NewClient[v1.StacktraceRequest, v1.StacktraceResponse](
			httpClient,
			baseURL+AdminServiceStacktraceProcedure,
			connect.WithSchema(adminServiceMethods.ByName("Stacktrace")),
			connect.WithClientOptions(opts...),
		),
		setLoggerLevel: connect.NewClient[v1.SetLoggerLevelRequest, v1.SetLoggerLevelResponse](
			httpClient,
			baseURL+AdminServiceSetLoggerLevelProcedure,
			connect.WithSchema(adminServiceMethods.ByName("SetLoggerLevel")),
			connect.WithClientOptions(opts...),
		),
		loggerLevel: connect.NewClient[v1.LoggerLevelRequest, v1.LoggerLevelResponse](
			httpClient,
			baseURL+AdminServiceLoggerLevelProcedure,
			connect.WithSchema(adminServiceMethods.ByName("LoggerLevel")),
			connect.WithClientOptions(opts...),
		),
		config: connect.NewClient[v1.ConfigRequest, v1.ConfigResponse](
			httpClient,
			baseURL+AdminServiceConfigProcedure,
			connect.WithSchema(adminServiceMethods.ByName("Config")),
			connect.WithClientOptions(opts...),
		),
		dB: connect.NewClient[v1.DBRequest, v1.DBResponse](
			httpClient,
			baseURL+AdminServiceDBProcedure,
			connect.WithSchema(adminServiceMethods.ByName("DB")),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	startCPUProfiler *connect.Client[v1.StartCPUProfilerRequest, v1.StartCPUProfilerResponse]
	stopCPUProfiler  *connect.Client[v1.StopCPUProfilerRequest, v1.StopCPUProfilerResponse]
	memoryProfile    *connect.Client[v1.MemoryProfileRequest, v1.MemoryProfileResponse]
	lockProfile      *connect.Client[v1.LockProfileRequest, v1.LockProfileResponse]
	alias            *connect.Client[v1.AliasRequest, v1.AliasResponse]
	aliasChain       *connect.Client[v1.AliasChainRequest, v1.AliasChainResponse]
	chainAliases     *connect.Client[v1.ChainAliasesRequest, v1.ChainAliasesResponse]
	stacktrace       *connect.Client[v1.StacktraceRequest, v1.StacktraceResponse]
	setLoggerLevel   *connect.Client[v1.SetLoggerLevelRequest, v1.SetLoggerLevelResponse]
	loggerLevel      *connect.Client[v1.LoggerLevelRequest, v1.LoggerLevelResponse]
	config           *connect.Client[v1.ConfigRequest, v1.ConfigResponse]
	dB               *connect.Client[v1.DBRequest, v1.DBResponse]
}

// StartCPUProfiler calls admin.v1.AdminService.StartCPUProfiler.
func (c *adminServiceClient) StartCPUProfiler(ctx context.Context, req *connect.Request[v1.StartCPUProfilerRequest]) (*connect.Response[v1.StartCPUProfilerResponse], error) {
	return c.startCPUProfiler.CallUnary(ctx, req)
}

// StopCPUProfiler calls admin.v1.AdminService.StopCPUProfiler.
func (c *adminServiceClient) StopCPUProfiler(ctx context.Context, req *connect.Request[v1.StopCPUProfilerRequest]) (*connect.Response[v1.StopCPUProfilerResponse], error) {
	return c.stopCPUProfiler.CallUnary(ctx, req)
}

// MemoryProfile calls admin.v1.AdminService.MemoryProfile.
func (c *adminServiceClient) MemoryProfile(ctx context.Context, req *connect.Request[v1.MemoryProfileRequest]) (*connect.Response[v1.MemoryProfileResponse], error) {
	return c.memoryProfile.CallUnary(ctx, req)
}

// LockProfile calls admin.v1.AdminService.LockProfile.
func (c *adminServiceClient) LockProfile(ctx context.Context, req *connect.Request[v1.LockProfileRequest]) (*connect.Response[v1.LockProfileResponse], error) {
	return c.lockProfile.CallUnary(ctx, req)
}

// Alias calls admin.v1.AdminService.Alias.
func (c *adminServiceClient) Alias(ctx context.Context, req *connect.Request[v1.AliasRequest]) (*connect.Response[v1.AliasResponse], error) {
	return c.alias.CallUnary(ctx, req)
}

// AliasChain calls admin.v1.AdminService.AliasChain.
func (c *adminServiceClient) AliasChain(ctx context.Context, req *connect.Request[v1.AliasChainRequest]) (*connect.Response[v1.AliasChainResponse], error) {
	return c.aliasChain.CallUnary(ctx, req)
}

// ChainAliases calls admin.v1.AdminService.ChainAliases.
func (c *adminServiceClient) ChainAliases(ctx context.Context, req *connect.Request[v1.ChainAliasesRequest]) (*connect.Response[v1.ChainAliasesResponse], error) {
	return c.chainAliases.CallUnary(ctx, req)
}

// Stacktrace calls admin.v1.AdminService.Stacktrace.
func (c *adminServiceClient) Stacktrace(ctx context.Context, req *connect.Request[v1.StacktraceRequest]) (*connect.Response[v1.StacktraceResponse], error) {
	return c.stacktrace.CallUnary(ctx, req)
}

// SetLoggerLevel calls admin.v1.AdminService.SetLoggerLevel.
func (c *adminServiceClient) SetLoggerLevel(ctx context.Context, req *connect.Request[v1.SetLoggerLevelRequest]) (*connect.Response[v1.SetLoggerLevelResponse], error) {
	return c.setLoggerLevel.CallUnary(ctx, req)
}

// LoggerLevel calls admin.v1.AdminService.LoggerLevel.
func (c *adminServiceClient) LoggerLevel(ctx context.Context, req *connect.Request[v1.LoggerLevelRequest]) (*connect.Response[v1.LoggerLevelResponse], error) {
	return c.loggerLevel.CallUnary(ctx, req)
}

// Config calls admin.v1.AdminService.Config.
func (c *adminServiceClient) Config(ctx context.Context, req *connect.Request[v1.ConfigRequest]) (*connect.Response[v1.ConfigResponse], error) {
	return c.config.CallUnary(ctx, req)
}

// DB calls admin.v1.AdminService.DB.
func (c *adminServiceClient) DB(ctx context.Context, req *connect.Request[v1.DBRequest]) (*connect.Response[v1.DBResponse], error) {
	return c.dB.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the admin.v1.AdminService service.
type AdminServiceHandler interface {
	StartCPUProfiler(context.Context, *connect.Request[v1.StartCPUProfilerRequest]) (*connect.Response[v1.StartCPUProfilerResponse], error)
	StopCPUProfiler(context.Context, *connect.Request[v1.StopCPUProfilerRequest]) (*connect.Response[v1.StopCPUProfilerResponse], error)
	MemoryProfile(context.Context, *connect.Request[v1.MemoryProfileRequest]) (*connect.Response[v1.MemoryProfileResponse], error)
	LockProfile(context.Context, *connect.Request[v1.LockProfileRequest]) (*connect.Response[v1.LockProfileResponse], error)
	Alias(context.Context, *connect.Request[v1.AliasRequest]) (*connect.Response[v1.AliasResponse], error)
	AliasChain(context.Context, *connect.Request[v1.AliasChainRequest]) (*connect.Response[v1.AliasChainResponse], error)
	ChainAliases(context.Context, *connect.Request[v1.ChainAliasesRequest]) (*connect.Response[v1.ChainAliasesResponse], error)
	Stacktrace(context.Context, *connect.Request[v1.StacktraceRequest]) (*connect.Response[v1.StacktraceResponse], error)
	SetLoggerLevel(context.Context, *connect.Request[v1.SetLoggerLevelRequest]) (*connect.Response[v1.SetLoggerLevelResponse], error)
	LoggerLevel(context.Context, *connect.Request[v1.LoggerLevelRequest]) (*connect.Response[v1.LoggerLevelResponse], error)
	Config(context.Context, *connect.Request[v1.ConfigRequest]) (*connect.Response[v1.ConfigResponse], error)
	DB(context.Context, *connect.Request[v1.DBRequest]) (*connect.Response[v1.DBResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceMethods := v1.File_admin_v1_service_proto.Services().ByName("AdminService").Methods()
	adminServiceStartCPUProfilerHandler := connect.NewUnaryHandler(
		AdminServiceStartCPUProfilerProcedure,
		svc.StartCPUProfiler,
		connect.WithSchema(adminServiceMethods.ByName("StartCPUProfiler")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceStopCPUProfilerHandler := connect.NewUnaryHandler(
		AdminServiceStopCPUProfilerProcedure,
		svc.StopCPUProfiler,
		connect.WithSchema(adminServiceMethods.ByName("StopCPUProfiler")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceMemoryProfileHandler := connect.NewUnaryHandler(
		AdminServiceMemoryProfileProcedure,
		svc.MemoryProfile,
		connect.WithSchema(adminServiceMethods.ByName("MemoryProfile")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceLockProfileHandler := connect.NewUnaryHandler(
		AdminServiceLockProfileProcedure,
		svc.LockProfile,
		connect.WithSchema(adminServiceMethods.ByName("LockProfile")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceAliasHandler := connect.NewUnaryHandler(
		AdminServiceAliasProcedure,
		svc.Alias,
		connect.WithSchema(adminServiceMethods.ByName("Alias")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceAliasChainHandler := connect.NewUnaryHandler(
		AdminServiceAliasChainProcedure,
		svc.AliasChain,
		connect.WithSchema(adminServiceMethods.ByName("AliasChain")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceChainAliasesHandler := connect.NewUnaryHandler(
		AdminServiceChainAliasesProcedure,
		svc.ChainAliases,
		connect.WithSchema(adminServiceMethods.ByName("ChainAliases")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceStacktraceHandler := connect.NewUnaryHandler(
		AdminServiceStacktraceProcedure,
		svc.Stacktrace,
		connect.WithSchema(adminServiceMethods.ByName("Stacktrace")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceSetLoggerLevelHandler := connect.NewUnaryHandler(
		AdminServiceSetLoggerLevelProcedure,
		svc.SetLoggerLevel,
		connect.WithSchema(adminServiceMethods.ByName("SetLoggerLevel")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceLoggerLevelHandler := connect.NewUnaryHandler(
		AdminServiceLoggerLevelProcedure,
		svc.LoggerLevel,
		connect.WithSchema(adminServiceMethods.ByName("LoggerLevel")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceConfigHandler := connect.NewUnaryHandler(
		AdminServiceConfigProcedure,
		svc.Config,
		connect.WithSchema(adminServiceMethods.ByName("Config")),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceDBHandler := connect.NewUnaryHandler(
		AdminServiceDBProcedure,
		svc.DB,
		connect.WithSchema(adminServiceMethods.ByName("DB")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceStartCPUProfilerProcedure:
			adminServiceStartCPUProfilerHandler.ServeHTTP(w, r)
		case AdminServiceStopCPUProfilerProcedure:
			adminServiceStopCPUProfilerHandler.ServeHTTP(w, r)
		case AdminServiceMemoryProfileProcedure:
			adminServiceMemoryProfileHandler.ServeHTTP(w, r)
		case AdminServiceLockProfileProcedure:
			adminServiceLockProfileHandler.ServeHTTP(w, r)
		case AdminServiceAliasProcedure:
			adminServiceAliasHandler.ServeHTTP(w, r)
		case AdminServiceAliasChainProcedure:
			adminServiceAliasChainHandler.ServeHTTP(w, r)
		case AdminServiceChainAliasesProcedure:
			adminServiceChainAliasesHandler.ServeHTTP(w, r)
		case AdminServiceStacktraceProcedure:
			adminServiceStacktraceHandler.ServeHTTP(w, r)
		case AdminServiceSetLoggerLevelProcedure:
			adminServiceSetLoggerLevelHandler.ServeHTTP(w, r)
		case AdminServiceLoggerLevelProcedure:
			adminServiceLoggerLevelHandler.ServeHTTP(w, r)
		case AdminServiceConfigProcedure:
			adminServiceConfigHandler.ServeHTTP(w, r)
		case AdminServiceDBProcedure:
			adminServiceDBHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) StartCPUProfiler(context.Context, *connect.Request[v1.StartCPUProfilerRequest]) (*connect.Response[v1.StartCPUProfilerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.StartCPUProfiler is not implemented"))
}

func (UnimplementedAdminServiceHandler) StopCPUProfiler(context.Context, *connect.Request[v1.StopCPUProfilerRequest]) (*connect.Response[v1.StopCPUProfilerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.StopCPUProfiler is not implemented"))
}

func (UnimplementedAdminServiceHandler) MemoryProfile(context.Context, *connect.Request[v1.MemoryProfileRequest]) (*connect.Response[v1.MemoryProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.MemoryProfile is not implemented"))
}

func (UnimplementedAdminServiceHandler) LockProfile(context.Context, *connect.Request[v1.LockProfileRequest]) (*connect.Response[v1.LockProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.LockProfile is not implemented"))
}

func (UnimplementedAdminServiceHandler) Alias(context.Context, *connect.Request[v1.AliasRequest]) (*connect.Response[v1.AliasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.Alias is not implemented"))
}

func (UnimplementedAdminServiceHandler) AliasChain(context.Context, *connect.Request[v1.AliasChainRequest]) (*connect.Response[v1.AliasChainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.AliasChain is not implemented"))
}

func (UnimplementedAdminServiceHandler) ChainAliases(context.Context, *connect.Request[v1.ChainAliasesRequest]) (*connect.Response[v1.ChainAliasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.ChainAliases is not implemented"))
}

func (UnimplementedAdminServiceHandler) Stacktrace(context.Context, *connect.Request[v1.StacktraceRequest]) (*connect.Response[v1.StacktraceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.Stacktrace is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetLoggerLevel(context.Context, *connect.Request[v1.SetLoggerLevelRequest]) (*connect.Response[v1.SetLoggerLevelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.SetLoggerLevel is not implemented"))
}

func (UnimplementedAdminServiceHandler) LoggerLevel(context.Context, *connect.Request[v1.LoggerLevelRequest]) (*connect.Response[v1.LoggerLevelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.LoggerLevel is not implemented"))
}

func (UnimplementedAdminServiceHandler) Config(context.Context, *connect.Request[v1.ConfigRequest]) (*connect.Response[v1.ConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.Config is not implemented"))
}

func (UnimplementedAdminServiceHandler) DB(context.Context, *connect.Request[v1.DBRequest]) (*connect.Response[v1.DBResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.AdminService.DB is not implemented"))
}
