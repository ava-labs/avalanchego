// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: validatorstate/validator_state.proto

package validatorstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidatorStateClient is the client API for ValidatorState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidatorStateClient interface {
	// GetMinimumHeight returns the minimum height of the blocks in the optimal
	// proposal window.
	GetMinimumHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMinimumHeightResponse, error)
	// GetCurrentHeight returns the current height of the P-chain.
	GetCurrentHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentHeightResponse, error)
	// GetSubnetID returns the subnetID of the provided chain.
	GetSubnetID(ctx context.Context, in *GetSubnetIDRequest, opts ...grpc.CallOption) (*GetSubnetIDResponse, error)
	// GetValidatorSet returns the weights of the nodeIDs for the provided
	// subnet at the requested P-chain height.
	GetValidatorSet(ctx context.Context, in *GetValidatorSetRequest, opts ...grpc.CallOption) (*GetValidatorSetResponse, error)
}

type validatorStateClient struct {
	cc grpc.ClientConnInterface
}

func NewValidatorStateClient(cc grpc.ClientConnInterface) ValidatorStateClient {
	return &validatorStateClient{cc}
}

func (c *validatorStateClient) GetMinimumHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMinimumHeightResponse, error) {
	out := new(GetMinimumHeightResponse)
	err := c.cc.Invoke(ctx, "/validatorstate.ValidatorState/GetMinimumHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorStateClient) GetCurrentHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCurrentHeightResponse, error) {
	out := new(GetCurrentHeightResponse)
	err := c.cc.Invoke(ctx, "/validatorstate.ValidatorState/GetCurrentHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorStateClient) GetSubnetID(ctx context.Context, in *GetSubnetIDRequest, opts ...grpc.CallOption) (*GetSubnetIDResponse, error) {
	out := new(GetSubnetIDResponse)
	err := c.cc.Invoke(ctx, "/validatorstate.ValidatorState/GetSubnetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validatorStateClient) GetValidatorSet(ctx context.Context, in *GetValidatorSetRequest, opts ...grpc.CallOption) (*GetValidatorSetResponse, error) {
	out := new(GetValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/validatorstate.ValidatorState/GetValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidatorStateServer is the server API for ValidatorState service.
// All implementations must embed UnimplementedValidatorStateServer
// for forward compatibility
type ValidatorStateServer interface {
	// GetMinimumHeight returns the minimum height of the blocks in the optimal
	// proposal window.
	GetMinimumHeight(context.Context, *emptypb.Empty) (*GetMinimumHeightResponse, error)
	// GetCurrentHeight returns the current height of the P-chain.
	GetCurrentHeight(context.Context, *emptypb.Empty) (*GetCurrentHeightResponse, error)
	// GetSubnetID returns the subnetID of the provided chain.
	GetSubnetID(context.Context, *GetSubnetIDRequest) (*GetSubnetIDResponse, error)
	// GetValidatorSet returns the weights of the nodeIDs for the provided
	// subnet at the requested P-chain height.
	GetValidatorSet(context.Context, *GetValidatorSetRequest) (*GetValidatorSetResponse, error)
	mustEmbedUnimplementedValidatorStateServer()
}

// UnimplementedValidatorStateServer must be embedded to have forward compatible implementations.
type UnimplementedValidatorStateServer struct {
}

func (UnimplementedValidatorStateServer) GetMinimumHeight(context.Context, *emptypb.Empty) (*GetMinimumHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinimumHeight not implemented")
}
func (UnimplementedValidatorStateServer) GetCurrentHeight(context.Context, *emptypb.Empty) (*GetCurrentHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentHeight not implemented")
}
func (UnimplementedValidatorStateServer) GetSubnetID(context.Context, *GetSubnetIDRequest) (*GetSubnetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnetID not implemented")
}
func (UnimplementedValidatorStateServer) GetValidatorSet(context.Context, *GetValidatorSetRequest) (*GetValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorSet not implemented")
}
func (UnimplementedValidatorStateServer) mustEmbedUnimplementedValidatorStateServer() {}

// UnsafeValidatorStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidatorStateServer will
// result in compilation errors.
type UnsafeValidatorStateServer interface {
	mustEmbedUnimplementedValidatorStateServer()
}

func RegisterValidatorStateServer(s grpc.ServiceRegistrar, srv ValidatorStateServer) {
	s.RegisterService(&ValidatorState_ServiceDesc, srv)
}

func _ValidatorState_GetMinimumHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorStateServer).GetMinimumHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validatorstate.ValidatorState/GetMinimumHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorStateServer).GetMinimumHeight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorState_GetCurrentHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorStateServer).GetCurrentHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validatorstate.ValidatorState/GetCurrentHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorStateServer).GetCurrentHeight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorState_GetSubnetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorStateServer).GetSubnetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validatorstate.ValidatorState/GetSubnetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorStateServer).GetSubnetID(ctx, req.(*GetSubnetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidatorState_GetValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidatorStateServer).GetValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validatorstate.ValidatorState/GetValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidatorStateServer).GetValidatorSet(ctx, req.(*GetValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidatorState_ServiceDesc is the grpc.ServiceDesc for ValidatorState service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidatorState_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validatorstate.ValidatorState",
	HandlerType: (*ValidatorStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinimumHeight",
			Handler:    _ValidatorState_GetMinimumHeight_Handler,
		},
		{
			MethodName: "GetCurrentHeight",
			Handler:    _ValidatorState_GetCurrentHeight_Handler,
		},
		{
			MethodName: "GetSubnetID",
			Handler:    _ValidatorState_GetSubnetID_Handler,
		},
		{
			MethodName: "GetValidatorSet",
			Handler:    _ValidatorState_GetValidatorSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validatorstate/validator_state.proto",
}
