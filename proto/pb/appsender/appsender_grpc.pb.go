// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: appsender/appsender.proto

package appsender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppSenderClient is the client API for AppSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppSenderClient interface {
	SendAppRequest(ctx context.Context, in *SendAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendAppResponse(ctx context.Context, in *SendAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendAppGossip(ctx context.Context, in *SendAppGossipMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendAppGossipSpecific(ctx context.Context, in *SendAppGossipSpecificMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendCrossChainAppRequest(ctx context.Context, in *SendCrossChainAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendCrossChainAppResponse(ctx context.Context, in *SendCrossChainAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type appSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewAppSenderClient(cc grpc.ClientConnInterface) AppSenderClient {
	return &appSenderClient{cc}
}

func (c *appSenderClient) SendAppRequest(ctx context.Context, in *SendAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendAppRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSenderClient) SendAppResponse(ctx context.Context, in *SendAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendAppResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSenderClient) SendAppGossip(ctx context.Context, in *SendAppGossipMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendAppGossip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSenderClient) SendAppGossipSpecific(ctx context.Context, in *SendAppGossipSpecificMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendAppGossipSpecific", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSenderClient) SendCrossChainAppRequest(ctx context.Context, in *SendCrossChainAppRequestMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendCrossChainAppRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSenderClient) SendCrossChainAppResponse(ctx context.Context, in *SendCrossChainAppResponseMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/appsender.AppSender/SendCrossChainAppResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppSenderServer is the server API for AppSender service.
// All implementations must embed UnimplementedAppSenderServer
// for forward compatibility
type AppSenderServer interface {
	SendAppRequest(context.Context, *SendAppRequestMsg) (*emptypb.Empty, error)
	SendAppResponse(context.Context, *SendAppResponseMsg) (*emptypb.Empty, error)
	SendAppGossip(context.Context, *SendAppGossipMsg) (*emptypb.Empty, error)
	SendAppGossipSpecific(context.Context, *SendAppGossipSpecificMsg) (*emptypb.Empty, error)
	SendCrossChainAppRequest(context.Context, *SendCrossChainAppRequestMsg) (*emptypb.Empty, error)
	SendCrossChainAppResponse(context.Context, *SendCrossChainAppResponseMsg) (*emptypb.Empty, error)
	mustEmbedUnimplementedAppSenderServer()
}

// UnimplementedAppSenderServer must be embedded to have forward compatible implementations.
type UnimplementedAppSenderServer struct {
}

func (UnimplementedAppSenderServer) SendAppRequest(context.Context, *SendAppRequestMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppRequest not implemented")
}
func (UnimplementedAppSenderServer) SendAppResponse(context.Context, *SendAppResponseMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppResponse not implemented")
}
func (UnimplementedAppSenderServer) SendAppGossip(context.Context, *SendAppGossipMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppGossip not implemented")
}
func (UnimplementedAppSenderServer) SendAppGossipSpecific(context.Context, *SendAppGossipSpecificMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAppGossipSpecific not implemented")
}
func (UnimplementedAppSenderServer) SendCrossChainAppRequest(context.Context, *SendCrossChainAppRequestMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCrossChainAppRequest not implemented")
}
func (UnimplementedAppSenderServer) SendCrossChainAppResponse(context.Context, *SendCrossChainAppResponseMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCrossChainAppResponse not implemented")
}
func (UnimplementedAppSenderServer) mustEmbedUnimplementedAppSenderServer() {}

// UnsafeAppSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppSenderServer will
// result in compilation errors.
type UnsafeAppSenderServer interface {
	mustEmbedUnimplementedAppSenderServer()
}

func RegisterAppSenderServer(s grpc.ServiceRegistrar, srv AppSenderServer) {
	s.RegisterService(&AppSender_ServiceDesc, srv)
}

func _AppSender_SendAppRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAppRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendAppRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendAppRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendAppRequest(ctx, req.(*SendAppRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSender_SendAppResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAppResponseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendAppResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendAppResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendAppResponse(ctx, req.(*SendAppResponseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSender_SendAppGossip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAppGossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendAppGossip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendAppGossip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendAppGossip(ctx, req.(*SendAppGossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSender_SendAppGossipSpecific_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAppGossipSpecificMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendAppGossipSpecific(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendAppGossipSpecific",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendAppGossipSpecific(ctx, req.(*SendAppGossipSpecificMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSender_SendCrossChainAppRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCrossChainAppRequestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendCrossChainAppRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendCrossChainAppRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendCrossChainAppRequest(ctx, req.(*SendCrossChainAppRequestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSender_SendCrossChainAppResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCrossChainAppResponseMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSenderServer).SendCrossChainAppResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appsender.AppSender/SendCrossChainAppResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSenderServer).SendCrossChainAppResponse(ctx, req.(*SendCrossChainAppResponseMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// AppSender_ServiceDesc is the grpc.ServiceDesc for AppSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appsender.AppSender",
	HandlerType: (*AppSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAppRequest",
			Handler:    _AppSender_SendAppRequest_Handler,
		},
		{
			MethodName: "SendAppResponse",
			Handler:    _AppSender_SendAppResponse_Handler,
		},
		{
			MethodName: "SendAppGossip",
			Handler:    _AppSender_SendAppGossip_Handler,
		},
		{
			MethodName: "SendAppGossipSpecific",
			Handler:    _AppSender_SendAppGossipSpecific_Handler,
		},
		{
			MethodName: "SendCrossChainAppRequest",
			Handler:    _AppSender_SendCrossChainAppRequest_Handler,
		},
		{
			MethodName: "SendCrossChainAppResponse",
			Handler:    _AppSender_SendCrossChainAppResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appsender/appsender.proto",
}
