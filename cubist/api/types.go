// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	SignerAuthScopes = "SignerAuth.Scopes"
)

// Defines values for AcceptedValueCode.
const (
	MfaRequired AcceptedValueCode = "MfaRequired"
)

// Defines values for BadGatewayErrorCode.
const (
	CallWebhookError                 BadGatewayErrorCode = "CallWebhookError"
	EsploraApiError                  BadGatewayErrorCode = "EsploraApiError"
	OAuthProviderError               BadGatewayErrorCode = "OAuthProviderError"
	OidcDisoveryFailed               BadGatewayErrorCode = "OidcDisoveryFailed"
	OidcIssuerJwkEndpointUnavailable BadGatewayErrorCode = "OidcIssuerJwkEndpointUnavailable"
	SmtpServerUnavailable            BadGatewayErrorCode = "SmtpServerUnavailable"
)

// Defines values for BadRequestErrorCode.
const (
	BadRequestErrorCodeAddKeyToRoleCountTooHigh                        BadRequestErrorCode = "AddKeyToRoleCountTooHigh"
	BadRequestErrorCodeAvaSignError                                    BadRequestErrorCode = "AvaSignError"
	BadRequestErrorCodeAvaSignHashError                                BadRequestErrorCode = "AvaSignHashError"
	BadRequestErrorCodeBabylonStaking                                  BadRequestErrorCode = "BabylonStaking"
	BadRequestErrorCodeBabylonStakingFeePlusDustOverflow               BadRequestErrorCode = "BabylonStakingFeePlusDustOverflow"
	BadRequestErrorCodeBabylonStakingIncorrectKey                      BadRequestErrorCode = "BabylonStakingIncorrectKey"
	BadRequestErrorCodeBabylonStakingSegwitNonDeposit                  BadRequestErrorCode = "BabylonStakingSegwitNonDeposit"
	BadRequestErrorCodeBadBtcMessageSignP2shFlag                       BadRequestErrorCode = "BadBtcMessageSignP2shFlag"
	BadRequestErrorCodeBtcSegwitHashError                              BadRequestErrorCode = "BtcSegwitHashError"
	BadRequestErrorCodeBtcSignError                                    BadRequestErrorCode = "BtcSignError"
	BadRequestErrorCodeBtcTaprootHashError                             BadRequestErrorCode = "BtcTaprootHashError"
	BadRequestErrorCodeCannotDeletePendingSubscription                 BadRequestErrorCode = "CannotDeletePendingSubscription"
	BadRequestErrorCodeCannotResendUserInvitation                      BadRequestErrorCode = "CannotResendUserInvitation"
	BadRequestErrorCodeCognitoUserAlreadyOrgMember                     BadRequestErrorCode = "CognitoUserAlreadyOrgMember"
	BadRequestErrorCodeCustomStakingAmountNotAllowedForWrapperContract BadRequestErrorCode = "CustomStakingAmountNotAllowedForWrapperContract"
	BadRequestErrorCodeDeleteOidcUserError                             BadRequestErrorCode = "DeleteOidcUserError"
	BadRequestErrorCodeDeleteUserError                                 BadRequestErrorCode = "DeleteUserError"
	BadRequestErrorCodeEip712SignError                                 BadRequestErrorCode = "Eip712SignError"
	BadRequestErrorCodeEmailPasswordNotFound                           BadRequestErrorCode = "EmailPasswordNotFound"
	BadRequestErrorCodeEmptyAddress                                    BadRequestErrorCode = "EmptyAddress"
	BadRequestErrorCodeEmptyAllExceptOrgEventFilter                    BadRequestErrorCode = "EmptyAllExceptOrgEventFilter"
	BadRequestErrorCodeEmptyOneOfOrgEventFilter                        BadRequestErrorCode = "EmptyOneOfOrgEventFilter"
	BadRequestErrorCodeEmptyRuleError                                  BadRequestErrorCode = "EmptyRuleError"
	BadRequestErrorCodeEmptyScopes                                     BadRequestErrorCode = "EmptyScopes"
	BadRequestErrorCodeEmptyUpdateRequest                              BadRequestErrorCode = "EmptyUpdateRequest"
	BadRequestErrorCodeErc20ContractDisallowed                         BadRequestErrorCode = "Erc20ContractDisallowed"
	BadRequestErrorCodeEthersGetTransactionCountError                  BadRequestErrorCode = "EthersGetTransactionCountError"
	BadRequestErrorCodeEthersInvalidRpcUrl                             BadRequestErrorCode = "EthersInvalidRpcUrl"
	BadRequestErrorCodeExistingKeysViolateExclusiveKeyAccess           BadRequestErrorCode = "ExistingKeysViolateExclusiveKeyAccess"
	BadRequestErrorCodeExportDelayTooShort                             BadRequestErrorCode = "ExportDelayTooShort"
	BadRequestErrorCodeExportWindowTooLong                             BadRequestErrorCode = "ExportWindowTooLong"
	BadRequestErrorCodeFidoChallengeMfaMismatch                        BadRequestErrorCode = "FidoChallengeMfaMismatch"
	BadRequestErrorCodeFidoKeyAlreadyRegistered                        BadRequestErrorCode = "FidoKeyAlreadyRegistered"
	BadRequestErrorCodeFidoKeySignCountTooLow                          BadRequestErrorCode = "FidoKeySignCountTooLow"
	BadRequestErrorCodeFidoVerificationFailed                          BadRequestErrorCode = "FidoVerificationFailed"
	BadRequestErrorCodeGenericBadRequest                               BadRequestErrorCode = "GenericBadRequest"
	BadRequestErrorCodeIdpUserAlreadyExists                            BadRequestErrorCode = "IdpUserAlreadyExists"
	BadRequestErrorCodeInvalidBabylonStakingPolicyParams               BadRequestErrorCode = "InvalidBabylonStakingPolicyParams"
	BadRequestErrorCodeInvalidBase32Value                              BadRequestErrorCode = "InvalidBase32Value"
	BadRequestErrorCodeInvalidBase58Value                              BadRequestErrorCode = "InvalidBase58Value"
	BadRequestErrorCodeInvalidBlobSignRequest                          BadRequestErrorCode = "InvalidBlobSignRequest"
	BadRequestErrorCodeInvalidBody                                     BadRequestErrorCode = "InvalidBody"
	BadRequestErrorCodeInvalidBtcTxReceiversEmptyAllowlist             BadRequestErrorCode = "InvalidBtcTxReceiversEmptyAllowlist"
	BadRequestErrorCodeInvalidCreateKeyCount                           BadRequestErrorCode = "InvalidCreateKeyCount"
	BadRequestErrorCodeInvalidCreateUserRequest                        BadRequestErrorCode = "InvalidCreateUserRequest"
	BadRequestErrorCodeInvalidDeriveKeyRequest                         BadRequestErrorCode = "InvalidDeriveKeyRequest"
	BadRequestErrorCodeInvalidEip191SignRequest                        BadRequestErrorCode = "InvalidEip191SignRequest"
	BadRequestErrorCodeInvalidEip712SignRequest                        BadRequestErrorCode = "InvalidEip712SignRequest"
	BadRequestErrorCodeInvalidEth2SignRequest                          BadRequestErrorCode = "InvalidEth2SignRequest"
	BadRequestErrorCodeInvalidEth2SigningPolicyEpochRange              BadRequestErrorCode = "InvalidEth2SigningPolicyEpochRange"
	BadRequestErrorCodeInvalidEth2SigningPolicyOverlappingRule         BadRequestErrorCode = "InvalidEth2SigningPolicyOverlappingRule"
	BadRequestErrorCodeInvalidEth2SigningPolicySlotRange               BadRequestErrorCode = "InvalidEth2SigningPolicySlotRange"
	BadRequestErrorCodeInvalidEth2SigningPolicyTimestampRange          BadRequestErrorCode = "InvalidEth2SigningPolicyTimestampRange"
	BadRequestErrorCodeInvalidEthAddress                               BadRequestErrorCode = "InvalidEthAddress"
	BadRequestErrorCodeInvalidEvmSignRequest                           BadRequestErrorCode = "InvalidEvmSignRequest"
	BadRequestErrorCodeInvalidForkVersionLength                        BadRequestErrorCode = "InvalidForkVersionLength"
	BadRequestErrorCodeInvalidHexValue                                 BadRequestErrorCode = "InvalidHexValue"
	BadRequestErrorCodeInvalidIdentityProof                            BadRequestErrorCode = "InvalidIdentityProof"
	BadRequestErrorCodeInvalidJwt                                      BadRequestErrorCode = "InvalidJwt"
	BadRequestErrorCodeInvalidKeyId                                    BadRequestErrorCode = "InvalidKeyId"
	BadRequestErrorCodeInvalidKeyMaterial                              BadRequestErrorCode = "InvalidKeyMaterial"
	BadRequestErrorCodeInvalidKeyMaterialId                            BadRequestErrorCode = "InvalidKeyMaterialId"
	BadRequestErrorCodeInvalidKeyType                                  BadRequestErrorCode = "InvalidKeyType"
	BadRequestErrorCodeInvalidLifetime                                 BadRequestErrorCode = "InvalidLifetime"
	BadRequestErrorCodeInvalidMemberRoleInRecipientAdd                 BadRequestErrorCode = "InvalidMemberRoleInRecipientAdd"
	BadRequestErrorCodeInvalidMemberRoleInUserAdd                      BadRequestErrorCode = "InvalidMemberRoleInUserAdd"
	BadRequestErrorCodeInvalidMessageType                              BadRequestErrorCode = "InvalidMessageType"
	BadRequestErrorCodeInvalidMetadataLength                           BadRequestErrorCode = "InvalidMetadataLength"
	BadRequestErrorCodeInvalidMfaPolicyCount                           BadRequestErrorCode = "InvalidMfaPolicyCount"
	BadRequestErrorCodeInvalidMfaPolicyGracePeriodTooLong              BadRequestErrorCode = "InvalidMfaPolicyGracePeriodTooLong"
	BadRequestErrorCodeInvalidMfaPolicyNumAllowedApprovers             BadRequestErrorCode = "InvalidMfaPolicyNumAllowedApprovers"
	BadRequestErrorCodeInvalidMfaPolicyNumAuthFactors                  BadRequestErrorCode = "InvalidMfaPolicyNumAuthFactors"
	BadRequestErrorCodeInvalidMfaReceipt                               BadRequestErrorCode = "InvalidMfaReceipt"
	BadRequestErrorCodeInvalidMfaReceiptInvalidOrgId                   BadRequestErrorCode = "InvalidMfaReceiptInvalidOrgId"
	BadRequestErrorCodeInvalidMfaReceiptOrgIdMissing                   BadRequestErrorCode = "InvalidMfaReceiptOrgIdMissing"
	BadRequestErrorCodeInvalidNotificationEndpointCount                BadRequestErrorCode = "InvalidNotificationEndpointCount"
	BadRequestErrorCodeInvalidNotificationUrlProtocol                  BadRequestErrorCode = "InvalidNotificationUrlProtocol"
	BadRequestErrorCodeInvalidOidcIdentity                             BadRequestErrorCode = "InvalidOidcIdentity"
	BadRequestErrorCodeInvalidOidcToken                                BadRequestErrorCode = "InvalidOidcToken"
	BadRequestErrorCodeInvalidOneTimeCode                              BadRequestErrorCode = "InvalidOneTimeCode"
	BadRequestErrorCodeInvalidOrgNameOrId                              BadRequestErrorCode = "InvalidOrgNameOrId"
	BadRequestErrorCodeInvalidOrgPolicyRepeatedRule                    BadRequestErrorCode = "InvalidOrgPolicyRepeatedRule"
	BadRequestErrorCodeInvalidOrgPolicyRule                            BadRequestErrorCode = "InvalidOrgPolicyRule"
	BadRequestErrorCodeInvalidPassword                                 BadRequestErrorCode = "InvalidPassword"
	BadRequestErrorCodeInvalidPolicyReference                          BadRequestErrorCode = "InvalidPolicyReference"
	BadRequestErrorCodeInvalidRange                                    BadRequestErrorCode = "InvalidRange"
	BadRequestErrorCodeInvalidRequireRoleSessionAllowlist              BadRequestErrorCode = "InvalidRequireRoleSessionAllowlist"
	BadRequestErrorCodeInvalidRestrictedScopes                         BadRequestErrorCode = "InvalidRestrictedScopes"
	BadRequestErrorCodeInvalidRoleNameOrId                             BadRequestErrorCode = "InvalidRoleNameOrId"
	BadRequestErrorCodeInvalidScopesForRoleSession                     BadRequestErrorCode = "InvalidScopesForRoleSession"
	BadRequestErrorCodeInvalidSolanaSignRequest                        BadRequestErrorCode = "InvalidSolanaSignRequest"
	BadRequestErrorCodeInvalidSs58Value                                BadRequestErrorCode = "InvalidSs58Value"
	BadRequestErrorCodeInvalidStakeDeposit                             BadRequestErrorCode = "InvalidStakeDeposit"
	BadRequestErrorCodeInvalidStakingAmount                            BadRequestErrorCode = "InvalidStakingAmount"
	BadRequestErrorCodeInvalidStellarAddress                           BadRequestErrorCode = "InvalidStellarAddress"
	BadRequestErrorCodeInvalidSuiTransaction                           BadRequestErrorCode = "InvalidSuiTransaction"
	BadRequestErrorCodeInvalidSuiTxReceiversEmptyAllowlist             BadRequestErrorCode = "InvalidSuiTxReceiversEmptyAllowlist"
	BadRequestErrorCodeInvalidTapNodeHash                              BadRequestErrorCode = "InvalidTapNodeHash"
	BadRequestErrorCodeInvalidTendermintRequest                        BadRequestErrorCode = "InvalidTendermintRequest"
	BadRequestErrorCodeInvalidTimeLockAlreadyInThePast                 BadRequestErrorCode = "InvalidTimeLockAlreadyInThePast"
	BadRequestErrorCodeInvalidTotpFailureLimit                         BadRequestErrorCode = "InvalidTotpFailureLimit"
	BadRequestErrorCodeInvalidUnstakeRequest                           BadRequestErrorCode = "InvalidUnstakeRequest"
	BadRequestErrorCodeInvalidUpdate                                   BadRequestErrorCode = "InvalidUpdate"
	BadRequestErrorCodeInvalidWasmPolicy                               BadRequestErrorCode = "InvalidWasmPolicy"
	BadRequestErrorCodeInvitationNoLongerValid                         BadRequestErrorCode = "InvitationNoLongerValid"
	BadRequestErrorCodeKeyNotFound                                     BadRequestErrorCode = "KeyNotFound"
	BadRequestErrorCodeLimitWindowTooLong                              BadRequestErrorCode = "LimitWindowTooLong"
	BadRequestErrorCodeMessageAlreadySigned                            BadRequestErrorCode = "MessageAlreadySigned"
	BadRequestErrorCodeMessageNotFound                                 BadRequestErrorCode = "MessageNotFound"
	BadRequestErrorCodeMessageRejected                                 BadRequestErrorCode = "MessageRejected"
	BadRequestErrorCodeMessageReplaced                                 BadRequestErrorCode = "MessageReplaced"
	BadRequestErrorCodeMfaRequestNotFound                              BadRequestErrorCode = "MfaRequestNotFound"
	BadRequestErrorCodeMmiChainIdMissing                               BadRequestErrorCode = "MmiChainIdMissing"
	BadRequestErrorCodeMmiRpcUrlMissing                                BadRequestErrorCode = "MmiRpcUrlMissing"
	BadRequestErrorCodeNoOidcDataInProof                               BadRequestErrorCode = "NoOidcDataInProof"
	BadRequestErrorCodeNoSingleKeyForUser                              BadRequestErrorCode = "NoSingleKeyForUser"
	BadRequestErrorCodeOidcIdentityAlreadyExists                       BadRequestErrorCode = "OidcIdentityAlreadyExists"
	BadRequestErrorCodeOidcIssuerNoApplicableJwk                       BadRequestErrorCode = "OidcIssuerNoApplicableJwk"
	BadRequestErrorCodeOidcIssuerNotAllowed                            BadRequestErrorCode = "OidcIssuerNotAllowed"
	BadRequestErrorCodeOidcIssuerUnsupported                           BadRequestErrorCode = "OidcIssuerUnsupported"
	BadRequestErrorCodeOneTimeCodeExpired                              BadRequestErrorCode = "OneTimeCodeExpired"
	BadRequestErrorCodeOnlySpecifyOne                                  BadRequestErrorCode = "OnlySpecifyOne"
	BadRequestErrorCodeOptionalListEmpty                               BadRequestErrorCode = "OptionalListEmpty"
	BadRequestErrorCodeOrgInviteExistingUser                           BadRequestErrorCode = "OrgInviteExistingUser"
	BadRequestErrorCodeOrgIsNotOrgExport                               BadRequestErrorCode = "OrgIsNotOrgExport"
	BadRequestErrorCodeOrgNameTaken                                    BadRequestErrorCode = "OrgNameTaken"
	BadRequestErrorCodeOrgUserAlreadyExists                            BadRequestErrorCode = "OrgUserAlreadyExists"
	BadRequestErrorCodePaginationDataExpired                           BadRequestErrorCode = "PaginationDataExpired"
	BadRequestErrorCodePasswordAuthNotAllowedByInvitation              BadRequestErrorCode = "PasswordAuthNotAllowedByInvitation"
	BadRequestErrorCodePolicyAlienOwnerInvalid                         BadRequestErrorCode = "PolicyAlienOwnerInvalid"
	BadRequestErrorCodePolicyKeyMismatch                               BadRequestErrorCode = "PolicyKeyMismatch"
	BadRequestErrorCodePolicyNameTaken                                 BadRequestErrorCode = "PolicyNameTaken"
	BadRequestErrorCodePolicyNotFound                                  BadRequestErrorCode = "PolicyNotFound"
	BadRequestErrorCodePolicyRuleDisallowedByType                      BadRequestErrorCode = "PolicyRuleDisallowedByType"
	BadRequestErrorCodePolicyRuleKeyMismatch                           BadRequestErrorCode = "PolicyRuleKeyMismatch"
	BadRequestErrorCodePolicyTypeDisallowed                            BadRequestErrorCode = "PolicyTypeDisallowed"
	BadRequestErrorCodePolicyVersionInvalid                            BadRequestErrorCode = "PolicyVersionInvalid"
	BadRequestErrorCodePolicyVersionMaxReached                         BadRequestErrorCode = "PolicyVersionMaxReached"
	BadRequestErrorCodePolicyVersionNotFound                           BadRequestErrorCode = "PolicyVersionNotFound"
	BadRequestErrorCodePsbtSigning                                     BadRequestErrorCode = "PsbtSigning"
	BadRequestErrorCodeQueryMetricsError                               BadRequestErrorCode = "QueryMetricsError"
	BadRequestErrorCodeQueryMetricsValidationError                     BadRequestErrorCode = "QueryMetricsValidationError"
	BadRequestErrorCodeReservedName                                    BadRequestErrorCode = "ReservedName"
	BadRequestErrorCodeRoleNameTaken                                   BadRequestErrorCode = "RoleNameTaken"
	BadRequestErrorCodeRoleNotFound                                    BadRequestErrorCode = "RoleNotFound"
	BadRequestErrorCodeSessionRoleMismatch                             BadRequestErrorCode = "SessionRoleMismatch"
	BadRequestErrorCodeSourceIpAllowlistEmpty                          BadRequestErrorCode = "SourceIpAllowlistEmpty"
	BadRequestErrorCodeSuiSenderMismatch                               BadRequestErrorCode = "SuiSenderMismatch"
	BadRequestErrorCodeTaprootSignError                                BadRequestErrorCode = "TaprootSignError"
	BadRequestErrorCodeThirdPartyUserAlreadyExists                     BadRequestErrorCode = "ThirdPartyUserAlreadyExists"
	BadRequestErrorCodeThirdPartyUserNotFound                          BadRequestErrorCode = "ThirdPartyUserNotFound"
	BadRequestErrorCodeTokenRequestError                               BadRequestErrorCode = "TokenRequestError"
	BadRequestErrorCodeTooManyFailedLogins                             BadRequestErrorCode = "TooManyFailedLogins"
	BadRequestErrorCodeTooManyResets                                   BadRequestErrorCode = "TooManyResets"
	BadRequestErrorCodeUnableToAccessSmtpRelay                         BadRequestErrorCode = "UnableToAccessSmtpRelay"
	BadRequestErrorCodeUnsupportedLegacyCognitoSession                 BadRequestErrorCode = "UnsupportedLegacyCognitoSession"
	BadRequestErrorCodeUserAlreadyExists                               BadRequestErrorCode = "UserAlreadyExists"
	BadRequestErrorCodeUserEmailNotConfigured                          BadRequestErrorCode = "UserEmailNotConfigured"
	BadRequestErrorCodeUserExportDerivedKey                            BadRequestErrorCode = "UserExportDerivedKey"
	BadRequestErrorCodeUserExportInProgress                            BadRequestErrorCode = "UserExportInProgress"
	BadRequestErrorCodeUserExportPublicKeyInvalid                      BadRequestErrorCode = "UserExportPublicKeyInvalid"
	BadRequestErrorCodeUserNotFound                                    BadRequestErrorCode = "UserNotFound"
	BadRequestErrorCodeWebhookPolicyDisallowedHeaders                  BadRequestErrorCode = "WebhookPolicyDisallowedHeaders"
	BadRequestErrorCodeWebhookPolicyDisallowedUrlHost                  BadRequestErrorCode = "WebhookPolicyDisallowedUrlHost"
	BadRequestErrorCodeWebhookPolicyDisallowedUrlScheme                BadRequestErrorCode = "WebhookPolicyDisallowedUrlScheme"
	BadRequestErrorCodeWebhookPolicyTimeoutOutOfBounds                 BadRequestErrorCode = "WebhookPolicyTimeoutOutOfBounds"
)

// Defines values for EvmTxDepositErrorCode.
const (
	EvmTxDepositEmptyChainId                    EvmTxDepositErrorCode = "EvmTxDepositEmptyChainId"
	EvmTxDepositEmptyData                       EvmTxDepositErrorCode = "EvmTxDepositEmptyData"
	EvmTxDepositEmptyReceiver                   EvmTxDepositErrorCode = "EvmTxDepositEmptyReceiver"
	EvmTxDepositInvalidDepositEncoding          EvmTxDepositErrorCode = "EvmTxDepositInvalidDepositEncoding"
	EvmTxDepositInvalidValidatorKey             EvmTxDepositErrorCode = "EvmTxDepositInvalidValidatorKey"
	EvmTxDepositMissingDepositArg               EvmTxDepositErrorCode = "EvmTxDepositMissingDepositArg"
	EvmTxDepositNoAbi                           EvmTxDepositErrorCode = "EvmTxDepositNoAbi"
	EvmTxDepositNoDepositFunction               EvmTxDepositErrorCode = "EvmTxDepositNoDepositFunction"
	EvmTxDepositReceiverMismatch                EvmTxDepositErrorCode = "EvmTxDepositReceiverMismatch"
	EvmTxDepositUnexpectedDataLength            EvmTxDepositErrorCode = "EvmTxDepositUnexpectedDataLength"
	EvmTxDepositUnexpectedFunctionName          EvmTxDepositErrorCode = "EvmTxDepositUnexpectedFunctionName"
	EvmTxDepositUnexpectedValidatorKey          EvmTxDepositErrorCode = "EvmTxDepositUnexpectedValidatorKey"
	EvmTxDepositUnexpectedValue                 EvmTxDepositErrorCode = "EvmTxDepositUnexpectedValue"
	EvmTxDepositUnexpectedWithdrawalCredentials EvmTxDepositErrorCode = "EvmTxDepositUnexpectedWithdrawalCredentials"
	EvmTxDepositUnresolvedRole                  EvmTxDepositErrorCode = "EvmTxDepositUnresolvedRole"
	EvmTxDepositValidatorKeyNotInRole           EvmTxDepositErrorCode = "EvmTxDepositValidatorKeyNotInRole"
	EvmTxDepositWrongDepositArgType             EvmTxDepositErrorCode = "EvmTxDepositWrongDepositArgType"
)

// Defines values for ForbiddenErrorCode.
const (
	AutoAddBlsKeyToProtectedRole        ForbiddenErrorCode = "AutoAddBlsKeyToProtectedRole"
	CannotAssumeIdentity                ForbiddenErrorCode = "CannotAssumeIdentity"
	CannotCreateOrg                     ForbiddenErrorCode = "CannotCreateOrg"
	ChainIdNotAllowed                   ForbiddenErrorCode = "ChainIdNotAllowed"
	DisabledRole                        ForbiddenErrorCode = "DisabledRole"
	EmailOtpNotConfigured               ForbiddenErrorCode = "EmailOtpNotConfigured"
	ExpectedUserSession                 ForbiddenErrorCode = "ExpectedUserSession"
	FidoRequiredToRemoveTotp            ForbiddenErrorCode = "FidoRequiredToRemoveTotp"
	FullSessionRequired                 ForbiddenErrorCode = "FullSessionRequired"
	ImproperSessionScope                ForbiddenErrorCode = "ImproperSessionScope"
	InvalidArn                          ForbiddenErrorCode = "InvalidArn"
	InvalidAuthHeader                   ForbiddenErrorCode = "InvalidAuthHeader"
	InvalidOrg                          ForbiddenErrorCode = "InvalidOrg"
	InvalidOrgMembershipRoleChange      ForbiddenErrorCode = "InvalidOrgMembershipRoleChange"
	InvalidRole                         ForbiddenErrorCode = "InvalidRole"
	KeyDisabled                         ForbiddenErrorCode = "KeyDisabled"
	KeyNotInOrg                         ForbiddenErrorCode = "KeyNotInOrg"
	KeyNotInRole                        ForbiddenErrorCode = "KeyNotInRole"
	LegacySessionCannotHaveScopeCeiling ForbiddenErrorCode = "LegacySessionCannotHaveScopeCeiling"
	MfaChallengeExpired                 ForbiddenErrorCode = "MfaChallengeExpired"
	MfaConfirmationCodeMismatch         ForbiddenErrorCode = "MfaConfirmationCodeMismatch"
	MfaDisallowedApprover               ForbiddenErrorCode = "MfaDisallowedApprover"
	MfaDisallowedIdentity               ForbiddenErrorCode = "MfaDisallowedIdentity"
	MfaHttpRequestMismatch              ForbiddenErrorCode = "MfaHttpRequestMismatch"
	MfaNotApprovedYet                   ForbiddenErrorCode = "MfaNotApprovedYet"
	MfaNotConfigured                    ForbiddenErrorCode = "MfaNotConfigured"
	MfaRemoveBelowMin                   ForbiddenErrorCode = "MfaRemoveBelowMin"
	MfaTotpBadCode                      ForbiddenErrorCode = "MfaTotpBadCode"
	MfaTotpBadConfiguration             ForbiddenErrorCode = "MfaTotpBadConfiguration"
	MfaTotpRateLimit                    ForbiddenErrorCode = "MfaTotpRateLimit"
	MfaTypeNotAllowed                   ForbiddenErrorCode = "MfaTypeNotAllowed"
	MustBeFullMember                    ForbiddenErrorCode = "MustBeFullMember"
	OidcIssuerNotAllowedForMemberRole   ForbiddenErrorCode = "OidcIssuerNotAllowedForMemberRole"
	OidcNoMemberRolesAllowed            ForbiddenErrorCode = "OidcNoMemberRolesAllowed"
	OidcScopeCeilingMissing             ForbiddenErrorCode = "OidcScopeCeilingMissing"
	OidcUserNotFound                    ForbiddenErrorCode = "OidcUserNotFound"
	OperationNotAllowed                 ForbiddenErrorCode = "OperationNotAllowed"
	OrgDisabled                         ForbiddenErrorCode = "OrgDisabled"
	OrgExportRetrievalDisabled          ForbiddenErrorCode = "OrgExportRetrievalDisabled"
	OrgIdMismatch                       ForbiddenErrorCode = "OrgIdMismatch"
	OrgNotFound                         ForbiddenErrorCode = "OrgNotFound"
	OrgWithoutOwner                     ForbiddenErrorCode = "OrgWithoutOwner"
	OrphanedUser                        ForbiddenErrorCode = "OrphanedUser"
	RemoveLastOidcIdentity              ForbiddenErrorCode = "RemoveLastOidcIdentity"
	RoleInParentOrgNotAllowed           ForbiddenErrorCode = "RoleInParentOrgNotAllowed"
	RoleNotInOrg                        ForbiddenErrorCode = "RoleNotInOrg"
	ScopedNameNotFound                  ForbiddenErrorCode = "ScopedNameNotFound"
	SelfDelete                          ForbiddenErrorCode = "SelfDelete"
	SelfDisable                         ForbiddenErrorCode = "SelfDisable"
	SessionAuthTokenExpired             ForbiddenErrorCode = "SessionAuthTokenExpired"
	SessionChanged                      ForbiddenErrorCode = "SessionChanged"
	SessionExpired                      ForbiddenErrorCode = "SessionExpired"
	SessionForWrongOrg                  ForbiddenErrorCode = "SessionForWrongOrg"
	SessionInvalidAuthToken             ForbiddenErrorCode = "SessionInvalidAuthToken"
	SessionInvalidEpochToken            ForbiddenErrorCode = "SessionInvalidEpochToken"
	SessionInvalidRefreshToken          ForbiddenErrorCode = "SessionInvalidRefreshToken"
	SessionNotFound                     ForbiddenErrorCode = "SessionNotFound"
	SessionPossiblyStolenToken          ForbiddenErrorCode = "SessionPossiblyStolenToken"
	SessionRefreshTokenExpired          ForbiddenErrorCode = "SessionRefreshTokenExpired"
	SessionRevoked                      ForbiddenErrorCode = "SessionRevoked"
	SessionRoleChanged                  ForbiddenErrorCode = "SessionRoleChanged"
	SessionWithoutAnyScopeUnder         ForbiddenErrorCode = "SessionWithoutAnyScopeUnder"
	TotpAlreadyConfigured               ForbiddenErrorCode = "TotpAlreadyConfigured"
	TotpConfigurationChanged            ForbiddenErrorCode = "TotpConfigurationChanged"
	UserDisabled                        ForbiddenErrorCode = "UserDisabled"
	UserExportRequestInvalid            ForbiddenErrorCode = "UserExportRequestInvalid"
	UserExportRequestNotInOrg           ForbiddenErrorCode = "UserExportRequestNotInOrg"
	UserMfaNotConfigured                ForbiddenErrorCode = "UserMfaNotConfigured"
	UserNotInOrg                        ForbiddenErrorCode = "UserNotInOrg"
	UserNotInRole                       ForbiddenErrorCode = "UserNotInRole"
	UserNotKeyOwner                     ForbiddenErrorCode = "UserNotKeyOwner"
	UserNotOrgOwner                     ForbiddenErrorCode = "UserNotOrgOwner"
	UserNotOriginalKeyOwner             ForbiddenErrorCode = "UserNotOriginalKeyOwner"
	UserNotPolicyOwner                  ForbiddenErrorCode = "UserNotPolicyOwner"
	UserRoleUnprivileged                ForbiddenErrorCode = "UserRoleUnprivileged"
	WrongMfaEmailOtpJwt                 ForbiddenErrorCode = "WrongMfaEmailOtpJwt"
)

// Defines values for HttpRequestCmp0.
const (
	Eq HttpRequestCmp0 = "Eq"
)

// Defines values for InternalErrorCode.
const (
	AvaSignCredsMissing                 InternalErrorCode = "AvaSignCredsMissing"
	AvaSignSignatureMissing             InternalErrorCode = "AvaSignSignatureMissing"
	ClaimsParseError                    InternalErrorCode = "ClaimsParseError"
	CognitoDeleteUserError              InternalErrorCode = "CognitoDeleteUserError"
	CognitoGetUser                      InternalErrorCode = "CognitoGetUser"
	CognitoGetUserError                 InternalErrorCode = "CognitoGetUserError"
	CognitoListUsersError               InternalErrorCode = "CognitoListUsersError"
	CognitoResendUserInvitation         InternalErrorCode = "CognitoResendUserInvitation"
	CognitoSetUserPasswordError         InternalErrorCode = "CognitoSetUserPasswordError"
	ConcurrentLockCreation              InternalErrorCode = "ConcurrentLockCreation"
	CreateEotsNoncesError               InternalErrorCode = "CreateEotsNoncesError"
	CreateImportKeyError                InternalErrorCode = "CreateImportKeyError"
	CreateKeyError                      InternalErrorCode = "CreateKeyError"
	CubistSignerError                   InternalErrorCode = "CubistSignerError"
	CwListMetricsError                  InternalErrorCode = "CwListMetricsError"
	CwPutMetricDataError                InternalErrorCode = "CwPutMetricDataError"
	DbDeleteError                       InternalErrorCode = "DbDeleteError"
	DbGetError                          InternalErrorCode = "DbGetError"
	DbGetItemsError                     InternalErrorCode = "DbGetItemsError"
	DbPutError                          InternalErrorCode = "DbPutError"
	DbQueryError                        InternalErrorCode = "DbQueryError"
	DbUpdateError                       InternalErrorCode = "DbUpdateError"
	DbWriteError                        InternalErrorCode = "DbWriteError"
	DeserializeEncryptedExportKeyError  InternalErrorCode = "DeserializeEncryptedExportKeyError"
	EmailConstructionError              InternalErrorCode = "EmailConstructionError"
	EmailTemplateRender                 InternalErrorCode = "EmailTemplateRender"
	EotsSignError                       InternalErrorCode = "EotsSignError"
	ExpectedRoleSession                 InternalErrorCode = "ExpectedRoleSession"
	GenericInternalError                InternalErrorCode = "GenericInternalError"
	GetAwsSecretError                   InternalErrorCode = "GetAwsSecretError"
	HistoricalTxBodyMissing             InternalErrorCode = "HistoricalTxBodyMissing"
	InconsistentMultiValueTestAndSet    InternalErrorCode = "InconsistentMultiValueTestAndSet"
	InternalHeaderMissing               InternalErrorCode = "InternalHeaderMissing"
	InvalidBtcAddress                   InternalErrorCode = "InvalidBtcAddress"
	InvalidEmailAddress                 InternalErrorCode = "InvalidEmailAddress"
	InvalidInternalHeaderValue          InternalErrorCode = "InvalidInternalHeaderValue"
	InvalidOperation                    InternalErrorCode = "InvalidOperation"
	InvalidPkForMaterialId              InternalErrorCode = "InvalidPkForMaterialId"
	InvalidThirdPartyIdentity           InternalErrorCode = "InvalidThirdPartyIdentity"
	InvalidThrottleId                   InternalErrorCode = "InvalidThrottleId"
	InvalidUploadObjectId               InternalErrorCode = "InvalidUploadObjectId"
	KmsDisableKeyError                  InternalErrorCode = "KmsDisableKeyError"
	KmsEnableKeyError                   InternalErrorCode = "KmsEnableKeyError"
	KmsGenerateRandomError              InternalErrorCode = "KmsGenerateRandomError"
	KmsGenerateRandomNoResponseError    InternalErrorCode = "KmsGenerateRandomNoResponseError"
	KmsKeyWithoutId                     InternalErrorCode = "KmsKeyWithoutId"
	LambdaFailure                       InternalErrorCode = "LambdaFailure"
	LambdaInvokeError                   InternalErrorCode = "LambdaInvokeError"
	LambdaNoResponseError               InternalErrorCode = "LambdaNoResponseError"
	LambdaUnparsableResponse            InternalErrorCode = "LambdaUnparsableResponse"
	MalformedTotpBytes                  InternalErrorCode = "MalformedTotpBytes"
	ManagedStateMissing                 InternalErrorCode = "ManagedStateMissing"
	MaterialIdError                     InternalErrorCode = "MaterialIdError"
	MissingKeyMetadata                  InternalErrorCode = "MissingKeyMetadata"
	MissingUserEmail                    InternalErrorCode = "MissingUserEmail"
	NoMaterialId                        InternalErrorCode = "NoMaterialId"
	OidcAuthWithoutOrg                  InternalErrorCode = "OidcAuthWithoutOrg"
	OidcIdentityHeaderMissing           InternalErrorCode = "OidcIdentityHeaderMissing"
	OidcIdentityParseError              InternalErrorCode = "OidcIdentityParseError"
	OidcIssuerInvalidJwk                InternalErrorCode = "OidcIssuerInvalidJwk"
	OidcOrgMismatch                     InternalErrorCode = "OidcOrgMismatch"
	OrgParentLoop                       InternalErrorCode = "OrgParentLoop"
	ParentOrgNotFound                   InternalErrorCode = "ParentOrgNotFound"
	ParseDerivationPathError            InternalErrorCode = "ParseDerivationPathError"
	PasswordHashParseError              InternalErrorCode = "PasswordHashParseError"
	PolicyEngineError                   InternalErrorCode = "PolicyEngineError"
	PolicyEngineNotFound                InternalErrorCode = "PolicyEngineNotFound"
	ReEncryptUserExport                 InternalErrorCode = "ReEncryptUserExport"
	RequestLocalStateAlreadySet         InternalErrorCode = "RequestLocalStateAlreadySet"
	ReqwestError                        InternalErrorCode = "ReqwestError"
	ResolvedParentOrgWithNoScopeCeiling InternalErrorCode = "ResolvedParentOrgWithNoScopeCeiling"
	S3CopyError                         InternalErrorCode = "S3CopyError"
	S3DownloadError                     InternalErrorCode = "S3DownloadError"
	S3PresignedUrlError                 InternalErrorCode = "S3PresignedUrlError"
	S3UploadError                       InternalErrorCode = "S3UploadError"
	SecretNotFound                      InternalErrorCode = "SecretNotFound"
	SendMailError                       InternalErrorCode = "SendMailError"
	SerdeError                          InternalErrorCode = "SerdeError"
	SerializeEncryptedExportKeyError    InternalErrorCode = "SerializeEncryptedExportKeyError"
	SessionOrgIdMissing                 InternalErrorCode = "SessionOrgIdMissing"
	SnsGetSubscriptionAttributesError   InternalErrorCode = "SnsGetSubscriptionAttributesError"
	SnsPublishBatchError                InternalErrorCode = "SnsPublishBatchError"
	SnsSetSubscriptionAttributesError   InternalErrorCode = "SnsSetSubscriptionAttributesError"
	SnsSubscribeError                   InternalErrorCode = "SnsSubscribeError"
	SnsSubscriptionAttributesMissing    InternalErrorCode = "SnsSubscriptionAttributesMissing"
	SnsUnsubscribeError                 InternalErrorCode = "SnsUnsubscribeError"
	SplitSignerError                    InternalErrorCode = "SplitSignerError"
	SystemTimeError                     InternalErrorCode = "SystemTimeError"
	TestAndSetError                     InternalErrorCode = "TestAndSetError"
	UncheckedOrg                        InternalErrorCode = "UncheckedOrg"
)

// Defines values for KeyType.
const (
	BabylonEots           KeyType = "BabylonEots"
	BlsAvaIcm             KeyType = "BlsAvaIcm"
	BlsInactive           KeyType = "BlsInactive"
	BlsPub                KeyType = "BlsPub"
	Ed25519AptosAddr      KeyType = "Ed25519AptosAddr"
	Ed25519CardanoAddrVk  KeyType = "Ed25519CardanoAddrVk"
	Ed25519SolanaAddr     KeyType = "Ed25519SolanaAddr"
	Ed25519StellarAddr    KeyType = "Ed25519StellarAddr"
	Ed25519SubstrateAddr  KeyType = "Ed25519SubstrateAddr"
	Ed25519SuiAddr        KeyType = "Ed25519SuiAddr"
	Ed25519TendermintAddr KeyType = "Ed25519TendermintAddr"
	Ed25519TonAddr        KeyType = "Ed25519TonAddr"
	Mnemonic              KeyType = "Mnemonic"
	P256CosmosAddr        KeyType = "P256CosmosAddr"
	P256Neo3Addr          KeyType = "P256Neo3Addr"
	P256OntologyAddr      KeyType = "P256OntologyAddr"
	SecpAvaAddr           KeyType = "SecpAvaAddr"
	SecpAvaTestAddr       KeyType = "SecpAvaTestAddr"
	SecpBtc               KeyType = "SecpBtc"
	SecpBtcLegacy         KeyType = "SecpBtcLegacy"
	SecpBtcLegacyTest     KeyType = "SecpBtcLegacyTest"
	SecpBtcTest           KeyType = "SecpBtcTest"
	SecpCosmosAddr        KeyType = "SecpCosmosAddr"
	SecpDogeAddr          KeyType = "SecpDogeAddr"
	SecpDogeTestAddr      KeyType = "SecpDogeTestAddr"
	SecpEthAddr           KeyType = "SecpEthAddr"
	SecpTronAddr          KeyType = "SecpTronAddr"
	Stark                 KeyType = "Stark"
	TaprootBtc            KeyType = "TaprootBtc"
	TaprootBtcTest        KeyType = "TaprootBtcTest"
)

// Defines values for MfaType0.
const (
	CubeSigner MfaType0 = "CubeSigner"
)

// Defines values for MfaType1.
const (
	Totp MfaType1 = "Totp"
)

// Defines values for MfaType2.
const (
	EmailOtp MfaType2 = "EmailOtp"
)

// Defines values for MfaType3.
const (
	Fido MfaType3 = "Fido"
)

// Defines values for NotFoundErrorCode.
const (
	FidoChallengeNotFound        NotFoundErrorCode = "FidoChallengeNotFound"
	FidoKeyNotFound              NotFoundErrorCode = "FidoKeyNotFound"
	OrgExportCiphertextNotFound  NotFoundErrorCode = "OrgExportCiphertextNotFound"
	TotpChallengeNotFound        NotFoundErrorCode = "TotpChallengeNotFound"
	TotpNotConfigured            NotFoundErrorCode = "TotpNotConfigured"
	UploadObjectNotFound         NotFoundErrorCode = "UploadObjectNotFound"
	UriSegmentInvalid            NotFoundErrorCode = "UriSegmentInvalid"
	UriSegmentMissing            NotFoundErrorCode = "UriSegmentMissing"
	UserExportCiphertextNotFound NotFoundErrorCode = "UserExportCiphertextNotFound"
	UserExportRequestNotFound    NotFoundErrorCode = "UserExportRequestNotFound"
)

// Defines values for OperationKind.
const (
	OperationKindAvaChainTxSign OperationKind = "AvaChainTxSign"
	OperationKindAvaSign        OperationKind = "AvaSign"
	OperationKindBabylonStaking OperationKind = "BabylonStaking"
	OperationKindBlobSign       OperationKind = "BlobSign"
	OperationKindBtcMessageSign OperationKind = "BtcMessageSign"
	OperationKindBtcSign        OperationKind = "BtcSign"
	OperationKindEip191Sign     OperationKind = "Eip191Sign"
	OperationKindEip712Sign     OperationKind = "Eip712Sign"
	OperationKindEotsNonces     OperationKind = "EotsNonces"
	OperationKindEotsSign       OperationKind = "EotsSign"
	OperationKindEth1Sign       OperationKind = "Eth1Sign"
	OperationKindEth2Sign       OperationKind = "Eth2Sign"
	OperationKindEth2Stake      OperationKind = "Eth2Stake"
	OperationKindEth2Unstake    OperationKind = "Eth2Unstake"
	OperationKindPsbtSign       OperationKind = "PsbtSign"
	OperationKindRoleUpdate     OperationKind = "RoleUpdate"
	OperationKindSolanaSign     OperationKind = "SolanaSign"
	OperationKindSuiSign        OperationKind = "SuiSign"
	OperationKindTaprootSign    OperationKind = "TaprootSign"
	OperationKindTendermintSign OperationKind = "TendermintSign"
)

// Defines values for PolicyErrorOwnCodes.
const (
	AddKeyToRoleDisallowed                  PolicyErrorOwnCodes = "AddKeyToRoleDisallowed"
	BabylonStakingChangeAddress             PolicyErrorOwnCodes = "BabylonStakingChangeAddress"
	BabylonStakingDisallowed                PolicyErrorOwnCodes = "BabylonStakingDisallowed"
	BabylonStakingExplicitParams            PolicyErrorOwnCodes = "BabylonStakingExplicitParams"
	BabylonStakingFee                       PolicyErrorOwnCodes = "BabylonStakingFee"
	BabylonStakingFinalityProviderPk        PolicyErrorOwnCodes = "BabylonStakingFinalityProviderPk"
	BabylonStakingLockTime                  PolicyErrorOwnCodes = "BabylonStakingLockTime"
	BabylonStakingNetwork                   PolicyErrorOwnCodes = "BabylonStakingNetwork"
	BabylonStakingParamsVersion             PolicyErrorOwnCodes = "BabylonStakingParamsVersion"
	BabylonStakingStakerPk                  PolicyErrorOwnCodes = "BabylonStakingStakerPk"
	BabylonStakingValue                     PolicyErrorOwnCodes = "BabylonStakingValue"
	BabylonStakingWithdrawalAddress         PolicyErrorOwnCodes = "BabylonStakingWithdrawalAddress"
	BtcMessageSigningNotAllowed             PolicyErrorOwnCodes = "BtcMessageSigningNotAllowed"
	BtcSighashTypeDisallowed                PolicyErrorOwnCodes = "BtcSighashTypeDisallowed"
	BtcSignatureExceededValue               PolicyErrorOwnCodes = "BtcSignatureExceededValue"
	BtcTxDisallowedOutputs                  PolicyErrorOwnCodes = "BtcTxDisallowedOutputs"
	BtcValueOverflow                        PolicyErrorOwnCodes = "BtcValueOverflow"
	DeniedByWebhook                         PolicyErrorOwnCodes = "DeniedByWebhook"
	Eip191SigningNotAllowed                 PolicyErrorOwnCodes = "Eip191SigningNotAllowed"
	Eip712SigningNotAllowed                 PolicyErrorOwnCodes = "Eip712SigningNotAllowed"
	Erc20ContractAddressUndefined           PolicyErrorOwnCodes = "Erc20ContractAddressUndefined"
	Erc20ContractChainIdUndefined           PolicyErrorOwnCodes = "Erc20ContractChainIdUndefined"
	Erc20DataInvalid                        PolicyErrorOwnCodes = "Erc20DataInvalid"
	Erc20ExceededApproveLimit               PolicyErrorOwnCodes = "Erc20ExceededApproveLimit"
	Erc20ExceededTransferLimit              PolicyErrorOwnCodes = "Erc20ExceededTransferLimit"
	Erc20NotInContractAllowlist             PolicyErrorOwnCodes = "Erc20NotInContractAllowlist"
	Erc20ReceiverMismatch                   PolicyErrorOwnCodes = "Erc20ReceiverMismatch"
	Erc20SpenderMismatch                    PolicyErrorOwnCodes = "Erc20SpenderMismatch"
	Eth2ConcurrentUnstaking                 PolicyErrorOwnCodes = "Eth2ConcurrentUnstaking"
	Eth2ExceededMaxUnstake                  PolicyErrorOwnCodes = "Eth2ExceededMaxUnstake"
	EvmDataDisallowed                       PolicyErrorOwnCodes = "EvmDataDisallowed"
	EvmTxExceededGasCost                    PolicyErrorOwnCodes = "EvmTxExceededGasCost"
	EvmTxExceededValue                      PolicyErrorOwnCodes = "EvmTxExceededValue"
	EvmTxGasCostUndefined                   PolicyErrorOwnCodes = "EvmTxGasCostUndefined"
	EvmTxReceiverMismatch                   PolicyErrorOwnCodes = "EvmTxReceiverMismatch"
	EvmTxSenderMismatch                     PolicyErrorOwnCodes = "EvmTxSenderMismatch"
	EvmTxValueUndefined                     PolicyErrorOwnCodes = "EvmTxValueUndefined"
	InvalidSourceIp                         PolicyErrorOwnCodes = "InvalidSourceIp"
	KeyAccessError                          PolicyErrorOwnCodes = "KeyAccessError"
	KeyInMultipleRoles                      PolicyErrorOwnCodes = "KeyInMultipleRoles"
	KeysAlreadyInRole                       PolicyErrorOwnCodes = "KeysAlreadyInRole"
	NoOidcAuthSourcesDefined                PolicyErrorOwnCodes = "NoOidcAuthSourcesDefined"
	NotInIpv4Allowlist                      PolicyErrorOwnCodes = "NotInIpv4Allowlist"
	NotInOriginAllowlist                    PolicyErrorOwnCodes = "NotInOriginAllowlist"
	OidcSourceNotAllowed                    PolicyErrorOwnCodes = "OidcSourceNotAllowed"
	PolicyDisjunctionError                  PolicyErrorOwnCodes = "PolicyDisjunctionError"
	PolicyNegationError                     PolicyErrorOwnCodes = "PolicyNegationError"
	PsbtSigningDisallowed                   PolicyErrorOwnCodes = "PsbtSigningDisallowed"
	RawSigningNotAllowed                    PolicyErrorOwnCodes = "RawSigningNotAllowed"
	RequireRoleSessionKeyAccessError        PolicyErrorOwnCodes = "RequireRoleSessionKeyAccessError"
	SegwitSigningDisallowed                 PolicyErrorOwnCodes = "SegwitSigningDisallowed"
	SolanaInstructionCountHigh              PolicyErrorOwnCodes = "SolanaInstructionCountHigh"
	SolanaInstructionCountLow               PolicyErrorOwnCodes = "SolanaInstructionCountLow"
	SolanaInstructionMismatch               PolicyErrorOwnCodes = "SolanaInstructionMismatch"
	SolanaNotInInstructionAllowlist         PolicyErrorOwnCodes = "SolanaNotInInstructionAllowlist"
	SuiTxReceiversDisallowedCommand         PolicyErrorOwnCodes = "SuiTxReceiversDisallowedCommand"
	SuiTxReceiversDisallowedTransactionKind PolicyErrorOwnCodes = "SuiTxReceiversDisallowedTransactionKind"
	SuiTxReceiversDisallowedTransferAddress PolicyErrorOwnCodes = "SuiTxReceiversDisallowedTransferAddress"
	TaprootSigningDisallowed                PolicyErrorOwnCodes = "TaprootSigningDisallowed"
	TimeLocked                              PolicyErrorOwnCodes = "TimeLocked"
	WasmPolicyDenied                        PolicyErrorOwnCodes = "WasmPolicyDenied"
	WebhookPoliciesDisabled                 PolicyErrorOwnCodes = "WebhookPoliciesDisabled"
)

// Defines values for PreconditionErrorOwnCodes.
const (
	BabylonEotsConcurrentSigning                  PreconditionErrorOwnCodes = "BabylonEotsConcurrentSigning"
	ConcurrentSigningWhenTimeLimitPolicyIsDefined PreconditionErrorOwnCodes = "ConcurrentSigningWhenTimeLimitPolicyIsDefined"
	Eth2AttestationSourceEpochTooLow              PreconditionErrorOwnCodes = "Eth2AttestationSourceEpochTooLow"
	Eth2AttestationTargetEpochTooLow              PreconditionErrorOwnCodes = "Eth2AttestationTargetEpochTooLow"
	Eth2ConcurrentAttestationSigning              PreconditionErrorOwnCodes = "Eth2ConcurrentAttestationSigning"
	Eth2ConcurrentBlockSigning                    PreconditionErrorOwnCodes = "Eth2ConcurrentBlockSigning"
	Eth2MultiDepositToNonGeneratedKey             PreconditionErrorOwnCodes = "Eth2MultiDepositToNonGeneratedKey"
	Eth2MultiDepositUnknownInitialDeposit         PreconditionErrorOwnCodes = "Eth2MultiDepositUnknownInitialDeposit"
	Eth2MultiDepositWithdrawalAddressMismatch     PreconditionErrorOwnCodes = "Eth2MultiDepositWithdrawalAddressMismatch"
	Eth2ProposerSlotTooLow                        PreconditionErrorOwnCodes = "Eth2ProposerSlotTooLow"
	MfaApprovalsNotYetValid                       PreconditionErrorOwnCodes = "MfaApprovalsNotYetValid"
	TendermintConcurrentSigning                   PreconditionErrorOwnCodes = "TendermintConcurrentSigning"
	TendermintStateError                          PreconditionErrorOwnCodes = "TendermintStateError"
)

// Defines values for Scope0.
const (
	Export                       Scope0 = "export:*"
	ExportUser                   Scope0 = "export:user:*"
	ExportUserComplete           Scope0 = "export:user:complete"
	ExportUserInit               Scope0 = "export:user:init"
	Manage                       Scope0 = "manage:*"
	ManageEmail                  Scope0 = "manage:email"
	ManageExport                 Scope0 = "manage:export:*"
	ManageExportOrg              Scope0 = "manage:export:org:*"
	ManageExportOrgGet           Scope0 = "manage:export:org:get"
	ManageExportUser             Scope0 = "manage:export:user:*"
	ManageExportUserDelete       Scope0 = "manage:export:user:delete"
	ManageExportUserList         Scope0 = "manage:export:user:list"
	ManageIdentity               Scope0 = "manage:identity:*"
	ManageIdentityAdd            Scope0 = "manage:identity:add"
	ManageIdentityList           Scope0 = "manage:identity:list"
	ManageIdentityRemove         Scope0 = "manage:identity:remove"
	ManageIdentityVerify         Scope0 = "manage:identity:verify"
	ManageKey                    Scope0 = "manage:key:*"
	ManageKeyCreate              Scope0 = "manage:key:create"
	ManageKeyDelete              Scope0 = "manage:key:delete"
	ManageKeyGet                 Scope0 = "manage:key:get"
	ManageKeyHistoryTxList       Scope0 = "manage:key:history:tx:list"
	ManageKeyImport              Scope0 = "manage:key:import"
	ManageKeyList                Scope0 = "manage:key:list"
	ManageKeyListRoles           Scope0 = "manage:key:listRoles"
	ManageKeyReadonly            Scope0 = "manage:key:readonly"
	ManageKeyUpdate              Scope0 = "manage:key:update:*"
	ManageKeyUpdateEditPolicy    Scope0 = "manage:key:update:editPolicy"
	ManageKeyUpdateEnabled       Scope0 = "manage:key:update:enabled"
	ManageKeyUpdateMetadata      Scope0 = "manage:key:update:metadata"
	ManageKeyUpdateOwner         Scope0 = "manage:key:update:owner"
	ManageKeyUpdatePolicy        Scope0 = "manage:key:update:policy"
	ManageMfa                    Scope0 = "manage:mfa:*"
	ManageMfaList                Scope0 = "manage:mfa:list"
	ManageMfaReadonly            Scope0 = "manage:mfa:readonly"
	ManageMfaRegister            Scope0 = "manage:mfa:register:*"
	ManageMfaRegisterFido        Scope0 = "manage:mfa:register:fido"
	ManageMfaRegisterTotp        Scope0 = "manage:mfa:register:totp"
	ManageMfaUnregister          Scope0 = "manage:mfa:unregister:*"
	ManageMfaUnregisterFido      Scope0 = "manage:mfa:unregister:fido"
	ManageMfaUnregisterTotp      Scope0 = "manage:mfa:unregister:totp"
	ManageMfaVerify              Scope0 = "manage:mfa:verify:*"
	ManageMfaVerifyTotp          Scope0 = "manage:mfa:verify:totp"
	ManageMfaVote                Scope0 = "manage:mfa:vote:*"
	ManageMfaVoteCs              Scope0 = "manage:mfa:vote:cs"
	ManageMfaVoteEmail           Scope0 = "manage:mfa:vote:email"
	ManageMfaVoteFido            Scope0 = "manage:mfa:vote:fido"
	ManageMfaVoteTotp            Scope0 = "manage:mfa:vote:totp"
	ManageMmi                    Scope0 = "manage:mmi:*"
	ManageMmiDelete              Scope0 = "manage:mmi:delete"
	ManageMmiGet                 Scope0 = "manage:mmi:get"
	ManageMmiList                Scope0 = "manage:mmi:list"
	ManageMmiReadonly            Scope0 = "manage:mmi:readonly"
	ManageMmiReject              Scope0 = "manage:mmi:reject"
	ManageOrg                    Scope0 = "manage:org:*"
	ManageOrgAddUser             Scope0 = "manage:org:addUser"
	ManageOrgCreate              Scope0 = "manage:org:create"
	ManageOrgDeleteUser          Scope0 = "manage:org:deleteUser"
	ManageOrgGet                 Scope0 = "manage:org:get"
	ManageOrgInviteAlien         Scope0 = "manage:org:inviteAlien"
	ManageOrgInviteUser          Scope0 = "manage:org:inviteUser"
	ManageOrgListUsers           Scope0 = "manage:org:listUsers"
	ManageOrgMetricsQuery        Scope0 = "manage:org:metrics:query"
	ManageOrgReadonly            Scope0 = "manage:org:readonly"
	ManageOrgUpdateMembership    Scope0 = "manage:org:updateMembership"
	ManageOrgUserGet             Scope0 = "manage:org:user:get"
	ManagePolicy                 Scope0 = "manage:policy:*"
	ManagePolicyCreate           Scope0 = "manage:policy:create"
	ManagePolicyGet              Scope0 = "manage:policy:get"
	ManagePolicyUpdate           Scope0 = "manage:policy:update:*"
	ManagePolicyUpdateEditPolicy Scope0 = "manage:policy:update:editPolicy"
	ManagePolicyUpdateName       Scope0 = "manage:policy:update:name"
	ManagePolicyUpdateOwner      Scope0 = "manage:policy:update:owner"
	ManagePolicyUpdateRule       Scope0 = "manage:policy:update:rule"
	ManagePolicyWasm             Scope0 = "manage:policy:wasm:*"
	ManagePolicyWasmUpload       Scope0 = "manage:policy:wasm:upload"
	ManageReadonly               Scope0 = "manage:readonly"
	ManageRole                   Scope0 = "manage:role:*"
	ManageRoleCreate             Scope0 = "manage:role:create"
	ManageRoleDelete             Scope0 = "manage:role:delete"
	ManageRoleGet                Scope0 = "manage:role:get:*"
	ManageRoleGetKeys            Scope0 = "manage:role:get:keys"
	ManageRoleGetKeysGet         Scope0 = "manage:role:get:keys:get"
	ManageRoleGetKeysList        Scope0 = "manage:role:get:keys:list"
	ManageRoleGetUsers           Scope0 = "manage:role:get:users"
	ManageRoleHistoryTxList      Scope0 = "manage:role:history:tx:list"
	ManageRoleList               Scope0 = "manage:role:list"
	ManageRoleReadonly           Scope0 = "manage:role:readonly"
	ManageRoleUpdate             Scope0 = "manage:role:update:*"
	ManageRoleUpdateEditPolicy   Scope0 = "manage:role:update:editPolicy"
	ManageRoleUpdateEnabled      Scope0 = "manage:role:update:enabled"
	ManageRoleUpdateKey          Scope0 = "manage:role:update:key:*"
	ManageRoleUpdateKeyAdd       Scope0 = "manage:role:update:key:add"
	ManageRoleUpdateKeyRemove    Scope0 = "manage:role:update:key:remove"
	ManageRoleUpdatePolicy       Scope0 = "manage:role:update:policy"
	ManageRoleUpdateUser         Scope0 = "manage:role:update:user:*"
	ManageRoleUpdateUserAdd      Scope0 = "manage:role:update:user:add"
	ManageRoleUpdateUserRemove   Scope0 = "manage:role:update:user:remove"
	ManageSession                Scope0 = "manage:session:*"
	ManageSessionCreate          Scope0 = "manage:session:create"
	ManageSessionExtend          Scope0 = "manage:session:extend"
	ManageSessionGet             Scope0 = "manage:session:get"
	ManageSessionList            Scope0 = "manage:session:list"
	ManageSessionReadonly        Scope0 = "manage:session:readonly"
	ManageSessionRevoke          Scope0 = "manage:session:revoke"
	Mmi                          Scope0 = "mmi:*"
	OrgAccess                    Scope0 = "orgAccess:*"
	OrgAccessChild               Scope0 = "orgAccess:child:*"
	Sign                         Scope0 = "sign:*"
	SignAva                      Scope0 = "sign:ava"
	SignBabylon                  Scope0 = "sign:babylon:*"
	SignBabylonEots              Scope0 = "sign:babylon:eots:*"
	SignBabylonEotsNonces        Scope0 = "sign:babylon:eots:nonces"
	SignBabylonEotsSign          Scope0 = "sign:babylon:eots:sign"
	SignBabylonStaking           Scope0 = "sign:babylon:staking:*"
	SignBabylonStakingDeposit    Scope0 = "sign:babylon:staking:deposit"
	SignBabylonStakingUnbond     Scope0 = "sign:babylon:staking:unbond"
	SignBabylonStakingWithdraw   Scope0 = "sign:babylon:staking:withdraw"
	SignBlob                     Scope0 = "sign:blob"
	SignBtc                      Scope0 = "sign:btc:*"
	SignBtcMessage               Scope0 = "sign:btc:message:*"
	SignBtcMessageLegacy         Scope0 = "sign:btc:message:legacy"
	SignBtcMessageSegwit         Scope0 = "sign:btc:message:segwit"
	SignBtcPsbt                  Scope0 = "sign:btc:psbt:*"
	SignBtcPsbtLegacy            Scope0 = "sign:btc:psbt:legacy"
	SignBtcPsbtSegwit            Scope0 = "sign:btc:psbt:segwit"
	SignBtcPsbtTaproot           Scope0 = "sign:btc:psbt:taproot"
	SignBtcSegwit                Scope0 = "sign:btc:segwit"
	SignBtcTaproot               Scope0 = "sign:btc:taproot"
	SignEth2                     Scope0 = "sign:eth2:*"
	SignEth2Stake                Scope0 = "sign:eth2:stake"
	SignEth2Unstake              Scope0 = "sign:eth2:unstake"
	SignEth2Validate             Scope0 = "sign:eth2:validate"
	SignEvm                      Scope0 = "sign:evm:*"
	SignEvmEip191                Scope0 = "sign:evm:eip191"
	SignEvmEip712                Scope0 = "sign:evm:eip712"
	SignEvmTx                    Scope0 = "sign:evm:tx"
	SignMmi                      Scope0 = "sign:mmi"
	SignSolana                   Scope0 = "sign:solana"
	SignSui                      Scope0 = "sign:sui"
	SignTendermint               Scope0 = "sign:tendermint"
)

// Defines values for ScopeSet0.
const (
	All ScopeSet0 = "All"
)

// Defines values for SignerErrorOwnCodes.
const (
	EnclaveError          SignerErrorOwnCodes = "EnclaveError"
	JrpcError             SignerErrorOwnCodes = "JrpcError"
	PreComputed           SignerErrorOwnCodes = "PreComputed"
	ProxyStartError       SignerErrorOwnCodes = "ProxyStartError"
	StatusCodeWithMessage SignerErrorOwnCodes = "StatusCodeWithMessage"
	UnhandledError        SignerErrorOwnCodes = "UnhandledError"
)

// Defines values for UnauthorizedErrorCode.
const (
	AuthorizationHeaderMissing  UnauthorizedErrorCode = "AuthorizationHeaderMissing"
	EndpointRequiresUserSession UnauthorizedErrorCode = "EndpointRequiresUserSession"
	RefreshTokenMissing         UnauthorizedErrorCode = "RefreshTokenMissing"
)

// AcceptedResponse defines model for AcceptedResponse.
type AcceptedResponse struct {
	Accepted  *AcceptedValue  `json:"accepted"`
	ErrorCode SignerErrorCode `json:"error_code"`

	// Message Error message
	Message string `json:"message"`

	// RequestId Optional request identifier
	RequestId *string `json:"request_id,omitempty"`
}

// AcceptedValue Different responses we return for status code "202 Accepted".
//
// Even though "202 Accepted" is a successful response, we represent
// it as a Rust error because that makes it easy to have route handlers
// return `Result<T, SignerError>` where `T` is the type of the
// response for the status code "200 Ok".
type AcceptedValue struct {
	union json.RawMessage
}

// AcceptedValue0 defines model for .
type AcceptedValue0 struct {
	MfaRequired struct {
		// Id Always set to first MFA id from `Self::ids`
		Id string `json:"id"`

		// Ids Non-empty MFA request IDs
		Ids []string `json:"ids"`

		// OrgId Organization id
		OrgId   string              `json:"org_id"`
		Session *NewSessionResponse `json:"session"`
	} `json:"MfaRequired"`
}

// AcceptedValueCode defines model for AcceptedValueCode.
type AcceptedValueCode string

// AuthData Data required for both `authenticate` and `refresh`.
type AuthData struct {
	EpochNum int32 `json:"epoch_num"`

	// EpochToken Wrapper around a zeroizing 32-byte fixed-size array
	EpochToken B32    `json:"epoch_token"`
	OtherToken string `json:"other_token"`
}

// B32 Wrapper around a zeroizing 32-byte fixed-size array
type B32 = string

// BadGatewayErrorCode defines model for BadGatewayErrorCode.
type BadGatewayErrorCode string

// BadRequestErrorCode defines model for BadRequestErrorCode.
type BadRequestErrorCode string

// BlobSignRequest defines model for BlobSignRequest.
type BlobSignRequest struct {
	// BlsDst An optional domain separation tag for use *only* with BLS signing requests.
	// This field must not be supplied for requests involving non-BLS key types.
	//
	// If this field is not present or null, the domain separation tag specified in
	// the IETF BLS Signatures draft versions 4 and 5, section 4.2.3 (minimal pubkey
	// size variant) is used.
	//
	// Otherwise, this field must contain a base-64 string encoding a non-empty byte
	// vector. When using a custom tag, RFC9380 (Section 3.1) recommends a length of
	// at least 16 bytes.
	BlsDst *string `json:"bls_dst"`

	// MessageBase64 The blob to sign, encoded as a base64 string.
	//
	// Note that certain signing keys impose additional requirements on the contents of
	// the message. For example, Secp256k1 keys require that the message is 32 bytes long.
	MessageBase64 string `json:"message_base64"`

	// Metadata Optional metadata. Passing additional information as metadata can be used to make reviewing
	// of pending MFA requests and/or historical key transactions more transparent. It can also be used e.g., to carry additional data to WebHook policies.
	Metadata *interface{} `json:"metadata"`

	// SegwitTweak An optional tweak value for use *only* with Segwit (i.e., SecpBtc and SecpBtcTest)
	// keys. This field must not be supplied for requests involving any other key type.
	//
	// If this field is not present or null, no tweak is applied. Otherwise, this field
	// must contain a base-64 string encoding a vector of exactly 32 bytes. See the
	// CubeSigner documentation for more information on the Segwit tweaking procedure.
	SegwitTweak *string `json:"segwit_tweak"`

	// TaprootTweak An optional tweak value for use *only* with Taproot keys. This field must not
	// be supplied for requests involving any other key type.
	//
	// If this field is not present or null, no tweak is applied. If the field is an
	// empty string, the key is tweaked with an unspendable script path per BIP0341.
	// Otherwise, this field must contain a 32-byte, base-64 string representing the
	// Merkle root with which to tweak the key before signing.
	TaprootTweak *string `json:"taproot_tweak"`
}

// ClientSessionInfo Session information sent to the client.
// This struct works in tandem with its server-side counterpart [`SessionData`].
type ClientSessionInfo struct {
	// AuthToken Token to use for authorization.
	AuthToken string `json:"auth_token"`

	// AuthTokenExp DateTime measured in seconds since unix epoch.
	// A wrapper type for serialization that encodes a [`SystemTime`] as a [`u64`]
	// representing the number of seconds since [`SystemTime::UNIX_EPOCH`].
	AuthTokenExp EpochDateTime `json:"auth_token_exp"`

	// Epoch Epoch at which the token was last refreshed
	Epoch int32 `json:"epoch"`

	// EpochToken Wrapper around a zeroizing 32-byte fixed-size array
	EpochToken B32 `json:"epoch_token"`

	// RefreshToken Token to use for refreshing the `(auth, refresh)` token pair
	RefreshToken string `json:"refresh_token"`

	// RefreshTokenExp DateTime measured in seconds since unix epoch.
	// A wrapper type for serialization that encodes a [`SystemTime`] as a [`u64`]
	// representing the number of seconds since [`SystemTime::UNIX_EPOCH`].
	RefreshTokenExp EpochDateTime `json:"refresh_token_exp"`

	// SessionId Session ID
	SessionId string `json:"session_id"`
}

// CommonFields Fields that are common to different types of resources such as keys
type CommonFields struct {
	Created *EpochDateTime `json:"created"`

	// EditPolicy A policy which governs when and who is allowed to update the entity this policy is
	// attached to (e.g., a role or a key).
	//
	// When attached to a role, by default, this policy applies to role deletion and all
	// role updates (including adding/removing keys and users); in terms of scopes,
	// it applies to `manage:role:update:*` and `manage:role:delete`.
	//
	// When attached to a key, by default, this policy applies to key deletion, all
	// key updates, and adding/removing that key to/from a role; in terms of scopes,
	// it applies to `manage:key:update:*`, `manage:key:delete`, `manage:role:update:key:*`.
	//
	// This default can be changed by setting the `applies_to_scopes` property.
	EditPolicy   *EditPolicy    `json:"edit_policy,omitempty"`
	LastModified *EpochDateTime `json:"last_modified"`

	// Metadata User-defined metadata. When rendering (e.g., in the browser) you should treat
	// it as untrusted user data (and avoid injecting metadata into HTML directly) if
	// untrusted users can create/update keys (or their metadata).
	Metadata *interface{} `json:"metadata,omitempty"`

	// Version Version of this object
	Version *int64 `json:"version,omitempty"`
}

// EditPolicy A policy which governs when and who is allowed to update the entity this policy is
// attached to (e.g., a role or a key).
//
// When attached to a role, by default, this policy applies to role deletion and all
// role updates (including adding/removing keys and users); in terms of scopes,
// it applies to `manage:role:update:*` and `manage:role:delete`.
//
// When attached to a key, by default, this policy applies to key deletion, all
// key updates, and adding/removing that key to/from a role; in terms of scopes,
// it applies to `manage:key:update:*`, `manage:key:delete`, `manage:role:update:key:*`.
//
// This default can be changed by setting the `applies_to_scopes` property.
type EditPolicy struct {
	// AppliesToScopes A set of scopes.
	AppliesToScopes *ScopeSet      `json:"applies_to_scopes,omitempty"`
	Mfa             *MfaPolicy     `json:"mfa"`
	TimeLockUntil   *EpochDateTime `json:"time_lock_until"`
}

// EpochDateTime DateTime measured in seconds since unix epoch.
// A wrapper type for serialization that encodes a [`SystemTime`] as a [`u64`]
// representing the number of seconds since [`SystemTime::UNIX_EPOCH`].
type EpochDateTime = int64

// ErrorResponse The structure of ErrorResponse must match the response template that AWS uses
type ErrorResponse struct {
	Accepted  *AcceptedValue  `json:"accepted"`
	ErrorCode SignerErrorCode `json:"error_code"`

	// Message Error message
	Message string `json:"message"`

	// RequestId Optional request identifier
	RequestId *string `json:"request_id,omitempty"`
}

// EvmTxCmp defines model for EvmTxCmp.
type EvmTxCmp struct {
	// Grace To prevent replay attacks, any given MFA receipt is normally allowed to be used only once.
	//
	// In this case, however, because EVM transactions already have a replay prevention mechanism
	// (namely the 'nonce' property), we allow the user to specify a grace period (in seconds) to
	// indicate how long an MFA receipt should remain valid after its first use.
	//
	// Note that we allow both 'grace' and 'ignore_nonce' to be set because once an MFA request
	// enters its grace period we unconditionally set its 'ignore_nonce' property to 'false' to
	// ensure that any subsequent requests that claim the same receipt must sign for the same
	// nonce as the request we signed originally with that receipt.
	//
	// Also note that the grace period cannot extend the lifetime of an MFA request beyond its
	// original expiration date.
	//
	// The grace period must not be greater than 30 days.
	Grace *int64 `json:"grace"`

	// IgnoreGas Whether the 'gas' property of the EVM transaction is allowed to be different.
	IgnoreGas *bool `json:"ignore_gas,omitempty"`

	// IgnoreNonce Whether the 'nonce' property of the EVM transaction is allowed to be different.
	IgnoreNonce *bool `json:"ignore_nonce,omitempty"`
}

// EvmTxDepositErrorCode defines model for EvmTxDepositErrorCode.
type EvmTxDepositErrorCode string

// ForbiddenErrorCode defines model for ForbiddenErrorCode.
type ForbiddenErrorCode string

// HttpRequestCmp How to compare HTTP requests when verifying MFA receipt (see [MfaRequest::verify_request])
type HttpRequestCmp struct {
	union json.RawMessage
}

// HttpRequestCmp0 The requests must match exactly. Any given MFA receipt can be used at most once.
type HttpRequestCmp0 string

// HttpRequestCmp1 defines model for .
type HttpRequestCmp1 struct {
	EvmTx EvmTxCmp `json:"EvmTx"`
}

// HttpRequestCmp2 defines model for .
type HttpRequestCmp2 struct {
	SolanaTx SolanaTxCmp `json:"SolanaTx"`
}

// InternalErrorCode defines model for InternalErrorCode.
type InternalErrorCode string

// KeyDerivationInfo Derivation-related metadata for keys derived from a long-lived mnemonic
type KeyDerivationInfo struct {
	// DerivationPath The derivation path used to derive this key
	DerivationPath string `json:"derivation_path"`

	// MnemonicId The mnemonic-id of the key's parent mnemonic
	MnemonicId string `json:"mnemonic_id"`
}

// KeyType defines model for KeyType.
type KeyType string

// MfaPolicy defines model for MfaPolicy.
type MfaPolicy struct {
	// AllowedApprovers Users who are allowed to approve. If empty at creation time, default to the current user.
	AllowedApprovers *[]string `json:"allowed_approvers,omitempty"`

	// AllowedMfaTypes Allowed approval types. When omitted, defaults to any.
	AllowedMfaTypes *[]MfaType `json:"allowed_mfa_types"`

	// Count How many users to require to approve (defaults to 1).
	Count *int32 `json:"count,omitempty"`

	// Lifetime Duration measured in seconds
	// A wrapper type for serialization that encodes a `Duration` as a `u64` representing the number of seconds.
	Lifetime *Seconds `json:"lifetime,omitempty"`

	// NumAuthFactors How many auth factors to require per user (defaults to 1).
	NumAuthFactors *int32 `json:"num_auth_factors,omitempty"`

	// RequestComparer How to compare HTTP requests when verifying MFA receipt (see [MfaRequest::verify_request])
	RequestComparer *HttpRequestCmp `json:"request_comparer,omitempty"`

	// RestrictedOperations CubeSigner operations to which this policy should apply.
	// When omitted, applies to all operations.
	RestrictedOperations *[]OperationKind `json:"restricted_operations"`

	// TimeDelay Duration measured in seconds
	// A wrapper type for serialization that encodes a `Duration` as a `u64` representing the number of seconds.
	TimeDelay *Seconds `json:"time_delay,omitempty"`
}

// MfaType defines model for MfaType.
type MfaType struct {
	union json.RawMessage
}

// MfaType0 Log in with CubeSigner user credentials
type MfaType0 string

// MfaType1 Provide TOTP code
type MfaType1 string

// MfaType2 Provide OTP code sent via email
type MfaType2 string

// MfaType3 Answer a FIDO challenge using any registered FIDO key
type MfaType3 string

// MfaType4 defines model for .
type MfaType4 struct {
	// FidoKey Answer a FIDO challenge with a specific FIDO key
	FidoKey struct {
		// KeyId The ID of the FIDO key that must be use to approve the request
		KeyId string `json:"key_id"`
	} `json:"FidoKey"`
}

// NewSessionResponse Information about a new session, returned from multiple endpoints (e.g., login, refresh, etc.).
type NewSessionResponse struct {
	// Expiration Session expiration (in seconds since UNIX epoch), beyond which it cannot be refreshed.
	Expiration *int64 `json:"expiration,omitempty"`

	// RefreshToken Token that can be used to refresh this session.
	RefreshToken string `json:"refresh_token"`

	// SessionInfo Session information sent to the client.
	// This struct works in tandem with its server-side counterpart [`SessionData`].
	SessionInfo ClientSessionInfo `json:"session_info"`

	// Token New token to be used for authentication. Requests to signing endpoints
	// should include this value in the `Authorization` header.
	Token string `json:"token"`
}

// NotFoundErrorCode defines model for NotFoundErrorCode.
type NotFoundErrorCode string

// OperationKind All different kinds of sensitive operations
type OperationKind string

// PolicyErrorCode defines model for PolicyErrorCode.
type PolicyErrorCode struct {
	union json.RawMessage
}

// PolicyErrorOwnCodes defines model for PolicyErrorOwnCodes.
type PolicyErrorOwnCodes string

// PreconditionErrorCode defines model for PreconditionErrorCode.
type PreconditionErrorCode struct {
	union json.RawMessage
}

// PreconditionErrorOwnCodes defines model for PreconditionErrorOwnCodes.
type PreconditionErrorOwnCodes string

// Scope All scopes for accessing CubeSigner APIs
type Scope struct {
	union json.RawMessage
}

// Scope0 Explicitly named scopes for accessing CubeSigner APIs
type Scope0 string

// Scope1 Scopes including wildcard fragments for accessing CubeSigner APIs
type Scope1 = string

// ScopeSet A set of scopes.
type ScopeSet struct {
	union json.RawMessage
}

// ScopeSet0 All scopes
type ScopeSet0 string

// ScopeSet1 defines model for .
type ScopeSet1 struct {
	// AllExcept All scopes except these (including those transitively implied).
	AllExcept []Scope `json:"AllExcept"`
}

// ScopeSet2 defines model for .
type ScopeSet2 struct {
	// AllOf All of these scopes (including those transitively implied).
	AllOf []Scope `json:"AllOf"`
}

// Seconds Duration measured in seconds
// A wrapper type for serialization that encodes a `Duration` as a `u64` representing the number of seconds.
type Seconds = int64

// SignerErrorCode defines model for SignerErrorCode.
type SignerErrorCode struct {
	union json.RawMessage
}

// SignerErrorOwnCodes defines model for SignerErrorOwnCodes.
type SignerErrorOwnCodes string

// SolanaTxCmp defines model for SolanaTxCmp.
type SolanaTxCmp struct {
	// IgnoreBlockhash Whether the 'recent_blockhash' property of the Solana transaction is allowed to be different.
	IgnoreBlockhash *bool `json:"ignore_blockhash,omitempty"`
}

// UnauthorizedErrorCode defines model for UnauthorizedErrorCode.
type UnauthorizedErrorCode string

// KeyInfo defines model for KeyInfo.
type KeyInfo struct {
	Created        *EpochDateTime     `json:"created"`
	DerivationInfo *KeyDerivationInfo `json:"derivation_info"`

	// EditPolicy A policy which governs when and who is allowed to update the entity this policy is
	// attached to (e.g., a role or a key).
	//
	// When attached to a role, by default, this policy applies to role deletion and all
	// role updates (including adding/removing keys and users); in terms of scopes,
	// it applies to `manage:role:update:*` and `manage:role:delete`.
	//
	// When attached to a key, by default, this policy applies to key deletion, all
	// key updates, and adding/removing that key to/from a role; in terms of scopes,
	// it applies to `manage:key:update:*`, `manage:key:delete`, `manage:role:update:key:*`.
	//
	// This default can be changed by setting the `applies_to_scopes` property.
	EditPolicy *EditPolicy `json:"edit_policy,omitempty"`

	// Enabled Whether the key is enabled (only enabled keys may be used for signing)
	Enabled bool `json:"enabled"`

	// KeyId The id of the key: "Key#" followed by a unique identifier specific to
	// the type of key (such as a public key for BLS or an ethereum address for Secp)
	KeyId        string         `json:"key_id"`
	KeyType      KeyType        `json:"key_type"`
	LastModified *EpochDateTime `json:"last_modified"`

	// MaterialId A unique identifier specific to the type of key, such as a public key or an ethereum address
	MaterialId string `json:"material_id"`

	// Metadata User-defined metadata. When rendering (e.g., in the browser) you should treat
	// it as untrusted user data (and avoid injecting metadata into HTML directly) if
	// untrusted users can create/update keys (or their metadata).
	Metadata *interface{} `json:"metadata,omitempty"`

	// Owner Owner of the key
	Owner string `json:"owner"`

	// Policy Key policy
	// Policy []map[string]interface{} `json:"policy"`

	// PublicKey Hex-encoded, serialized public key. The format used depends on the key type:
	// - Secp256k1 keys use 65-byte uncompressed SECG format;
	// - Stark keys use 33-byte compressed SECG format;
	// - BLS keys use 48-byte compressed BLS12-381 (ZCash) format;
	// - Ed25519 keys use the canonical 32-byte encoding specified in RFC 8032.
	PublicKey string `json:"public_key"`

	// Purpose The purpose for which the key can be used (e.g., chain id for which the key is allowed to sign messages)
	Purpose string `json:"purpose"`

	// Version Version of this object
	Version *int64 `json:"version,omitempty"`
}

// SignResponse defines model for SignResponse.
type SignResponse struct {
	// Signature The hex-encoded resulting signature.
	Signature string `json:"signature"`
}

// BlobSignJSONRequestBody defines body for BlobSign for application/json ContentType.
type BlobSignJSONRequestBody = BlobSignRequest

// SignerSessionRefreshJSONRequestBody defines body for SignerSessionRefresh for application/json ContentType.
type SignerSessionRefreshJSONRequestBody = AuthData

// AsAcceptedValue0 returns the union data inside the AcceptedValue as a AcceptedValue0
func (t AcceptedValue) AsAcceptedValue0() (AcceptedValue0, error) {
	var body AcceptedValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcceptedValue0 overwrites any union data inside the AcceptedValue as the provided AcceptedValue0
func (t *AcceptedValue) FromAcceptedValue0(v AcceptedValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcceptedValue0 performs a merge with any union data inside the AcceptedValue, using the provided AcceptedValue0
func (t *AcceptedValue) MergeAcceptedValue0(v AcceptedValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AcceptedValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AcceptedValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHttpRequestCmp0 returns the union data inside the HttpRequestCmp as a HttpRequestCmp0
func (t HttpRequestCmp) AsHttpRequestCmp0() (HttpRequestCmp0, error) {
	var body HttpRequestCmp0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpRequestCmp0 overwrites any union data inside the HttpRequestCmp as the provided HttpRequestCmp0
func (t *HttpRequestCmp) FromHttpRequestCmp0(v HttpRequestCmp0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpRequestCmp0 performs a merge with any union data inside the HttpRequestCmp, using the provided HttpRequestCmp0
func (t *HttpRequestCmp) MergeHttpRequestCmp0(v HttpRequestCmp0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpRequestCmp1 returns the union data inside the HttpRequestCmp as a HttpRequestCmp1
func (t HttpRequestCmp) AsHttpRequestCmp1() (HttpRequestCmp1, error) {
	var body HttpRequestCmp1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpRequestCmp1 overwrites any union data inside the HttpRequestCmp as the provided HttpRequestCmp1
func (t *HttpRequestCmp) FromHttpRequestCmp1(v HttpRequestCmp1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpRequestCmp1 performs a merge with any union data inside the HttpRequestCmp, using the provided HttpRequestCmp1
func (t *HttpRequestCmp) MergeHttpRequestCmp1(v HttpRequestCmp1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpRequestCmp2 returns the union data inside the HttpRequestCmp as a HttpRequestCmp2
func (t HttpRequestCmp) AsHttpRequestCmp2() (HttpRequestCmp2, error) {
	var body HttpRequestCmp2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpRequestCmp2 overwrites any union data inside the HttpRequestCmp as the provided HttpRequestCmp2
func (t *HttpRequestCmp) FromHttpRequestCmp2(v HttpRequestCmp2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpRequestCmp2 performs a merge with any union data inside the HttpRequestCmp, using the provided HttpRequestCmp2
func (t *HttpRequestCmp) MergeHttpRequestCmp2(v HttpRequestCmp2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HttpRequestCmp) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HttpRequestCmp) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMfaType0 returns the union data inside the MfaType as a MfaType0
func (t MfaType) AsMfaType0() (MfaType0, error) {
	var body MfaType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMfaType0 overwrites any union data inside the MfaType as the provided MfaType0
func (t *MfaType) FromMfaType0(v MfaType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMfaType0 performs a merge with any union data inside the MfaType, using the provided MfaType0
func (t *MfaType) MergeMfaType0(v MfaType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMfaType1 returns the union data inside the MfaType as a MfaType1
func (t MfaType) AsMfaType1() (MfaType1, error) {
	var body MfaType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMfaType1 overwrites any union data inside the MfaType as the provided MfaType1
func (t *MfaType) FromMfaType1(v MfaType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMfaType1 performs a merge with any union data inside the MfaType, using the provided MfaType1
func (t *MfaType) MergeMfaType1(v MfaType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMfaType2 returns the union data inside the MfaType as a MfaType2
func (t MfaType) AsMfaType2() (MfaType2, error) {
	var body MfaType2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMfaType2 overwrites any union data inside the MfaType as the provided MfaType2
func (t *MfaType) FromMfaType2(v MfaType2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMfaType2 performs a merge with any union data inside the MfaType, using the provided MfaType2
func (t *MfaType) MergeMfaType2(v MfaType2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMfaType3 returns the union data inside the MfaType as a MfaType3
func (t MfaType) AsMfaType3() (MfaType3, error) {
	var body MfaType3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMfaType3 overwrites any union data inside the MfaType as the provided MfaType3
func (t *MfaType) FromMfaType3(v MfaType3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMfaType3 performs a merge with any union data inside the MfaType, using the provided MfaType3
func (t *MfaType) MergeMfaType3(v MfaType3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMfaType4 returns the union data inside the MfaType as a MfaType4
func (t MfaType) AsMfaType4() (MfaType4, error) {
	var body MfaType4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMfaType4 overwrites any union data inside the MfaType as the provided MfaType4
func (t *MfaType) FromMfaType4(v MfaType4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMfaType4 performs a merge with any union data inside the MfaType, using the provided MfaType4
func (t *MfaType) MergeMfaType4(v MfaType4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MfaType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MfaType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPolicyErrorOwnCodes returns the union data inside the PolicyErrorCode as a PolicyErrorOwnCodes
func (t PolicyErrorCode) AsPolicyErrorOwnCodes() (PolicyErrorOwnCodes, error) {
	var body PolicyErrorOwnCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyErrorOwnCodes overwrites any union data inside the PolicyErrorCode as the provided PolicyErrorOwnCodes
func (t *PolicyErrorCode) FromPolicyErrorOwnCodes(v PolicyErrorOwnCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyErrorOwnCodes performs a merge with any union data inside the PolicyErrorCode, using the provided PolicyErrorOwnCodes
func (t *PolicyErrorCode) MergePolicyErrorOwnCodes(v PolicyErrorOwnCodes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEvmTxDepositErrorCode returns the union data inside the PolicyErrorCode as a EvmTxDepositErrorCode
func (t PolicyErrorCode) AsEvmTxDepositErrorCode() (EvmTxDepositErrorCode, error) {
	var body EvmTxDepositErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvmTxDepositErrorCode overwrites any union data inside the PolicyErrorCode as the provided EvmTxDepositErrorCode
func (t *PolicyErrorCode) FromEvmTxDepositErrorCode(v EvmTxDepositErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvmTxDepositErrorCode performs a merge with any union data inside the PolicyErrorCode, using the provided EvmTxDepositErrorCode
func (t *PolicyErrorCode) MergeEvmTxDepositErrorCode(v EvmTxDepositErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PolicyErrorCode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PolicyErrorCode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreconditionErrorOwnCodes returns the union data inside the PreconditionErrorCode as a PreconditionErrorOwnCodes
func (t PreconditionErrorCode) AsPreconditionErrorOwnCodes() (PreconditionErrorOwnCodes, error) {
	var body PreconditionErrorOwnCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreconditionErrorOwnCodes overwrites any union data inside the PreconditionErrorCode as the provided PreconditionErrorOwnCodes
func (t *PreconditionErrorCode) FromPreconditionErrorOwnCodes(v PreconditionErrorOwnCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreconditionErrorOwnCodes performs a merge with any union data inside the PreconditionErrorCode, using the provided PreconditionErrorOwnCodes
func (t *PreconditionErrorCode) MergePreconditionErrorOwnCodes(v PreconditionErrorOwnCodes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPolicyErrorCode returns the union data inside the PreconditionErrorCode as a PolicyErrorCode
func (t PreconditionErrorCode) AsPolicyErrorCode() (PolicyErrorCode, error) {
	var body PolicyErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPolicyErrorCode overwrites any union data inside the PreconditionErrorCode as the provided PolicyErrorCode
func (t *PreconditionErrorCode) FromPolicyErrorCode(v PolicyErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePolicyErrorCode performs a merge with any union data inside the PreconditionErrorCode, using the provided PolicyErrorCode
func (t *PreconditionErrorCode) MergePolicyErrorCode(v PolicyErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreconditionErrorCode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreconditionErrorCode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScope0 returns the union data inside the Scope as a Scope0
func (t Scope) AsScope0() (Scope0, error) {
	var body Scope0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScope0 overwrites any union data inside the Scope as the provided Scope0
func (t *Scope) FromScope0(v Scope0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScope0 performs a merge with any union data inside the Scope, using the provided Scope0
func (t *Scope) MergeScope0(v Scope0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScope1 returns the union data inside the Scope as a Scope1
func (t Scope) AsScope1() (Scope1, error) {
	var body Scope1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScope1 overwrites any union data inside the Scope as the provided Scope1
func (t *Scope) FromScope1(v Scope1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScope1 performs a merge with any union data inside the Scope, using the provided Scope1
func (t *Scope) MergeScope1(v Scope1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Scope) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Scope) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsScopeSet0 returns the union data inside the ScopeSet as a ScopeSet0
func (t ScopeSet) AsScopeSet0() (ScopeSet0, error) {
	var body ScopeSet0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScopeSet0 overwrites any union data inside the ScopeSet as the provided ScopeSet0
func (t *ScopeSet) FromScopeSet0(v ScopeSet0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScopeSet0 performs a merge with any union data inside the ScopeSet, using the provided ScopeSet0
func (t *ScopeSet) MergeScopeSet0(v ScopeSet0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScopeSet1 returns the union data inside the ScopeSet as a ScopeSet1
func (t ScopeSet) AsScopeSet1() (ScopeSet1, error) {
	var body ScopeSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScopeSet1 overwrites any union data inside the ScopeSet as the provided ScopeSet1
func (t *ScopeSet) FromScopeSet1(v ScopeSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScopeSet1 performs a merge with any union data inside the ScopeSet, using the provided ScopeSet1
func (t *ScopeSet) MergeScopeSet1(v ScopeSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScopeSet2 returns the union data inside the ScopeSet as a ScopeSet2
func (t ScopeSet) AsScopeSet2() (ScopeSet2, error) {
	var body ScopeSet2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScopeSet2 overwrites any union data inside the ScopeSet as the provided ScopeSet2
func (t *ScopeSet) FromScopeSet2(v ScopeSet2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScopeSet2 performs a merge with any union data inside the ScopeSet, using the provided ScopeSet2
func (t *ScopeSet) MergeScopeSet2(v ScopeSet2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScopeSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScopeSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSignerErrorOwnCodes returns the union data inside the SignerErrorCode as a SignerErrorOwnCodes
func (t SignerErrorCode) AsSignerErrorOwnCodes() (SignerErrorOwnCodes, error) {
	var body SignerErrorOwnCodes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSignerErrorOwnCodes overwrites any union data inside the SignerErrorCode as the provided SignerErrorOwnCodes
func (t *SignerErrorCode) FromSignerErrorOwnCodes(v SignerErrorOwnCodes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSignerErrorOwnCodes performs a merge with any union data inside the SignerErrorCode, using the provided SignerErrorOwnCodes
func (t *SignerErrorCode) MergeSignerErrorOwnCodes(v SignerErrorOwnCodes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAcceptedValueCode returns the union data inside the SignerErrorCode as a AcceptedValueCode
func (t SignerErrorCode) AsAcceptedValueCode() (AcceptedValueCode, error) {
	var body AcceptedValueCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcceptedValueCode overwrites any union data inside the SignerErrorCode as the provided AcceptedValueCode
func (t *SignerErrorCode) FromAcceptedValueCode(v AcceptedValueCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcceptedValueCode performs a merge with any union data inside the SignerErrorCode, using the provided AcceptedValueCode
func (t *SignerErrorCode) MergeAcceptedValueCode(v AcceptedValueCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBadRequestErrorCode returns the union data inside the SignerErrorCode as a BadRequestErrorCode
func (t SignerErrorCode) AsBadRequestErrorCode() (BadRequestErrorCode, error) {
	var body BadRequestErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadRequestErrorCode overwrites any union data inside the SignerErrorCode as the provided BadRequestErrorCode
func (t *SignerErrorCode) FromBadRequestErrorCode(v BadRequestErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadRequestErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided BadRequestErrorCode
func (t *SignerErrorCode) MergeBadRequestErrorCode(v BadRequestErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBadGatewayErrorCode returns the union data inside the SignerErrorCode as a BadGatewayErrorCode
func (t SignerErrorCode) AsBadGatewayErrorCode() (BadGatewayErrorCode, error) {
	var body BadGatewayErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadGatewayErrorCode overwrites any union data inside the SignerErrorCode as the provided BadGatewayErrorCode
func (t *SignerErrorCode) FromBadGatewayErrorCode(v BadGatewayErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadGatewayErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided BadGatewayErrorCode
func (t *SignerErrorCode) MergeBadGatewayErrorCode(v BadGatewayErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNotFoundErrorCode returns the union data inside the SignerErrorCode as a NotFoundErrorCode
func (t SignerErrorCode) AsNotFoundErrorCode() (NotFoundErrorCode, error) {
	var body NotFoundErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNotFoundErrorCode overwrites any union data inside the SignerErrorCode as the provided NotFoundErrorCode
func (t *SignerErrorCode) FromNotFoundErrorCode(v NotFoundErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNotFoundErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided NotFoundErrorCode
func (t *SignerErrorCode) MergeNotFoundErrorCode(v NotFoundErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenErrorCode returns the union data inside the SignerErrorCode as a ForbiddenErrorCode
func (t SignerErrorCode) AsForbiddenErrorCode() (ForbiddenErrorCode, error) {
	var body ForbiddenErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenErrorCode overwrites any union data inside the SignerErrorCode as the provided ForbiddenErrorCode
func (t *SignerErrorCode) FromForbiddenErrorCode(v ForbiddenErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided ForbiddenErrorCode
func (t *SignerErrorCode) MergeForbiddenErrorCode(v ForbiddenErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedErrorCode returns the union data inside the SignerErrorCode as a UnauthorizedErrorCode
func (t SignerErrorCode) AsUnauthorizedErrorCode() (UnauthorizedErrorCode, error) {
	var body UnauthorizedErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedErrorCode overwrites any union data inside the SignerErrorCode as the provided UnauthorizedErrorCode
func (t *SignerErrorCode) FromUnauthorizedErrorCode(v UnauthorizedErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided UnauthorizedErrorCode
func (t *SignerErrorCode) MergeUnauthorizedErrorCode(v UnauthorizedErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreconditionErrorCode returns the union data inside the SignerErrorCode as a PreconditionErrorCode
func (t SignerErrorCode) AsPreconditionErrorCode() (PreconditionErrorCode, error) {
	var body PreconditionErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreconditionErrorCode overwrites any union data inside the SignerErrorCode as the provided PreconditionErrorCode
func (t *SignerErrorCode) FromPreconditionErrorCode(v PreconditionErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreconditionErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided PreconditionErrorCode
func (t *SignerErrorCode) MergePreconditionErrorCode(v PreconditionErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInternalErrorCode returns the union data inside the SignerErrorCode as a InternalErrorCode
func (t SignerErrorCode) AsInternalErrorCode() (InternalErrorCode, error) {
	var body InternalErrorCode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInternalErrorCode overwrites any union data inside the SignerErrorCode as the provided InternalErrorCode
func (t *SignerErrorCode) FromInternalErrorCode(v InternalErrorCode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInternalErrorCode performs a merge with any union data inside the SignerErrorCode, using the provided InternalErrorCode
func (t *SignerErrorCode) MergeInternalErrorCode(v InternalErrorCode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SignerErrorCode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SignerErrorCode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
