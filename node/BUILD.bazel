load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "node",
    srcs = [
        "beacon_manager.go",
        "insecure_validator_manager.go",
        "node.go",
        "overridden_manager.go",
    ],
    importpath = "github.com/ava-labs/avalanchego/node",
    visibility = ["//visibility:public"],
    deps = [
        "//api/admin",
        "//api/health",
        "//api/info",
        "//api/metrics",
        "//api/server",
        "//chains",
        "//chains/atomic",
        "//config/node",
        "//database",
        "//database/leveldb",
        "//database/memdb",
        "//database/meterdb",
        "//database/pebbledb",
        "//database/prefixdb",
        "//database/versiondb",
        "//genesis",
        "//ids",
        "//indexer",
        "//message",
        "//nat",
        "//network",
        "//network/dialer",
        "//network/peer",
        "//network/throttling",
        "//snow",
        "//snow/networking/benchlist",
        "//snow/networking/router",
        "//snow/networking/timeout",
        "//snow/networking/tracker",
        "//snow/uptime",
        "//snow/validators",
        "//staking",
        "//trace",
        "//utils",
        "//utils/constants",
        "//utils/crypto/bls",
        "//utils/dynamicip",
        "//utils/filesystem",
        "//utils/hashing",
        "//utils/ips",
        "//utils/logging",
        "//utils/math/meter",
        "//utils/metric",
        "//utils/perms",
        "//utils/profiler",
        "//utils/resource",
        "//utils/set",
        "//version",
        "//vms",
        "//vms/avm",
        "//vms/avm/config",
        "//vms/platformvm",
        "//vms/platformvm/config",
        "//vms/platformvm/signer",
        "//vms/registry",
        "//vms/rpcchainvm/runtime",
        "@com_github_ava_labs_coreth//plugin/evm",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_prometheus_client_golang//prometheus/collectors",
        "@com_github_prometheus_client_golang//prometheus/promhttp",
        "@org_uber_go_zap//:zap",
    ],
)

go_test(
    name = "node_test",
    srcs = [
        "beacon_manager_test.go",
        "overridden_manager_test.go",
    ],
    embed = [":node"],
    deps = [
        "//ids",
        "//snow/networking/router/routermock",
        "//snow/validators",
        "//utils/constants",
        "//version",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_mock//gomock",
    ],
)
