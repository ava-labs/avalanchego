// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/snow/engine/unified (interfaces: Factory)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=snow/engine/unified/mocks/mock_factory.go -mock_names=Factory=Factory github.com/ava-labs/avalanchego/snow/engine/unified Factory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/ava-labs/avalanchego/snow/engine/common"
	unified "github.com/ava-labs/avalanchego/snow/engine/unified"
	gomock "go.uber.org/mock/gomock"
)

// Factory is a mock of Factory interface.
type Factory struct {
	ctrl     *gomock.Controller
	recorder *FactoryMockRecorder
}

// FactoryMockRecorder is the mock recorder for Factory.
type FactoryMockRecorder struct {
	mock *Factory
}

// NewFactory creates a new mock instance.
func NewFactory(ctrl *gomock.Controller) *Factory {
	mock := &Factory{ctrl: ctrl}
	mock.recorder = &FactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Factory) EXPECT() *FactoryMockRecorder {
	return m.recorder
}

// AllGetServer mocks base method.
func (m *Factory) AllGetServer() common.AllGetsServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllGetServer")
	ret0, _ := ret[0].(common.AllGetsServer)
	return ret0
}

// AllGetServer indicates an expected call of AllGetServer.
func (mr *FactoryMockRecorder) AllGetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllGetServer", reflect.TypeOf((*Factory)(nil).AllGetServer))
}

// ClearBootstrapDB mocks base method.
func (m *Factory) ClearBootstrapDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearBootstrapDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearBootstrapDB indicates an expected call of ClearBootstrapDB.
func (mr *FactoryMockRecorder) ClearBootstrapDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBootstrapDB", reflect.TypeOf((*Factory)(nil).ClearBootstrapDB))
}

// HasStateSync mocks base method.
func (m *Factory) HasStateSync() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasStateSync")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasStateSync indicates an expected call of HasStateSync.
func (mr *FactoryMockRecorder) HasStateSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasStateSync", reflect.TypeOf((*Factory)(nil).HasStateSync))
}

// NewAvalancheAncestorsGetter mocks base method.
func (m *Factory) NewAvalancheAncestorsGetter() common.GetAncestorsHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAvalancheAncestorsGetter")
	ret0, _ := ret[0].(common.GetAncestorsHandler)
	return ret0
}

// NewAvalancheAncestorsGetter indicates an expected call of NewAvalancheAncestorsGetter.
func (mr *FactoryMockRecorder) NewAvalancheAncestorsGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAvalancheAncestorsGetter", reflect.TypeOf((*Factory)(nil).NewAvalancheAncestorsGetter))
}

// NewAvalancheSyncer mocks base method.
func (m *Factory) NewAvalancheSyncer(arg0 unified.OnFinishedFunc) (common.AvalancheBootstrapableEngine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAvalancheSyncer", arg0)
	ret0, _ := ret[0].(common.AvalancheBootstrapableEngine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAvalancheSyncer indicates an expected call of NewAvalancheSyncer.
func (mr *FactoryMockRecorder) NewAvalancheSyncer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAvalancheSyncer", reflect.TypeOf((*Factory)(nil).NewAvalancheSyncer), arg0)
}

// NewSnowBootstrapper mocks base method.
func (m *Factory) NewSnowBootstrapper(arg0 unified.OnFinishedFunc) (common.BootstrapableEngine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSnowBootstrapper", arg0)
	ret0, _ := ret[0].(common.BootstrapableEngine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSnowBootstrapper indicates an expected call of NewSnowBootstrapper.
func (mr *FactoryMockRecorder) NewSnowBootstrapper(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSnowBootstrapper", reflect.TypeOf((*Factory)(nil).NewSnowBootstrapper), arg0)
}

// NewSnowman mocks base method.
func (m *Factory) NewSnowman() (common.ConsensusEngine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSnowman")
	ret0, _ := ret[0].(common.ConsensusEngine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSnowman indicates an expected call of NewSnowman.
func (mr *FactoryMockRecorder) NewSnowman() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSnowman", reflect.TypeOf((*Factory)(nil).NewSnowman))
}

// NewStateSyncer mocks base method.
func (m *Factory) NewStateSyncer(arg0 unified.OnFinishedFunc) (common.StateSyncer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStateSyncer", arg0)
	ret0, _ := ret[0].(common.StateSyncer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStateSyncer indicates an expected call of NewStateSyncer.
func (mr *FactoryMockRecorder) NewStateSyncer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStateSyncer", reflect.TypeOf((*Factory)(nil).NewStateSyncer), arg0)
}
