// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/snow/validators (interfaces: SubnetConnector)
//
// Generated by this command:
//
//	mockgen -package=validatorsmock -destination=snow/validators/validatorsmock/subnet_connector.go -mock_names=SubnetConnector=SubnetConnector github.com/ava-labs/avalanchego/snow/validators SubnetConnector
//

// Package validatorsmock is a generated GoMock package.
package validatorsmock

import (
	context "context"
	reflect "reflect"

	ids "github.com/ava-labs/avalanchego/ids"
	gomock "go.uber.org/mock/gomock"
)

// SubnetConnector is a mock of SubnetConnector interface.
type SubnetConnector struct {
	ctrl     *gomock.Controller
	recorder *SubnetConnectorMockRecorder
}

// SubnetConnectorMockRecorder is the mock recorder for SubnetConnector.
type SubnetConnectorMockRecorder struct {
	mock *SubnetConnector
}

// NewSubnetConnector creates a new mock instance.
func NewSubnetConnector(ctrl *gomock.Controller) *SubnetConnector {
	mock := &SubnetConnector{ctrl: ctrl}
	mock.recorder = &SubnetConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SubnetConnector) EXPECT() *SubnetConnectorMockRecorder {
	return m.recorder
}

// ConnectedSubnet mocks base method.
func (m *SubnetConnector) ConnectedSubnet(arg0 context.Context, arg1 ids.NodeID, arg2 ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedSubnet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectedSubnet indicates an expected call of ConnectedSubnet.
func (mr *SubnetConnectorMockRecorder) ConnectedSubnet(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedSubnet", reflect.TypeOf((*SubnetConnector)(nil).ConnectedSubnet), arg0, arg1, arg2)
}
