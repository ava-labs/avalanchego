// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanchego/utils/crypto/keychain/cubesigner (interfaces: CubeSignerClient)
//
// Generated by this command:
//
//	mockgen -package=cubesignermock -destination=cubesignermock/cubesigner_client.go -mock_names=CubeSignerClient=CubeSignerClient . CubeSignerClient
//

// Package cubesignermock is a generated GoMock package.
package cubesignermock

import (
	reflect "reflect"

	client "github.com/cubist-labs/cubesigner-go-sdk/client"
	models "github.com/cubist-labs/cubesigner-go-sdk/models"
	gomock "go.uber.org/mock/gomock"
)

// CubeSignerClient is a mock of CubeSignerClient interface.
type CubeSignerClient struct {
	ctrl     *gomock.Controller
	recorder *CubeSignerClientMockRecorder
	isgomock struct{}
}

// CubeSignerClientMockRecorder is the mock recorder for CubeSignerClient.
type CubeSignerClientMockRecorder struct {
	mock *CubeSignerClient
}

// NewCubeSignerClient creates a new mock instance.
func NewCubeSignerClient(ctrl *gomock.Controller) *CubeSignerClient {
	mock := &CubeSignerClient{ctrl: ctrl}
	mock.recorder = &CubeSignerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CubeSignerClient) EXPECT() *CubeSignerClientMockRecorder {
	return m.recorder
}

// AvaSerializedTxSign mocks base method.
func (m *CubeSignerClient) AvaSerializedTxSign(chainAlias, materialID string, request models.AvaSerializedTxSignRequest, receipts ...*client.MfaReceipt) (*client.CubeSignerResponse[models.SignResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{chainAlias, materialID, request}
	for _, a := range receipts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AvaSerializedTxSign", varargs...)
	ret0, _ := ret[0].(*client.CubeSignerResponse[models.SignResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvaSerializedTxSign indicates an expected call of AvaSerializedTxSign.
func (mr *CubeSignerClientMockRecorder) AvaSerializedTxSign(chainAlias, materialID, request any, receipts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{chainAlias, materialID, request}, receipts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvaSerializedTxSign", reflect.TypeOf((*CubeSignerClient)(nil).AvaSerializedTxSign), varargs...)
}

// BlobSign mocks base method.
func (m *CubeSignerClient) BlobSign(keyID string, request models.BlobSignRequest, receipts ...*client.MfaReceipt) (*client.CubeSignerResponse[models.SignResponse], error) {
	m.ctrl.T.Helper()
	varargs := []any{keyID, request}
	for _, a := range receipts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BlobSign", varargs...)
	ret0, _ := ret[0].(*client.CubeSignerResponse[models.SignResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlobSign indicates an expected call of BlobSign.
func (mr *CubeSignerClientMockRecorder) BlobSign(keyID, request any, receipts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{keyID, request}, receipts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlobSign", reflect.TypeOf((*CubeSignerClient)(nil).BlobSign), varargs...)
}

// GetKeyInOrg mocks base method.
func (m *CubeSignerClient) GetKeyInOrg(keyID string) (*models.KeyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyInOrg", keyID)
	ret0, _ := ret[0].(*models.KeyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyInOrg indicates an expected call of GetKeyInOrg.
func (mr *CubeSignerClientMockRecorder) GetKeyInOrg(keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyInOrg", reflect.TypeOf((*CubeSignerClient)(nil).GetKeyInOrg), keyID)
}
